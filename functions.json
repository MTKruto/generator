{
  "invokeAfterMsg": {
    "doc": "Invokes a query after successful completion of one of the previous queries.",
    "parameters": {
      "msg_id": {
        "type": "long",
        "doc": "Message identifier on which a current query depends"
      },
      "query": {
        "type": "!X",
        "doc": "The query itself"
      }
    }
  },
  "invokeAfterMsgs": {
    "doc": "Invokes a query after a successful completion of previous queries",
    "parameters": {
      "msg_ids": {
        "type": "Vector<long>",
        "doc": "List of messages on which a current query depends"
      },
      "query": {
        "type": "!X",
        "doc": "The query itself"
      }
    }
  },
  "initConnection": {
    "doc": "Initialize connection",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "api_id": {
        "type": "int",
        "doc": "Application identifier (see. [App configuration](https://core.telegram.org/myapp))"
      },
      "device_model": {
        "type": "string",
        "doc": "Device model"
      },
      "system_version": {
        "type": "string",
        "doc": "Operation system version"
      },
      "app_version": {
        "type": "string",
        "doc": "Application version"
      },
      "system_lang_code": {
        "type": "string",
        "doc": "Code for the language used on the device's OS, ISO 639-1 standard"
      },
      "lang_pack": {
        "type": "string",
        "doc": "Language pack to use"
      },
      "lang_code": {
        "type": "string",
        "doc": "Code for the language used on the client, ISO 639-1 standard"
      },
      "proxy": {
        "type": "flags.0?InputClientProxy",
        "doc": "Info about an MTProto proxy"
      },
      "params": {
        "type": "flags.1?JSONValue",
        "doc": "Additional initConnection parameters.  \nFor now, only the `tz_offset` field is supported, for specifying timezone offset in seconds."
      },
      "query": {
        "type": "!X",
        "doc": "The query itself"
      }
    }
  },
  "invokeWithLayer": {
    "doc": "Invoke the specified query using the specified API [layer](https://core.telegram.org/api/invoking#layers)",
    "parameters": {
      "layer": {
        "type": "int",
        "doc": "The layer to use"
      },
      "query": {
        "type": "!X",
        "doc": "The query"
      }
    }
  },
  "invokeWithoutUpdates": {
    "doc": "Invoke a request without subscribing the used connection for [updates](https://core.telegram.org/api/updates) (this is enabled by default for [file queries](https://core.telegram.org/api/files)).",
    "parameters": {
      "query": {
        "type": "!X",
        "doc": "The query"
      }
    }
  },
  "invokeWithMessagesRange": {
    "doc": "Invoke with the given message range",
    "parameters": {
      "range": {
        "type": "MessageRange",
        "doc": "Message range"
      },
      "query": {
        "type": "!X",
        "doc": "Query"
      }
    }
  },
  "invokeWithTakeout": {
    "doc": "Invoke a method within a [takeout session, see here » for more info](https://core.telegram.org/api/takeout).",
    "parameters": {
      "takeout_id": {
        "type": "long",
        "doc": "[Takeout session ID »](https://core.telegram.org/api/takeout)"
      },
      "query": {
        "type": "!X",
        "doc": "Query"
      }
    }
  },
  "auth.sendCode": {
    "doc": "Send the verification code for login",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number in international format"
      },
      "api_id": {
        "type": "int",
        "doc": "Application identifier (see [App configuration](https://core.telegram.org/myapp))"
      },
      "api_hash": {
        "type": "string",
        "doc": "Application secret hash (see [App configuration](https://core.telegram.org/myapp))"
      },
      "settings": {
        "type": "CodeSettings",
        "doc": "Settings for the code type to send"
      }
    }
  },
  "auth.signUp": {
    "doc": "Registers a validated phone number in the system.",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number in the international format"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "SMS-message ID"
      },
      "first_name": {
        "type": "string",
        "doc": "New user first name"
      },
      "last_name": {
        "type": "string",
        "doc": "New user last name"
      }
    }
  },
  "auth.signIn": {
    "doc": "Signs in a user with a validated phone number.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "phone_number": {
        "type": "string",
        "doc": "Phone number in the international format"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "SMS-message ID, obtained from [auth.sendCode](https://core.telegram.org/method/auth.sendCode)"
      },
      "phone_code": {
        "type": "flags.0?string",
        "doc": "Valid numerical code from the SMS-message"
      },
      "email_verification": {
        "type": "flags.1?EmailVerification",
        "doc": "Email verification code or token"
      }
    }
  },
  "auth.logOut": {
    "doc": "Logs out the user.",
    "parameters": {}
  },
  "auth.resetAuthorizations": {
    "doc": "Terminates all user's authorized sessions except for the current one.",
    "parameters": {}
  },
  "auth.exportAuthorization": {
    "doc": "Returns data for copying authorization to another data-center.",
    "parameters": {
      "dc_id": {
        "type": "int",
        "doc": "Number of a target data-center"
      }
    }
  },
  "auth.importAuthorization": {
    "doc": "Logs in a user using a key transmitted from his native data-center.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "User ID"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Authorization key"
      }
    }
  },
  "auth.bindTempAuthKey": {
    "doc": "Binds a temporary authorization key `temp_auth_key_id` to the permanent authorization key `perm_auth_key_id`. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.",
    "parameters": {
      "perm_auth_key_id": {
        "type": "long",
        "doc": "Permanent auth\\_key\\_id to bind to"
      },
      "nonce": {
        "type": "long",
        "doc": "Random long from [Binding message contents](#binding-message-contents)"
      },
      "expires_at": {
        "type": "int",
        "doc": "Unix timestamp to invalidate temporary key, see [Binding message contents](#binding-message-contents)"
      },
      "encrypted_message": {
        "type": "bytes",
        "doc": "See [Generating encrypted\\_message](#generating-encrypted-message)"
      }
    }
  },
  "auth.importBotAuthorization": {
    "doc": "Login as a bot",
    "parameters": {
      "flags": {
        "type": "int",
        "doc": "Reserved for future use"
      },
      "api_id": {
        "type": "int",
        "doc": "Application identifier (see. [App configuration](https://core.telegram.org/myapp))"
      },
      "api_hash": {
        "type": "string",
        "doc": "Application identifier hash (see. [App configuration](https://core.telegram.org/myapp))"
      },
      "bot_auth_token": {
        "type": "string",
        "doc": "Bot token (see [bots](https://core.telegram.org/bots))"
      }
    }
  },
  "auth.checkPassword": {
    "doc": "Try logging to an account protected by a [2FA password](https://core.telegram.org/api/srp).",
    "parameters": {
      "password": {
        "type": "InputCheckPasswordSRP",
        "doc": "The account's password (see [SRP](https://core.telegram.org/api/srp))"
      }
    }
  },
  "auth.requestPasswordRecovery": {
    "doc": "Request recovery code of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).",
    "parameters": {}
  },
  "auth.recoverPassword": {
    "doc": "Reset the [2FA password](https://core.telegram.org/api/srp) using the recovery code sent using [auth.requestPasswordRecovery](https://core.telegram.org/method/auth.requestPasswordRecovery).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "code": {
        "type": "string",
        "doc": "Code received via email"
      },
      "new_settings": {
        "type": "flags.0?account.PasswordInputSettings",
        "doc": "New password"
      }
    }
  },
  "auth.resendCode": {
    "doc": "Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see [login](https://core.telegram.org/api/auth) for more info.",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "The phone number"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "The phone code hash obtained from [auth.sendCode](https://core.telegram.org/method/auth.sendCode)"
      }
    }
  },
  "auth.cancelCode": {
    "doc": "Cancel the login verification code",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash from [auth.sendCode](https://core.telegram.org/method/auth.sendCode)"
      }
    }
  },
  "auth.dropTempAuthKeys": {
    "doc": "Delete all temporary authorization keys **except for** the ones specified",
    "parameters": {
      "except_auth_keys": {
        "type": "Vector<long>",
        "doc": "The auth keys that **shouldn't** be dropped."
      }
    }
  },
  "auth.exportLoginToken": {
    "doc": "Generate a login token, for [login via QR code](https://core.telegram.org/api/qr-login).  \nThe generated login token should be encoded using base64url, then shown as a `tg://login?token=base64encodedtoken` [deep link »](https://core.telegram.org/api/links#qr-code-login-links) in the QR code.",
    "parameters": {
      "api_id": {
        "type": "int",
        "doc": "Application identifier (see. [App configuration](https://core.telegram.org/myapp))"
      },
      "api_hash": {
        "type": "string",
        "doc": "Application identifier hash (see. [App configuration](https://core.telegram.org/myapp))"
      },
      "except_ids": {
        "type": "Vector<long>",
        "doc": "List of already logged-in user IDs, to prevent logging in twice with the same user"
      }
    }
  },
  "auth.importLoginToken": {
    "doc": "Login using a redirected login token, generated in case of DC mismatch during [QR code login](https://core.telegram.org/api/qr-login).",
    "parameters": {
      "token": {
        "type": "bytes",
        "doc": "Login token"
      }
    }
  },
  "auth.acceptLoginToken": {
    "doc": "Accept QR code login token, logging in the app that generated it.",
    "parameters": {
      "token": {
        "type": "bytes",
        "doc": "Login token embedded in QR code, for more info, see [login via QR code](https://core.telegram.org/api/qr-login)."
      }
    }
  },
  "auth.checkRecoveryPassword": {
    "doc": "Check if the [2FA recovery code](https://core.telegram.org/api/srp) sent using [auth.requestPasswordRecovery](https://core.telegram.org/method/auth.requestPasswordRecovery) is valid, before passing it to [auth.recoverPassword](https://core.telegram.org/method/auth.recoverPassword).",
    "parameters": {
      "code": {
        "type": "string",
        "doc": "Code received via email"
      }
    }
  },
  "auth.importWebTokenAuthorization": {
    "doc": "Login by importing an authorization token",
    "parameters": {
      "api_id": {
        "type": "int",
        "doc": "[API ID](https://core.telegram.org/api/obtaining_api_id)"
      },
      "api_hash": {
        "type": "string",
        "doc": "[API hash](https://core.telegram.org/api/obtaining_api_id)"
      },
      "web_auth_token": {
        "type": "string",
        "doc": "The authorization token"
      }
    }
  },
  "auth.requestFirebaseSms": {
    "doc": "Request an SMS code via Firebase.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash returned by [auth.sendCode](https://core.telegram.org/method/auth.sendCode)"
      },
      "safety_net_token": {
        "type": "flags.0?string",
        "doc": "On Android, a JWS object obtained as described in the [auth documentation »](https://core.telegram.org/api/auth)"
      },
      "ios_push_secret": {
        "type": "flags.1?string",
        "doc": "Secret token received via an apple push notification"
      }
    }
  },
  "auth.resetLoginEmail": {
    "doc": "Reset the [login email »](https://core.telegram.org/api/auth#email-verification).",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number of the account"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash, obtained as described in the [documentation »](https://core.telegram.org/api/auth)"
      }
    }
  },
  "account.registerDevice": {
    "doc": "Register device to receive [PUSH notifications](https://core.telegram.org/api/push-updates)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_muted": {
        "type": "flags.0?true",
        "doc": "Avoid receiving (silent and invisible background) notifications. Useful to save battery."
      },
      "token_type": {
        "type": "int",
        "doc": "Device token type, see [PUSH updates](https://core.telegram.org/api/push-updates#subscribing-to-notifications) for the possible values."
      },
      "token": {
        "type": "string",
        "doc": "Device token, see [PUSH updates](https://core.telegram.org/api/push-updates#subscribing-to-notifications) for the possible values."
      },
      "app_sandbox": {
        "type": "Bool",
        "doc": "If [(boolTrue)](https://core.telegram.org/constructor/boolTrue) is transmitted, a sandbox-certificate will be used during transmission."
      },
      "secret": {
        "type": "bytes",
        "doc": "For FCM and APNS VoIP, optional encryption key used to encrypt push notifications"
      },
      "other_uids": {
        "type": "Vector<long>",
        "doc": "List of user identifiers of other users currently using the client"
      }
    }
  },
  "account.unregisterDevice": {
    "doc": "Deletes a device by its token, stops sending PUSH-notifications to it.",
    "parameters": {
      "token_type": {
        "type": "int",
        "doc": "Device token type, see [PUSH updates](https://core.telegram.org/api/push-updates#subscribing-to-notifications) for the possible values."
      },
      "token": {
        "type": "string",
        "doc": "Device token, see [PUSH updates](https://core.telegram.org/api/push-updates#subscribing-to-notifications) for the possible values."
      },
      "other_uids": {
        "type": "Vector<long>",
        "doc": "List of user identifiers of other users currently using the client"
      }
    }
  },
  "account.updateNotifySettings": {
    "doc": "Edits notification settings from a given user/group, from all users/all groups.",
    "parameters": {
      "peer": {
        "type": "InputNotifyPeer",
        "doc": "Notification source"
      },
      "settings": {
        "type": "InputPeerNotifySettings",
        "doc": "Notification settings"
      }
    }
  },
  "account.getNotifySettings": {
    "doc": "Gets current notification settings for a given user/group, from all users/all groups.",
    "parameters": {
      "peer": {
        "type": "InputNotifyPeer",
        "doc": "Notification source"
      }
    }
  },
  "account.resetNotifySettings": {
    "doc": "Resets all notification settings from users and groups.",
    "parameters": {}
  },
  "account.updateProfile": {
    "doc": "Updates user profile.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "first_name": {
        "type": "flags.0?string",
        "doc": "New user first name"
      },
      "last_name": {
        "type": "flags.1?string",
        "doc": "New user last name"
      },
      "about": {
        "type": "flags.2?string",
        "doc": "New bio"
      }
    }
  },
  "account.updateStatus": {
    "doc": "Updates online user status.",
    "parameters": {
      "offline": {
        "type": "Bool",
        "doc": "If [(boolTrue)](https://core.telegram.org/constructor/boolTrue) is transmitted, user status will change to [(userStatusOffline)](https://core.telegram.org/constructor/userStatusOffline)."
      }
    }
  },
  "account.getWallPapers": {
    "doc": "Returns a list of available [wallpapers](https://core.telegram.org/api/wallpapers).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.reportPeer": {
    "doc": "Report a peer for violation of telegram's Terms of Service",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer to report"
      },
      "reason": {
        "type": "ReportReason",
        "doc": "The reason why this peer is being reported"
      },
      "message": {
        "type": "string",
        "doc": "Comment for report moderation"
      }
    }
  },
  "account.checkUsername": {
    "doc": "Validates a username and checks availability.",
    "parameters": {
      "username": {
        "type": "string",
        "doc": "username  \nAccepted characters: A-z (case-insensitive), 0-9 and underscores.  \nLength: 5-32 characters."
      }
    }
  },
  "account.updateUsername": {
    "doc": "Changes username for the current user.",
    "parameters": {
      "username": {
        "type": "string",
        "doc": "username or empty string if username is to be removed  \nAccepted characters: a-z (case-insensitive), 0-9 and underscores.  \nLength: 5-32 characters."
      }
    }
  },
  "account.getPrivacy": {
    "doc": "Get privacy settings of current account",
    "parameters": {
      "key": {
        "type": "InputPrivacyKey",
        "doc": "Peer category whose privacy settings should be fetched"
      }
    }
  },
  "account.setPrivacy": {
    "doc": "Change privacy settings of current account",
    "parameters": {
      "key": {
        "type": "InputPrivacyKey",
        "doc": "New privacy rule"
      },
      "rules": {
        "type": "Vector<InputPrivacyRule>",
        "doc": "Peers to which the privacy rule will apply."
      }
    }
  },
  "account.deleteAccount": {
    "doc": "Delete the user's account from the telegram servers.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "reason": {
        "type": "string",
        "doc": "Why is the account being deleted, can be empty"
      },
      "password": {
        "type": "flags.0?InputCheckPasswordSRP",
        "doc": "[2FA password](https://core.telegram.org/api/srp): this field can be omitted even for accounts with 2FA enabled: in this case account account deletion will be delayed by 7 days [as specified in the docs »](https://core.telegram.org/api/account-deletion)"
      }
    }
  },
  "account.getAccountTTL": {
    "doc": "Get days to live of account",
    "parameters": {}
  },
  "account.setAccountTTL": {
    "doc": "Set account self-destruction period",
    "parameters": {
      "ttl": {
        "type": "AccountDaysTTL",
        "doc": "Time to live in days"
      }
    }
  },
  "account.sendChangePhoneCode": {
    "doc": "Verify a new phone number to associate to the current account",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "New phone number"
      },
      "settings": {
        "type": "CodeSettings",
        "doc": "Phone code settings"
      }
    }
  },
  "account.changePhone": {
    "doc": "Change the phone number of the current account",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "New phone number"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash received when calling [account.sendChangePhoneCode](https://core.telegram.org/method/account.sendChangePhoneCode)"
      },
      "phone_code": {
        "type": "string",
        "doc": "Phone code received when calling [account.sendChangePhoneCode](https://core.telegram.org/method/account.sendChangePhoneCode)"
      }
    }
  },
  "account.updateDeviceLocked": {
    "doc": "When client-side passcode lock feature is enabled, will not show message texts in incoming [PUSH notifications](https://core.telegram.org/api/push-updates).",
    "parameters": {
      "period": {
        "type": "int",
        "doc": "Inactivity period after which to start hiding message texts in [PUSH notifications](https://core.telegram.org/api/push-updates)."
      }
    }
  },
  "account.getAuthorizations": {
    "doc": "Get logged-in sessions",
    "parameters": {}
  },
  "account.resetAuthorization": {
    "doc": "Log out an active [authorized session](https://core.telegram.org/api/auth) by its hash",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "Session hash"
      }
    }
  },
  "account.getPassword": {
    "doc": "Obtain configuration for two-factor authorization with password",
    "parameters": {}
  },
  "account.getPasswordSettings": {
    "doc": "Get private info associated to the password info (recovery email, telegram [passport](https://core.telegram.org/passport) info & so on)",
    "parameters": {
      "password": {
        "type": "InputCheckPasswordSRP",
        "doc": "The password (see [SRP](https://core.telegram.org/api/srp))"
      }
    }
  },
  "account.updatePasswordSettings": {
    "doc": "Set a new 2FA password",
    "parameters": {
      "password": {
        "type": "InputCheckPasswordSRP",
        "doc": "The old password (see [SRP](https://core.telegram.org/api/srp))"
      },
      "new_settings": {
        "type": "account.PasswordInputSettings",
        "doc": "The new password (see [SRP](https://core.telegram.org/api/srp))"
      }
    }
  },
  "account.sendConfirmPhoneCode": {
    "doc": "Send confirmation code to cancel account deletion, for more info [click here »](https://core.telegram.org/api/account-deletion)",
    "parameters": {
      "hash": {
        "type": "string",
        "doc": "The hash from the service notification, for more info [click here »](https://core.telegram.org/api/account-deletion)"
      },
      "settings": {
        "type": "CodeSettings",
        "doc": "Phone code settings"
      }
    }
  },
  "account.confirmPhone": {
    "doc": "Confirm a phone number to cancel account deletion, for more info [click here »](https://core.telegram.org/api/account-deletion)",
    "parameters": {
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash, for more info [click here »](https://core.telegram.org/api/account-deletion)"
      },
      "phone_code": {
        "type": "string",
        "doc": "SMS code, for more info [click here »](https://core.telegram.org/api/account-deletion)"
      }
    }
  },
  "account.getTmpPassword": {
    "doc": "Get temporary payment password",
    "parameters": {
      "password": {
        "type": "InputCheckPasswordSRP",
        "doc": "SRP password parameters"
      },
      "period": {
        "type": "int",
        "doc": "Time during which the temporary password will be valid, in seconds; should be between 60 and 86400"
      }
    }
  },
  "account.getWebAuthorizations": {
    "doc": "Get web [login widget](https://core.telegram.org/widgets/login) authorizations",
    "parameters": {}
  },
  "account.resetWebAuthorization": {
    "doc": "Log out an active web [telegram login](https://core.telegram.org/widgets/login) session",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Session](https://core.telegram.org/constructor/webAuthorization) hash"
      }
    }
  },
  "account.resetWebAuthorizations": {
    "doc": "Reset all active web [telegram login](https://core.telegram.org/widgets/login) sessions",
    "parameters": {}
  },
  "account.getAllSecureValues": {
    "doc": "Get all saved [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)",
    "parameters": {}
  },
  "account.getSecureValue": {
    "doc": "Get saved [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)",
    "parameters": {
      "types": {
        "type": "Vector<SecureValueType>",
        "doc": "Requested value types"
      }
    }
  },
  "account.saveSecureValue": {
    "doc": "Securely save [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)",
    "parameters": {
      "value": {
        "type": "InputSecureValue",
        "doc": "Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)"
      },
      "secure_secret_id": {
        "type": "long",
        "doc": "Passport secret hash, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)"
      }
    }
  },
  "account.deleteSecureValue": {
    "doc": "Delete stored [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)",
    "parameters": {
      "types": {
        "type": "Vector<SecureValueType>",
        "doc": "Document types to delete"
      }
    }
  },
  "account.getAuthorizationForm": {
    "doc": "Returns a Telegram Passport authorization form for sharing data with a service",
    "parameters": {
      "bot_id": {
        "type": "long",
        "doc": "User identifier of the service's bot"
      },
      "scope": {
        "type": "string",
        "doc": "Telegram Passport element types requested by the service"
      },
      "public_key": {
        "type": "string",
        "doc": "Service's public key"
      }
    }
  },
  "account.acceptAuthorization": {
    "doc": "Sends a Telegram Passport authorization form, effectively sharing data with the service",
    "parameters": {
      "bot_id": {
        "type": "long",
        "doc": "Bot ID"
      },
      "scope": {
        "type": "string",
        "doc": "Telegram Passport element types requested by the service"
      },
      "public_key": {
        "type": "string",
        "doc": "Service's public key"
      },
      "value_hashes": {
        "type": "Vector<SecureValueHash>",
        "doc": "Types of values sent and their hashes"
      },
      "credentials": {
        "type": "SecureCredentialsEncrypted",
        "doc": "Encrypted values"
      }
    }
  },
  "account.sendVerifyPhoneCode": {
    "doc": "Send the verification phone code for telegram [passport](https://core.telegram.org/passport).",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "The phone number to verify"
      },
      "settings": {
        "type": "CodeSettings",
        "doc": "Phone code settings"
      }
    }
  },
  "account.verifyPhone": {
    "doc": "Verify a phone number for telegram [passport](https://core.telegram.org/passport).",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash received from the call to [account.sendVerifyPhoneCode](https://core.telegram.org/method/account.sendVerifyPhoneCode)"
      },
      "phone_code": {
        "type": "string",
        "doc": "Code received after the call to [account.sendVerifyPhoneCode](https://core.telegram.org/method/account.sendVerifyPhoneCode)"
      }
    }
  },
  "account.sendVerifyEmailCode": {
    "doc": "Send an email verification code.",
    "parameters": {
      "purpose": {
        "type": "EmailVerifyPurpose",
        "doc": "Verification purpose."
      },
      "email": {
        "type": "string",
        "doc": "The email where to send the code."
      }
    }
  },
  "account.verifyEmail": {
    "doc": "Verify an email address.",
    "parameters": {
      "purpose": {
        "type": "EmailVerifyPurpose",
        "doc": "Verification purpose"
      },
      "verification": {
        "type": "EmailVerification",
        "doc": "Email verification code or token"
      }
    }
  },
  "account.initTakeoutSession": {
    "doc": "Initialize a [takeout session, see here » for more info](https://core.telegram.org/api/takeout).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "contacts": {
        "type": "flags.0?true",
        "doc": "Whether to export contacts"
      },
      "message_users": {
        "type": "flags.1?true",
        "doc": "Whether to export messages in private chats"
      },
      "message_chats": {
        "type": "flags.2?true",
        "doc": "Whether to export messages in [basic groups](https://core.telegram.org/api/channel#basic-groups)"
      },
      "message_megagroups": {
        "type": "flags.3?true",
        "doc": "Whether to export messages in [supergroups](https://core.telegram.org/api/channel#supergroups)"
      },
      "message_channels": {
        "type": "flags.4?true",
        "doc": "Whether to export messages in [channels](https://core.telegram.org/api/channel#channels)"
      },
      "files": {
        "type": "flags.5?true",
        "doc": "Whether to export files"
      },
      "file_max_size": {
        "type": "flags.5?long",
        "doc": "Maximum size of files to export"
      }
    }
  },
  "account.finishTakeoutSession": {
    "doc": "Terminate a [takeout session, see here » for more info](https://core.telegram.org/api/takeout).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "success": {
        "type": "flags.0?true",
        "doc": "Data exported successfully"
      }
    }
  },
  "account.confirmPasswordEmail": {
    "doc": "Verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).",
    "parameters": {
      "code": {
        "type": "string",
        "doc": "The phone code that was received after [setting a recovery email](https://core.telegram.org/api/srp#email-verification)"
      }
    }
  },
  "account.resendPasswordEmail": {
    "doc": "Resend the code to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).",
    "parameters": {}
  },
  "account.cancelPasswordEmail": {
    "doc": "Cancel the code that was sent to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).",
    "parameters": {}
  },
  "account.getContactSignUpNotification": {
    "doc": "Whether the user will receive notifications when contacts sign up",
    "parameters": {}
  },
  "account.setContactSignUpNotification": {
    "doc": "Toggle contact sign up notifications",
    "parameters": {
      "silent": {
        "type": "Bool",
        "doc": "Whether to disable contact sign up notifications"
      }
    }
  },
  "account.getNotifyExceptions": {
    "doc": "Returns list of chats with non-default notification settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "compare_sound": {
        "type": "flags.1?true",
        "doc": "If set, chats with non-default sound will be returned"
      },
      "compare_stories": {
        "type": "flags.2?true",
        "doc": "If set, chats with non-default notification settings for stories will be returned"
      },
      "peer": {
        "type": "flags.0?InputNotifyPeer",
        "doc": "If specified, only chats of the specified category will be returned"
      }
    }
  },
  "account.getWallPaper": {
    "doc": "Get info about a certain [wallpaper](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "wallpaper": {
        "type": "InputWallPaper",
        "doc": "The [wallpaper](https://core.telegram.org/api/wallpapers) to get info about"
      }
    }
  },
  "account.uploadWallPaper": {
    "doc": "Create and upload a new [wallpaper](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "for_chat": {
        "type": "flags.0?true",
        "doc": "Set this flag when uploading wallpapers to be passed to [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper)."
      },
      "file": {
        "type": "InputFile",
        "doc": "The JPG/PNG wallpaper"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type of uploaded wallpaper"
      },
      "settings": {
        "type": "WallPaperSettings",
        "doc": "Wallpaper settings"
      }
    }
  },
  "account.saveWallPaper": {
    "doc": "Install/uninstall [wallpaper](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "wallpaper": {
        "type": "InputWallPaper",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) to install or uninstall"
      },
      "unsave": {
        "type": "Bool",
        "doc": "Uninstall wallpaper?"
      },
      "settings": {
        "type": "WallPaperSettings",
        "doc": "Wallpaper settings"
      }
    }
  },
  "account.installWallPaper": {
    "doc": "Install [wallpaper](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "wallpaper": {
        "type": "InputWallPaper",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) to install"
      },
      "settings": {
        "type": "WallPaperSettings",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) settings"
      }
    }
  },
  "account.resetWallPapers": {
    "doc": "Delete all installed [wallpapers](https://core.telegram.org/api/wallpapers), reverting to the default wallpaper set.",
    "parameters": {}
  },
  "account.getAutoDownloadSettings": {
    "doc": "Get media autodownload settings",
    "parameters": {}
  },
  "account.saveAutoDownloadSettings": {
    "doc": "Change media autodownload settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "low": {
        "type": "flags.0?true",
        "doc": "Whether to save media in the low data usage preset"
      },
      "high": {
        "type": "flags.1?true",
        "doc": "Whether to save media in the high data usage preset"
      },
      "settings": {
        "type": "AutoDownloadSettings",
        "doc": "Media autodownload settings"
      }
    }
  },
  "account.uploadTheme": {
    "doc": "Upload theme",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "file": {
        "type": "InputFile",
        "doc": "[Previously uploaded](https://core.telegram.org/api/themes#uploading-theme-files) theme file with platform-specific colors for UI components, can be left unset when creating themes that only modify the wallpaper or accent colors."
      },
      "thumb": {
        "type": "flags.0?InputFile",
        "doc": "Thumbnail"
      },
      "file_name": {
        "type": "string",
        "doc": "File name"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type, must be `application/x-tgtheme-{format}`, where `format` depends on the client"
      }
    }
  },
  "account.createTheme": {
    "doc": "Create a theme",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "slug": {
        "type": "string",
        "doc": "Unique theme ID used to generate [theme deep links](https://core.telegram.org/api/links#theme-links), can be empty to autogenerate a random ID."
      },
      "title": {
        "type": "string",
        "doc": "Theme name"
      },
      "document": {
        "type": "flags.2?InputDocument",
        "doc": "Theme file"
      },
      "settings": {
        "type": "flags.3?Vector<InputThemeSettings>",
        "doc": "Theme settings, multiple values can be provided for the different base themes (day/night mode, etc)."
      }
    }
  },
  "account.updateTheme": {
    "doc": "Update theme",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "format": {
        "type": "string",
        "doc": "Theme format, a string that identifies the theming engines supported by the client"
      },
      "theme": {
        "type": "InputTheme",
        "doc": "Theme to update"
      },
      "slug": {
        "type": "flags.0?string",
        "doc": "Unique theme ID"
      },
      "title": {
        "type": "flags.1?string",
        "doc": "Theme name"
      },
      "document": {
        "type": "flags.2?InputDocument",
        "doc": "Theme file"
      },
      "settings": {
        "type": "flags.3?Vector<InputThemeSettings>",
        "doc": "Theme settings"
      }
    }
  },
  "account.saveTheme": {
    "doc": "Save a theme",
    "parameters": {
      "theme": {
        "type": "InputTheme",
        "doc": "Theme to save"
      },
      "unsave": {
        "type": "Bool",
        "doc": "Unsave"
      }
    }
  },
  "account.installTheme": {
    "doc": "Install a theme",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "dark": {
        "type": "flags.0?true",
        "doc": "Whether to install the dark version"
      },
      "theme": {
        "type": "flags.1?InputTheme",
        "doc": "Theme to install"
      },
      "format": {
        "type": "flags.2?string",
        "doc": "Theme format, a string that identifies the theming engines supported by the client"
      },
      "base_theme": {
        "type": "flags.3?BaseTheme",
        "doc": "Indicates a basic theme provided by all clients"
      }
    }
  },
  "account.getTheme": {
    "doc": "Get theme information",
    "parameters": {
      "format": {
        "type": "string",
        "doc": "Theme format, a string that identifies the theming engines supported by the client"
      },
      "theme": {
        "type": "InputTheme",
        "doc": "Theme"
      }
    }
  },
  "account.getThemes": {
    "doc": "Get installed themes",
    "parameters": {
      "format": {
        "type": "string",
        "doc": "Theme format, a string that identifies the theming engines supported by the client"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.setContentSettings": {
    "doc": "Set sensitive content settings (for viewing or hiding NSFW content)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "sensitive_enabled": {
        "type": "flags.0?true",
        "doc": "Enable NSFW content"
      }
    }
  },
  "account.getContentSettings": {
    "doc": "Get sensitive content settings",
    "parameters": {}
  },
  "account.getMultiWallPapers": {
    "doc": "Get info about multiple [wallpapers](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "wallpapers": {
        "type": "Vector<InputWallPaper>",
        "doc": "[Wallpapers](https://core.telegram.org/api/wallpapers) to fetch info about"
      }
    }
  },
  "account.getGlobalPrivacySettings": {
    "doc": "Get global privacy settings",
    "parameters": {}
  },
  "account.setGlobalPrivacySettings": {
    "doc": "Set global privacy settings",
    "parameters": {
      "settings": {
        "type": "GlobalPrivacySettings",
        "doc": "Global privacy settings"
      }
    }
  },
  "account.reportProfilePhoto": {
    "doc": "Report a profile photo of a dialog",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The dialog"
      },
      "photo_id": {
        "type": "InputPhoto",
        "doc": "Dialog photo ID"
      },
      "reason": {
        "type": "ReportReason",
        "doc": "Report reason"
      },
      "message": {
        "type": "string",
        "doc": "Comment for report moderation"
      }
    }
  },
  "account.resetPassword": {
    "doc": "Initiate a 2FA password reset: can only be used if the user is already logged-in, [see here for more info »](https://core.telegram.org/api/srp#password-reset)",
    "parameters": {}
  },
  "account.declinePasswordReset": {
    "doc": "Abort a pending 2FA password reset, [see here for more info »](https://core.telegram.org/api/srp#password-reset)",
    "parameters": {}
  },
  "account.getChatThemes": {
    "doc": "Get all available chat [themes »](https://core.telegram.org/api/themes).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.setAuthorizationTTL": {
    "doc": "Set time-to-live of current session",
    "parameters": {
      "authorization_ttl_days": {
        "type": "int",
        "doc": "Time-to-live of current session in days"
      }
    }
  },
  "account.changeAuthorizationSettings": {
    "doc": "Change settings related to a session.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "confirmed": {
        "type": "flags.3?true",
        "doc": "If set, [confirms a newly logged in session »](https://core.telegram.org/api/auth#confirming-login)."
      },
      "hash": {
        "type": "long",
        "doc": "Session ID from the [authorization](https://core.telegram.org/constructor/authorization) constructor, fetchable using [account.getAuthorizations](https://core.telegram.org/method/account.getAuthorizations)"
      },
      "encrypted_requests_disabled": {
        "type": "flags.0?Bool",
        "doc": "Whether to enable or disable receiving encrypted chats: if the flag is not set, the previous setting is not changed"
      },
      "call_requests_disabled": {
        "type": "flags.1?Bool",
        "doc": "Whether to enable or disable receiving calls: if the flag is not set, the previous setting is not changed"
      }
    }
  },
  "account.getSavedRingtones": {
    "doc": "Fetch saved notification sounds",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.saveRingtone": {
    "doc": "Save or remove saved notification sound.",
    "parameters": {
      "id": {
        "type": "InputDocument",
        "doc": "Notification sound uploaded using [account.uploadRingtone](https://core.telegram.org/method/account.uploadRingtone)"
      },
      "unsave": {
        "type": "Bool",
        "doc": "Whether to add or delete the notification sound"
      }
    }
  },
  "account.uploadRingtone": {
    "doc": "Upload notification sound, use [account.saveRingtone](https://core.telegram.org/method/account.saveRingtone) to convert it and add it to the list of saved notification sounds.",
    "parameters": {
      "file": {
        "type": "InputFile",
        "doc": "Notification sound"
      },
      "file_name": {
        "type": "string",
        "doc": "File name"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type of file"
      }
    }
  },
  "account.updateEmojiStatus": {
    "doc": "Set an [emoji status](https://core.telegram.org/api/emoji-status)",
    "parameters": {
      "emoji_status": {
        "type": "EmojiStatus",
        "doc": "[Emoji status](https://core.telegram.org/api/emoji-status) to set"
      }
    }
  },
  "account.getDefaultEmojiStatuses": {
    "doc": "Get a list of default suggested [emoji statuses](https://core.telegram.org/api/emoji-status)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.getRecentEmojiStatuses": {
    "doc": "Get recently used [emoji statuses](https://core.telegram.org/api/emoji-status)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.clearRecentEmojiStatuses": {
    "doc": "Clears list of recently used [emoji statuses](https://core.telegram.org/api/emoji-status)",
    "parameters": {}
  },
  "account.reorderUsernames": {
    "doc": "Reorder usernames associated with the currently logged-in user.",
    "parameters": {
      "order": {
        "type": "Vector<string>",
        "doc": "The new order for active usernames. All active usernames must be specified."
      }
    }
  },
  "account.toggleUsername": {
    "doc": "Activate or deactivate a purchased [fragment.com](https://fragment.com) username associated to the currently logged-in user.",
    "parameters": {
      "username": {
        "type": "string",
        "doc": "Username"
      },
      "active": {
        "type": "Bool",
        "doc": "Whether to activate or deactivate it"
      }
    }
  },
  "account.getDefaultProfilePhotoEmojis": {
    "doc": "Get a set of suggested [custom emoji stickers](https://core.telegram.org/api/custom-emoji) that can be [used as profile picture](https://core.telegram.org/api/files#sticker-profile-pictures)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.getDefaultGroupPhotoEmojis": {
    "doc": "Get a set of suggested [custom emoji stickers](https://core.telegram.org/api/custom-emoji) that can be [used as group picture](https://core.telegram.org/api/files#sticker-profile-pictures)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.getAutoSaveSettings": {
    "doc": "Get autosave settings",
    "parameters": {}
  },
  "account.saveAutoSaveSettings": {
    "doc": "Modify autosave settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "users": {
        "type": "flags.0?true",
        "doc": "Whether the new settings should affect all private chats"
      },
      "chats": {
        "type": "flags.1?true",
        "doc": "Whether the new settings should affect all groups"
      },
      "broadcasts": {
        "type": "flags.2?true",
        "doc": "Whether the new settings should affect all [channels](https://core.telegram.org/api/channel)"
      },
      "peer": {
        "type": "flags.3?InputPeer",
        "doc": "Whether the new settings should affect a specific peer"
      },
      "settings": {
        "type": "AutoSaveSettings",
        "doc": "The new autosave settings"
      }
    }
  },
  "account.deleteAutoSaveExceptions": {
    "doc": "Clear all peer-specific autosave settings.",
    "parameters": {}
  },
  "account.invalidateSignInCodes": {
    "doc": "Invalidate the specified login codes, see [here »](https://core.telegram.org/api/auth#invalidating-login-codes) for more info.",
    "parameters": {
      "codes": {
        "type": "Vector<string>",
        "doc": "The login codes to invalidate."
      }
    }
  },
  "account.updateColor": {
    "doc": "Update the [accent color and background custom emoji »](https://core.telegram.org/api/colors) of the current account.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "for_profile": {
        "type": "flags.1?true",
        "doc": "Whether to change the accent color emoji pattern of the profile page; otherwise, the accent color and emoji pattern of messages will be changed."
      },
      "color": {
        "type": "flags.2?int",
        "doc": "[ID of the accent color palette »](https://core.telegram.org/api/colors) to use (not RGB24, see [here »](https://core.telegram.org/api/colors) for more info)."
      },
      "background_emoji_id": {
        "type": "flags.0?long",
        "doc": "Custom emoji ID used in the accent color pattern."
      }
    }
  },
  "account.getDefaultBackgroundEmojis": {
    "doc": "Get a set of suggested [custom emoji stickers](https://core.telegram.org/api/custom-emoji) that can be used in an [accent color pattern](https://core.telegram.org/api/colors).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.getChannelDefaultEmojiStatuses": {
    "doc": "Get a list of default suggested [channel emoji statuses](https://core.telegram.org/api/emoji-status).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "account.getChannelRestrictedStatusEmojis": {
    "doc": "Returns fetch the full list of [custom emoji IDs »](https://core.telegram.org/api/custom-emoji) that cannot be used in [channel emoji statuses »](https://core.telegram.org/api/emoji-status).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "users.getUsers": {
    "doc": "Returns basic user info according to their identifiers.",
    "parameters": {
      "id": {
        "type": "Vector<InputUser>",
        "doc": "List of user identifiers"
      }
    }
  },
  "users.getFullUser": {
    "doc": "Returns extended user info by ID.",
    "parameters": {
      "id": {
        "type": "InputUser",
        "doc": "User ID"
      }
    }
  },
  "users.setSecureValueErrors": {
    "doc": "Notify the user that the sent [passport](https://core.telegram.org/passport) data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).",
    "parameters": {
      "id": {
        "type": "InputUser",
        "doc": "The user"
      },
      "errors": {
        "type": "Vector<SecureValueError>",
        "doc": "Errors"
      }
    }
  },
  "contacts.getContactIDs": {
    "doc": "Get the telegram IDs of all contacts.  \nReturns an array of Telegram user IDs for all contacts (0 if a contact does not have an associated Telegram account or have hidden their account using privacy settings).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "contacts.getStatuses": {
    "doc": "Use this method to obtain the online statuses of all contacts with an accessible Telegram account.",
    "parameters": {}
  },
  "contacts.getContacts": {
    "doc": "Returns the current user's contact list.",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "If there already is a full contact list on the client, a [hash](https://core.telegram.org/api/offsets#hash-generation) of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, [(contacts.contactsNotModified)](https://core.telegram.org/constructor/contacts.contactsNotModified) will be returned."
      }
    }
  },
  "contacts.importContacts": {
    "doc": "Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.",
    "parameters": {
      "contacts": {
        "type": "Vector<InputContact>",
        "doc": "List of contacts to import"
      }
    }
  },
  "contacts.deleteContacts": {
    "doc": "Deletes several contacts from the list.",
    "parameters": {
      "id": {
        "type": "Vector<InputUser>",
        "doc": "User ID list"
      }
    }
  },
  "contacts.deleteByPhones": {
    "doc": "Delete contacts by phone number",
    "parameters": {
      "phones": {
        "type": "Vector<string>",
        "doc": "Phone numbers"
      }
    }
  },
  "contacts.block": {
    "doc": "Adds a peer to a blocklist, see [here »](https://core.telegram.org/api/block) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "my_stories_from": {
        "type": "flags.0?true",
        "doc": "Whether the peer should be added to the story blocklist; if not set, the peer will be added to the main blocklist, see [here »](https://core.telegram.org/api/block) for more info."
      },
      "id": {
        "type": "InputPeer",
        "doc": "Peer"
      }
    }
  },
  "contacts.unblock": {
    "doc": "Deletes a peer from a blocklist, see [here »](https://core.telegram.org/api/block) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "my_stories_from": {
        "type": "flags.0?true",
        "doc": "Whether the peer should be removed from the story blocklist; if not set, the peer will be removed from the main blocklist, see [here »](https://core.telegram.org/api/block) for more info."
      },
      "id": {
        "type": "InputPeer",
        "doc": "Peer"
      }
    }
  },
  "contacts.getBlocked": {
    "doc": "Returns the list of blocked users.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "my_stories_from": {
        "type": "flags.0?true",
        "doc": "Whether to fetch the story blocklist; if not set, will fetch the main blocklist. See [here »](https://core.telegram.org/api/block) for differences between the two."
      },
      "offset": {
        "type": "int",
        "doc": "The number of list elements to be skipped"
      },
      "limit": {
        "type": "int",
        "doc": "The number of list elements to be returned"
      }
    }
  },
  "contacts.search": {
    "doc": "Returns users found by username substring.",
    "parameters": {
      "q": {
        "type": "string",
        "doc": "Target substring"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of users to be returned"
      }
    }
  },
  "contacts.resolveUsername": {
    "doc": "Resolve a @username to get peer info",
    "parameters": {
      "username": {
        "type": "string",
        "doc": "@username to resolve"
      }
    }
  },
  "contacts.getTopPeers": {
    "doc": "Get most used peers",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "correspondents": {
        "type": "flags.0?true",
        "doc": "Users we've chatted most frequently with"
      },
      "bots_pm": {
        "type": "flags.1?true",
        "doc": "Most used bots"
      },
      "bots_inline": {
        "type": "flags.2?true",
        "doc": "Most used inline bots"
      },
      "phone_calls": {
        "type": "flags.3?true",
        "doc": "Most frequently called users"
      },
      "forward_users": {
        "type": "flags.4?true",
        "doc": "Users to which the users often forwards messages to"
      },
      "forward_chats": {
        "type": "flags.5?true",
        "doc": "Chats to which the users often forwards messages to"
      },
      "groups": {
        "type": "flags.10?true",
        "doc": "Often-opened groups and supergroups"
      },
      "channels": {
        "type": "flags.15?true",
        "doc": "Most frequently visited channels"
      },
      "offset": {
        "type": "int",
        "doc": "Offset for [pagination](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "contacts.resetTopPeerRating": {
    "doc": "Reset [rating](https://core.telegram.org/api/top-rating) of top peer",
    "parameters": {
      "category": {
        "type": "TopPeerCategory",
        "doc": "Top peer category"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer whose rating should be reset"
      }
    }
  },
  "contacts.resetSaved": {
    "doc": "Removes all contacts without an associated Telegram account.",
    "parameters": {}
  },
  "contacts.getSaved": {
    "doc": "Get all contacts, requires a [takeout session, see here » for more info](https://core.telegram.org/api/takeout).",
    "parameters": {}
  },
  "contacts.toggleTopPeers": {
    "doc": "Enable/disable [top peers](https://core.telegram.org/api/top-rating)",
    "parameters": {
      "enabled": {
        "type": "Bool",
        "doc": "Enable/disable"
      }
    }
  },
  "contacts.addContact": {
    "doc": "Add an existing telegram user as contact.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "add_phone_privacy_exception": {
        "type": "flags.0?true",
        "doc": "Allow the other user to see our phone number?"
      },
      "id": {
        "type": "InputUser",
        "doc": "Telegram ID of the other user"
      },
      "first_name": {
        "type": "string",
        "doc": "First name"
      },
      "last_name": {
        "type": "string",
        "doc": "Last name"
      },
      "phone": {
        "type": "string",
        "doc": "User's phone number, may be omitted to simply add the user to the contact list, without a phone number."
      }
    }
  },
  "contacts.acceptContact": {
    "doc": "If the [add contact action bar is active](https://core.telegram.org/api/action-bar#add-contact), add that user as contact",
    "parameters": {
      "id": {
        "type": "InputUser",
        "doc": "The user to add as contact"
      }
    }
  },
  "contacts.getLocated": {
    "doc": "Get users and geochats near you, see [here »](https://core.telegram.org/api/nearby) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "background": {
        "type": "flags.1?true",
        "doc": "While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag.  \nDo this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown."
      },
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "Geolocation"
      },
      "self_expires": {
        "type": "flags.0?int",
        "doc": "If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied."
      }
    }
  },
  "contacts.blockFromReplies": {
    "doc": "Stop getting notifications about [discussion replies](https://core.telegram.org/api/discussion) of a certain user in `@replies`",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "delete_message": {
        "type": "flags.0?true",
        "doc": "Whether to delete the specified message as well"
      },
      "delete_history": {
        "type": "flags.1?true",
        "doc": "Whether to delete all `@replies` messages from this user as well"
      },
      "report_spam": {
        "type": "flags.2?true",
        "doc": "Whether to also report this user for spam"
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the message in the [@replies](https://core.telegram.org/api/discussion#replies) chat"
      }
    }
  },
  "contacts.resolvePhone": {
    "doc": "Resolve a phone number to get user info, if their privacy settings allow it.",
    "parameters": {
      "phone": {
        "type": "string",
        "doc": "Phone number in international format, possibly obtained from a [phone number deep link](https://core.telegram.org/api/links#phone-number-links)."
      }
    }
  },
  "contacts.exportContactToken": {
    "doc": "Generates a [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links) for the currently logged-in user.",
    "parameters": {}
  },
  "contacts.importContactToken": {
    "doc": "Obtain user info from a [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links).",
    "parameters": {
      "token": {
        "type": "string",
        "doc": "The token extracted from the [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links)."
      }
    }
  },
  "contacts.editCloseFriends": {
    "doc": "Edit the [close friends list, see here »](https://core.telegram.org/api/privacy) for more info.",
    "parameters": {
      "id": {
        "type": "Vector<long>",
        "doc": "Full list of user IDs of close friends, see [here](https://core.telegram.org/api/privacy) for more info."
      }
    }
  },
  "contacts.setBlocked": {
    "doc": "Replace the contents of an entire [blocklist, see here for more info »](https://core.telegram.org/api/block).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "my_stories_from": {
        "type": "flags.0?true",
        "doc": "Whether to edit the story blocklist; if not set, will edit the main blocklist. See [here »](https://core.telegram.org/api/block) for differences between the two."
      },
      "id": {
        "type": "Vector<InputPeer>",
        "doc": "Full content of the blocklist."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.getMessages": {
    "doc": "Returns the list of messages by their IDs.",
    "parameters": {
      "id": {
        "type": "Vector<InputMessage>",
        "doc": "Message ID list"
      }
    }
  },
  "messages.getDialogs": {
    "doc": "Returns the current user dialog list.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "exclude_pinned": {
        "type": "flags.0?true",
        "doc": "Exclude pinned dialogs"
      },
      "folder_id": {
        "type": "flags.1?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "offset_date": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets) (`top_message` ID used for pagination)"
      },
      "offset_peer": {
        "type": "InputPeer",
        "doc": "[Offset peer for pagination](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Number of list elements to be returned"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getHistory": {
    "doc": "Returns the conversation history with one interlocutor / within a chat",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Target peer"
      },
      "offset_id": {
        "type": "int",
        "doc": "Only return messages starting from the specified message ID"
      },
      "offset_date": {
        "type": "int",
        "doc": "Only return messages sent before the specified date"
      },
      "add_offset": {
        "type": "int",
        "doc": "Number of list elements to be skipped, negative values are also accepted."
      },
      "limit": {
        "type": "int",
        "doc": "Number of results to return"
      },
      "max_id": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with IDs less than **max\\_id**"
      },
      "min_id": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with IDs more than **min\\_id**"
      },
      "hash": {
        "type": "long",
        "doc": "[Result hash](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.search": {
    "doc": "Search for messages.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "User or chat, histories with which are searched, or [(inputPeerEmpty)](https://core.telegram.org/constructor/inputPeerEmpty) constructor to search in all private chats and [normal groups (not channels) »](https://core.telegram.org/api/channel). Use [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) to search globally in all chats, groups, supergroups and channels."
      },
      "q": {
        "type": "string",
        "doc": "Text search request"
      },
      "from_id": {
        "type": "flags.0?InputPeer",
        "doc": "Only return messages sent by the specified user ID"
      },
      "saved_peer_id": {
        "type": "flags.2?InputPeer",
        "doc": "Search within the [saved message dialog »](https://core.telegram.org/api/saved-messages) with this ID."
      },
      "top_msg_id": {
        "type": "flags.1?int",
        "doc": "[Thread ID](https://core.telegram.org/api/threads)"
      },
      "filter": {
        "type": "MessagesFilter",
        "doc": "Filter to return only specified message types"
      },
      "min_date": {
        "type": "int",
        "doc": "If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned"
      },
      "max_date": {
        "type": "int",
        "doc": "If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned"
      },
      "offset_id": {
        "type": "int",
        "doc": "Only return messages starting from the specified message ID"
      },
      "add_offset": {
        "type": "int",
        "doc": "[Additional offset](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "[Number of results to return](https://core.telegram.org/api/offsets)"
      },
      "max_id": {
        "type": "int",
        "doc": "[Maximum message ID to return](https://core.telegram.org/api/offsets)"
      },
      "min_id": {
        "type": "int",
        "doc": "[Minimum message ID to return](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.readHistory": {
    "doc": "Marks message history as read.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Target user or group"
      },
      "max_id": {
        "type": "int",
        "doc": "If a positive value is passed, only messages with identifiers less or equal than the given one will be read"
      }
    }
  },
  "messages.deleteHistory": {
    "doc": "Deletes communication history.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "just_clear": {
        "type": "flags.0?true",
        "doc": "Just clear history for the current user, without actually removing messages for every chat user"
      },
      "revoke": {
        "type": "flags.1?true",
        "doc": "Whether to delete the message history for all chat participants"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "User or chat, communication history of which will be deleted"
      },
      "max_id": {
        "type": "int",
        "doc": "Maximum ID of message to delete"
      },
      "min_date": {
        "type": "flags.2?int",
        "doc": "Delete all messages newer than this UNIX timestamp"
      },
      "max_date": {
        "type": "flags.3?int",
        "doc": "Delete all messages older than this UNIX timestamp"
      }
    }
  },
  "messages.deleteMessages": {
    "doc": "Deletes messages by their identifiers.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "revoke": {
        "type": "flags.0?true",
        "doc": "Whether to delete messages for all participants of the chat"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Message ID list"
      }
    }
  },
  "messages.receivedMessages": {
    "doc": "Confirms receipt of messages by a client, cancels PUSH-notification sending.",
    "parameters": {
      "max_id": {
        "type": "int",
        "doc": "Maximum message ID available in a client."
      }
    }
  },
  "messages.setTyping": {
    "doc": "Sends a current user typing event (see [SendMessageAction](https://core.telegram.org/type/SendMessageAction) for all event types) to a conversation partner or group.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Target user or group"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "[Topic ID](https://core.telegram.org/api/threads)"
      },
      "action": {
        "type": "SendMessageAction",
        "doc": "Type of action"
      }
    }
  },
  "messages.sendMessage": {
    "doc": "Sends a message to a chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.1?true",
        "doc": "Set this flag to disable generation of the webpage preview"
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Send this message silently (no notifications for the receivers)"
      },
      "background": {
        "type": "flags.6?true",
        "doc": "Send this message as background message"
      },
      "clear_draft": {
        "type": "flags.7?true",
        "doc": "Clear the draft field"
      },
      "noforwards": {
        "type": "flags.14?true",
        "doc": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled"
      },
      "update_stickersets_order": {
        "type": "flags.15?true",
        "doc": "Whether to move used stickersets to top, [see here for more info on this flag »](https://core.telegram.org/api/stickers#recent-stickersets)"
      },
      "invert_media": {
        "type": "flags.16?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The destination where the message will be sent"
      },
      "reply_to": {
        "type": "flags.0?InputReplyTo",
        "doc": "If set, indicates that the message should be sent in reply to the specified message or story."
      },
      "message": {
        "type": "string",
        "doc": "The message"
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID required to prevent message resending"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Reply markup for sending bot buttons"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "Message [entities](https://core.telegram.org/api/entities) for sending styled text"
      },
      "schedule_date": {
        "type": "flags.10?int",
        "doc": "Scheduled message date for [scheduled messages](https://core.telegram.org/api/scheduled-messages)"
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Send this message as the specified peer"
      }
    }
  },
  "messages.sendMedia": {
    "doc": "Send a media",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Send message silently (no notification should be triggered)"
      },
      "background": {
        "type": "flags.6?true",
        "doc": "Send message in background"
      },
      "clear_draft": {
        "type": "flags.7?true",
        "doc": "Clear the draft"
      },
      "noforwards": {
        "type": "flags.14?true",
        "doc": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled"
      },
      "update_stickersets_order": {
        "type": "flags.15?true",
        "doc": "Whether to move used stickersets to top, [see here for more info on this flag »](https://core.telegram.org/api/stickers#recent-stickersets)"
      },
      "invert_media": {
        "type": "flags.16?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Destination"
      },
      "reply_to": {
        "type": "flags.0?InputReplyTo",
        "doc": "If set, indicates that the message should be sent in reply to the specified message or story."
      },
      "media": {
        "type": "InputMedia",
        "doc": "Attached media"
      },
      "message": {
        "type": "string",
        "doc": "Caption"
      },
      "random_id": {
        "type": "long",
        "doc": "Random ID to avoid resending the same message"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Reply markup for bot keyboards"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "Message [entities](https://core.telegram.org/api/entities) for styled text"
      },
      "schedule_date": {
        "type": "flags.10?int",
        "doc": "Scheduled message date for [scheduled messages](https://core.telegram.org/api/scheduled-messages)"
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Send this message as the specified peer"
      }
    }
  },
  "messages.forwardMessages": {
    "doc": "Forwards messages by their IDs.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Whether to send messages silently (no notification will be triggered on the destination clients)"
      },
      "background": {
        "type": "flags.6?true",
        "doc": "Whether to send the message in background"
      },
      "with_my_score": {
        "type": "flags.8?true",
        "doc": "When forwarding games, whether to include your score in the game"
      },
      "drop_author": {
        "type": "flags.11?true",
        "doc": "Whether to forward messages without quoting the original author"
      },
      "drop_media_captions": {
        "type": "flags.12?true",
        "doc": "Whether to strip captions from media"
      },
      "noforwards": {
        "type": "flags.14?true",
        "doc": "Only for bots, disallows further re-forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled"
      },
      "from_peer": {
        "type": "InputPeer",
        "doc": "Source of messages"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of messages"
      },
      "random_id": {
        "type": "Vector<long>",
        "doc": "Random ID to prevent resending of messages"
      },
      "to_peer": {
        "type": "InputPeer",
        "doc": "Destination peer"
      },
      "top_msg_id": {
        "type": "flags.9?int",
        "doc": "Destination [forum topic](https://core.telegram.org/api/forum#forum-topics)"
      },
      "schedule_date": {
        "type": "flags.10?int",
        "doc": "Scheduled message date for scheduled messages"
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Forward the messages as the specified peer"
      }
    }
  },
  "messages.reportSpam": {
    "doc": "Report a new incoming chat for spam, if the [peer settings](https://core.telegram.org/constructor/peerSettings) of the chat allow us to do that",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer to report"
      }
    }
  },
  "messages.getPeerSettings": {
    "doc": "Get peer settings",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer"
      }
    }
  },
  "messages.report": {
    "doc": "Report a message in a chat for violation of telegram's Terms of Service",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of messages to report"
      },
      "reason": {
        "type": "ReportReason",
        "doc": "Why are these messages being reported"
      },
      "message": {
        "type": "string",
        "doc": "Comment for report moderation"
      }
    }
  },
  "messages.getChats": {
    "doc": "Returns chat basic info on their IDs.",
    "parameters": {
      "id": {
        "type": "Vector<long>",
        "doc": "List of chat IDs"
      }
    }
  },
  "messages.getFullChat": {
    "doc": "Get full info about a [basic group](https://core.telegram.org/api/channel#basic-groups).",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "[Basic group](https://core.telegram.org/api/channel#basic-groups) ID."
      }
    }
  },
  "messages.editChatTitle": {
    "doc": "Changes chat name and sends a service message on it.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      },
      "title": {
        "type": "string",
        "doc": "New chat name, different from the old one"
      }
    }
  },
  "messages.editChatPhoto": {
    "doc": "Changes chat photo and sends a service message on it",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      },
      "photo": {
        "type": "InputChatPhoto",
        "doc": "Photo to be set"
      }
    }
  },
  "messages.addChatUser": {
    "doc": "Adds a user to a chat and sends a service message on it.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "User ID to be added"
      },
      "fwd_limit": {
        "type": "int",
        "doc": "Number of last messages to be forwarded"
      }
    }
  },
  "messages.deleteChatUser": {
    "doc": "Deletes a user from a chat and sends a service message on it.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "revoke_history": {
        "type": "flags.0?true",
        "doc": "Remove the entire chat history of the specified user in this chat."
      },
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "User ID to be deleted"
      }
    }
  },
  "messages.createChat": {
    "doc": "Creates a new chat.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "users": {
        "type": "Vector<InputUser>",
        "doc": "List of user IDs to be invited"
      },
      "title": {
        "type": "string",
        "doc": "Chat name"
      },
      "ttl_period": {
        "type": "flags.0?int",
        "doc": "Time-to-live of all messages that will be sent in the chat: once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well. You can use [messages.setDefaultHistoryTTL](https://core.telegram.org/method/messages.setDefaultHistoryTTL) to edit this value later."
      }
    }
  },
  "messages.getDhConfig": {
    "doc": "Returns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length.",
    "parameters": {
      "version": {
        "type": "int",
        "doc": "Value of the **version** parameter from [messages.dhConfig](https://core.telegram.org/constructor/messages.dhConfig), available at the client"
      },
      "random_length": {
        "type": "int",
        "doc": "Length of the required random sequence"
      }
    }
  },
  "messages.requestEncryption": {
    "doc": "Sends a request to start a secret chat to the user.",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User ID"
      },
      "random_id": {
        "type": "int",
        "doc": "Unique client request ID required to prevent resending. This also doubles as the chat ID."
      },
      "g_a": {
        "type": "bytes",
        "doc": "`A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)"
      }
    }
  },
  "messages.acceptEncryption": {
    "doc": "Confirms creation of a secret chat",
    "parameters": {
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "Secret chat ID"
      },
      "g_b": {
        "type": "bytes",
        "doc": "`B = g ^ b mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)"
      },
      "key_fingerprint": {
        "type": "long",
        "doc": "64-bit fingerprint of the received key"
      }
    }
  },
  "messages.discardEncryption": {
    "doc": "Cancels a request for creation and/or delete info on secret chat.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "delete_history": {
        "type": "flags.0?true",
        "doc": "Whether to delete the entire chat history for the other user as well"
      },
      "chat_id": {
        "type": "int",
        "doc": "Secret chat ID"
      }
    }
  },
  "messages.setEncryptedTyping": {
    "doc": "Send typing event by the current user to a secret chat.",
    "parameters": {
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "Secret chat ID"
      },
      "typing": {
        "type": "Bool",
        "doc": "Typing.  \n**Possible values**:  \n[(boolTrue)](https://core.telegram.org/constructor/boolTrue), if the user started typing and more than **5 seconds** have passed since the last request  \n[(boolFalse)](https://core.telegram.org/constructor/boolFalse), if the user stopped typing"
      }
    }
  },
  "messages.readEncryptedHistory": {
    "doc": "Marks message history within a secret chat as read.",
    "parameters": {
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "Secret chat ID"
      },
      "max_date": {
        "type": "int",
        "doc": "Maximum date value for received messages in history"
      }
    }
  },
  "messages.sendEncrypted": {
    "doc": "Sends a text message to a secret chat.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.0?true",
        "doc": "Send encrypted message without a notification"
      },
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "Secret chat ID"
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID, necessary to avoid message resending"
      },
      "data": {
        "type": "bytes",
        "doc": "TL-serialization of [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with a key that was created during chat initialization"
      }
    }
  },
  "messages.sendEncryptedFile": {
    "doc": "Sends a message with a file attachment to a secret chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.0?true",
        "doc": "Whether to send the file without triggering a notification"
      },
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "Secret chat ID"
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID necessary to prevent message resending"
      },
      "data": {
        "type": "bytes",
        "doc": "TL-serialization of [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with a key generated during chat initialization"
      },
      "file": {
        "type": "InputEncryptedFile",
        "doc": "File attachment for the secret chat"
      }
    }
  },
  "messages.sendEncryptedService": {
    "doc": "Sends a service message to a secret chat.",
    "parameters": {
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "Secret chat ID"
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID required to prevent message resending"
      },
      "data": {
        "type": "bytes",
        "doc": "TL-serialization of [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with a key generated during chat initialization"
      }
    }
  },
  "messages.receivedQueue": {
    "doc": "Confirms receipt of messages in a secret chat by client, cancels push notifications.  \nThe method returns a list of **random\\_id**s of messages for which push notifications were cancelled.",
    "parameters": {
      "max_qts": {
        "type": "int",
        "doc": "Maximum qts value available at the client"
      }
    }
  },
  "messages.reportEncryptedSpam": {
    "doc": "Report a secret chat for spam",
    "parameters": {
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "The secret chat to report"
      }
    }
  },
  "messages.readMessageContents": {
    "doc": "Notifies the sender about the recipient having listened a voice message or watched a video.",
    "parameters": {
      "id": {
        "type": "Vector<int>",
        "doc": "Message ID list"
      }
    }
  },
  "messages.getStickers": {
    "doc": "Get stickers by emoji",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "The emoji"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getAllStickers": {
    "doc": "Get all installed stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getWebPagePreview": {
    "doc": "Get preview of webpage",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "message": {
        "type": "string",
        "doc": "Message from which to extract the preview"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "messages.exportChatInvite": {
    "doc": "Export an invite link for a chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "legacy_revoke_permanent": {
        "type": "flags.2?true",
        "doc": "Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients."
      },
      "request_needed": {
        "type": "flags.3?true",
        "doc": "Whether admin confirmation is required before admitting each separate user into the chat"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      },
      "expire_date": {
        "type": "flags.0?int",
        "doc": "Expiration date"
      },
      "usage_limit": {
        "type": "flags.1?int",
        "doc": "Maximum number of users that can join using this link"
      },
      "title": {
        "type": "flags.4?string",
        "doc": "Description of the invite link, visible only to administrators"
      }
    }
  },
  "messages.checkChatInvite": {
    "doc": "Check the validity of a chat invite link and get basic info about it",
    "parameters": {
      "hash": {
        "type": "string",
        "doc": "Invite hash from [chat invite deep link »](https://core.telegram.org/api/links#chat-invite-links)."
      }
    }
  },
  "messages.importChatInvite": {
    "doc": "Import a chat invite and join a private chat/supergroup/channel",
    "parameters": {
      "hash": {
        "type": "string",
        "doc": "`hash` from a [chat invite deep link](https://core.telegram.org/api/links#chat-invite-links)"
      }
    }
  },
  "messages.getStickerSet": {
    "doc": "Get info about a stickerset",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Stickerset"
      },
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.installStickerSet": {
    "doc": "Install a stickerset",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Stickerset to install"
      },
      "archived": {
        "type": "Bool",
        "doc": "Whether to archive stickerset"
      }
    }
  },
  "messages.uninstallStickerSet": {
    "doc": "Uninstall a stickerset",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "The stickerset to uninstall"
      }
    }
  },
  "messages.startBot": {
    "doc": "Start a conversation with a bot using a [deep linking parameter](https://core.telegram.org/api/links#bot-links)",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "The bot"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where to start the bot, can be the bot's private chat or a group"
      },
      "random_id": {
        "type": "long",
        "doc": "Random ID to avoid resending the same message"
      },
      "start_param": {
        "type": "string",
        "doc": "[Deep linking parameter](https://core.telegram.org/api/links#bot-links)"
      }
    }
  },
  "messages.getMessagesViews": {
    "doc": "Get and increase the view counter of a message sent or forwarded from a [channel](https://core.telegram.org/api/channel)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the message was found"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "ID of message"
      },
      "increment": {
        "type": "Bool",
        "doc": "Whether to mark the message as viewed and increment the view counter"
      }
    }
  },
  "messages.editChatAdmin": {
    "doc": "Make a user admin in a [basic group](https://core.telegram.org/api/channel#basic-groups).",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "The ID of the group"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "The user to make admin"
      },
      "is_admin": {
        "type": "Bool",
        "doc": "Whether to make them admin"
      }
    }
  },
  "messages.migrateChat": {
    "doc": "Turn a [basic group into a supergroup](https://core.telegram.org/api/channel#migration)",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "[Basic group](https://core.telegram.org/api/channel#basic-groups) to migrate"
      }
    }
  },
  "messages.searchGlobal": {
    "doc": "Search for messages and peers globally",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "folder_id": {
        "type": "flags.0?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "q": {
        "type": "string",
        "doc": "Query"
      },
      "filter": {
        "type": "MessagesFilter",
        "doc": "Global search filter"
      },
      "min_date": {
        "type": "int",
        "doc": "If a positive value was specified, the method will return only messages with date bigger than min\\_date"
      },
      "max_date": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with date smaller than max\\_date"
      },
      "offset_rate": {
        "type": "int",
        "doc": "Initially 0, then set to the [`next_rate` parameter of messages.messagesSlice](https://core.telegram.org/constructor/messages.messagesSlice)"
      },
      "offset_peer": {
        "type": "InputPeer",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.reorderStickerSets": {
    "doc": "Reorder installed stickersets",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "masks": {
        "type": "flags.0?true",
        "doc": "Reorder mask stickersets"
      },
      "emojis": {
        "type": "flags.1?true",
        "doc": "Reorder [custom emoji stickersets](https://core.telegram.org/api/custom-emoji)"
      },
      "order": {
        "type": "Vector<long>",
        "doc": "New stickerset order by stickerset IDs"
      }
    }
  },
  "messages.getDocumentByHash": {
    "doc": "Get a document by its SHA256 hash, mainly used for gifs",
    "parameters": {
      "sha256": {
        "type": "bytes",
        "doc": "SHA256 of file"
      },
      "size": {
        "type": "long",
        "doc": "Size of the file in bytes"
      },
      "mime_type": {
        "type": "string",
        "doc": "Mime type"
      }
    }
  },
  "messages.getSavedGifs": {
    "doc": "Get saved GIFs",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.saveGif": {
    "doc": "Add GIF to saved gifs list",
    "parameters": {
      "id": {
        "type": "InputDocument",
        "doc": "GIF to save"
      },
      "unsave": {
        "type": "Bool",
        "doc": "Whether to remove GIF from saved gifs list"
      }
    }
  },
  "messages.getInlineBotResults": {
    "doc": "Query an inline bot",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "bot": {
        "type": "InputUser",
        "doc": "The bot to query"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The currently opened chat"
      },
      "geo_point": {
        "type": "flags.0?InputGeoPoint",
        "doc": "The geolocation, if requested"
      },
      "query": {
        "type": "string",
        "doc": "The query"
      },
      "offset": {
        "type": "string",
        "doc": "The offset within the results, will be passed directly as-is to the bot."
      }
    }
  },
  "messages.setInlineBotResults": {
    "doc": "Answer an inline query, for bots only",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "gallery": {
        "type": "flags.0?true",
        "doc": "Set this flag if the results are composed of media files"
      },
      "private": {
        "type": "flags.1?true",
        "doc": "Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query"
      },
      "query_id": {
        "type": "long",
        "doc": "Unique identifier for the answered query"
      },
      "results": {
        "type": "Vector<InputBotInlineResult>",
        "doc": "Vector of results for the inline query"
      },
      "cache_time": {
        "type": "int",
        "doc": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300."
      },
      "next_offset": {
        "type": "flags.2?string",
        "doc": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes."
      },
      "switch_pm": {
        "type": "flags.3?InlineBotSwitchPM",
        "doc": "If passed, clients will display a button on top of the remaining inline result list with the specified text, that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter."
      },
      "switch_webview": {
        "type": "flags.4?InlineBotWebView",
        "doc": "If passed, clients will display a button on top of the remaining inline result list with the specified text, that switches the user to the specified [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps)."
      }
    }
  },
  "messages.sendInlineBotResult": {
    "doc": "Send a result obtained using [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Whether to send the message silently (no notification will be triggered on the other client)"
      },
      "background": {
        "type": "flags.6?true",
        "doc": "Whether to send the message in background"
      },
      "clear_draft": {
        "type": "flags.7?true",
        "doc": "Whether to clear the [draft](https://core.telegram.org/api/drafts)"
      },
      "hide_via": {
        "type": "flags.11?true",
        "doc": "Whether to hide the `via @botname` in the resulting message (only for bot usernames encountered in the [config](https://core.telegram.org/constructor/config))"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Destination"
      },
      "reply_to": {
        "type": "flags.0?InputReplyTo",
        "doc": "If set, indicates that the message should be sent in reply to the specified message or story."
      },
      "random_id": {
        "type": "long",
        "doc": "Random ID to avoid resending the same query"
      },
      "query_id": {
        "type": "long",
        "doc": "Query ID from [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults)"
      },
      "id": {
        "type": "string",
        "doc": "Result ID from [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults)"
      },
      "schedule_date": {
        "type": "flags.10?int",
        "doc": "Scheduled message date for scheduled messages"
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Send this message as the specified peer"
      }
    }
  },
  "messages.getMessageEditData": {
    "doc": "Find out if a media message's caption can be edited",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the media was sent"
      },
      "id": {
        "type": "int",
        "doc": "ID of message"
      }
    }
  },
  "messages.editMessage": {
    "doc": "Edit message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.1?true",
        "doc": "Disable webpage preview"
      },
      "invert_media": {
        "type": "flags.16?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Where was the message sent"
      },
      "id": {
        "type": "int",
        "doc": "ID of the message to edit"
      },
      "message": {
        "type": "flags.11?string",
        "doc": "New message"
      },
      "media": {
        "type": "flags.14?InputMedia",
        "doc": "New attached media"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Reply markup for inline keyboards"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "schedule_date": {
        "type": "flags.15?int",
        "doc": "Scheduled message date for [scheduled messages](https://core.telegram.org/api/scheduled-messages)"
      }
    }
  },
  "messages.editInlineBotMessage": {
    "doc": "Edit an inline bot message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.1?true",
        "doc": "Disable webpage preview"
      },
      "invert_media": {
        "type": "flags.16?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "id": {
        "type": "InputBotInlineMessageID",
        "doc": "Sent inline message ID"
      },
      "message": {
        "type": "flags.11?string",
        "doc": "Message"
      },
      "media": {
        "type": "flags.14?InputMedia",
        "doc": "Media"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Reply markup for inline keyboards"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "messages.getBotCallbackAnswer": {
    "doc": "Press an inline callback button and get a callback answer from the bot",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "game": {
        "type": "flags.1?true",
        "doc": "Whether this is a \"play game\" button"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Where was the inline keyboard sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the Message with the inline keyboard"
      },
      "data": {
        "type": "flags.0?bytes",
        "doc": "Callback data"
      },
      "password": {
        "type": "flags.2?InputCheckPasswordSRP",
        "doc": "For buttons [requiring you to verify your identity with your 2FA password](https://core.telegram.org/constructor/keyboardButtonCallback), the SRP payload generated using [SRP](https://core.telegram.org/api/srp)."
      }
    }
  },
  "messages.setBotCallbackAnswer": {
    "doc": "Set the callback answer to a user button press (bots only)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "alert": {
        "type": "flags.1?true",
        "doc": "Whether to show the message as a popup instead of a toast notification"
      },
      "query_id": {
        "type": "long",
        "doc": "Query ID"
      },
      "message": {
        "type": "flags.0?string",
        "doc": "Popup to show"
      },
      "url": {
        "type": "flags.2?string",
        "doc": "URL to open"
      },
      "cache_time": {
        "type": "int",
        "doc": "Cache validity"
      }
    }
  },
  "messages.getPeerDialogs": {
    "doc": "Get dialog info of specified peers",
    "parameters": {
      "peers": {
        "type": "Vector<InputDialogPeer>",
        "doc": "Peers"
      }
    }
  },
  "messages.saveDraft": {
    "doc": "Save a message [draft](https://core.telegram.org/api/drafts) associated to a chat.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.1?true",
        "doc": "Disable generation of the webpage preview"
      },
      "invert_media": {
        "type": "flags.6?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "reply_to": {
        "type": "flags.4?InputReplyTo",
        "doc": "If set, indicates that the message should be sent in reply to the specified message or story."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Destination of the message that should be sent"
      },
      "message": {
        "type": "string",
        "doc": "The draft"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "Message [entities](https://core.telegram.org/api/entities) for styled text"
      },
      "media": {
        "type": "flags.5?InputMedia",
        "doc": "Attached media"
      }
    }
  },
  "messages.getAllDrafts": {
    "doc": "Return all message [drafts](https://core.telegram.org/api/drafts).  \nReturns all the latest [updateDraftMessage](https://core.telegram.org/constructor/updateDraftMessage) updates related to all chats with drafts.",
    "parameters": {}
  },
  "messages.getFeaturedStickers": {
    "doc": "Get featured stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.readFeaturedStickers": {
    "doc": "Mark new featured stickers as read",
    "parameters": {
      "id": {
        "type": "Vector<long>",
        "doc": "IDs of stickersets to mark as read"
      }
    }
  },
  "messages.getRecentStickers": {
    "doc": "Get recent stickers",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "attached": {
        "type": "flags.0?true",
        "doc": "Get stickers recently attached to photo or video files"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.saveRecentSticker": {
    "doc": "Add/remove sticker from recent stickers list",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "attached": {
        "type": "flags.0?true",
        "doc": "Whether to add/remove stickers recently attached to photo or video files"
      },
      "id": {
        "type": "InputDocument",
        "doc": "Sticker"
      },
      "unsave": {
        "type": "Bool",
        "doc": "Whether to save or unsave the sticker"
      }
    }
  },
  "messages.clearRecentStickers": {
    "doc": "Clear recent stickers",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "attached": {
        "type": "flags.0?true",
        "doc": "Set this flag to clear the list of stickers recently attached to photo or video files"
      }
    }
  },
  "messages.getArchivedStickers": {
    "doc": "Get all archived stickers",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "masks": {
        "type": "flags.0?true",
        "doc": "Get [mask stickers](https://core.telegram.org/api/stickers#mask-stickers)"
      },
      "emojis": {
        "type": "flags.1?true",
        "doc": "Get [custom emoji stickers](https://core.telegram.org/api/custom-emoji)"
      },
      "offset_id": {
        "type": "long",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.getMaskStickers": {
    "doc": "Get installed mask stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getAttachedStickers": {
    "doc": "Get stickers attached to a photo or video",
    "parameters": {
      "media": {
        "type": "InputStickeredMedia",
        "doc": "Stickered media"
      }
    }
  },
  "messages.setGameScore": {
    "doc": "Use this method to set the score of the specified user in a game sent as a normal message (bots only).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "edit_message": {
        "type": "flags.0?true",
        "doc": "Set this flag if the game message should be automatically edited to include the current scoreboard"
      },
      "force": {
        "type": "flags.1?true",
        "doc": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Unique identifier of target chat"
      },
      "id": {
        "type": "int",
        "doc": "Identifier of the sent message"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "User identifier"
      },
      "score": {
        "type": "int",
        "doc": "New score"
      }
    }
  },
  "messages.setInlineGameScore": {
    "doc": "Use this method to set the score of the specified user in a game sent as an inline message (bots only).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "edit_message": {
        "type": "flags.0?true",
        "doc": "Set this flag if the game message should be automatically edited to include the current scoreboard"
      },
      "force": {
        "type": "flags.1?true",
        "doc": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters"
      },
      "id": {
        "type": "InputBotInlineMessageID",
        "doc": "ID of the inline message"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "User identifier"
      },
      "score": {
        "type": "int",
        "doc": "New score"
      }
    }
  },
  "messages.getGameHighScores": {
    "doc": "Get highscores of a game",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Where was the game sent"
      },
      "id": {
        "type": "int",
        "doc": "ID of message with game media attachment"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "Get high scores made by a certain user"
      }
    }
  },
  "messages.getInlineGameHighScores": {
    "doc": "Get highscores of a game sent using an inline bot",
    "parameters": {
      "id": {
        "type": "InputBotInlineMessageID",
        "doc": "ID of inline message"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "Get high scores of a certain user"
      }
    }
  },
  "messages.getCommonChats": {
    "doc": "Get chats in common with a user",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User ID"
      },
      "max_id": {
        "type": "long",
        "doc": "Maximum ID of chat to return (see [pagination](https://core.telegram.org/api/offsets))"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.getWebPage": {
    "doc": "Get [instant view](https://instantview.telegram.org) page",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "URL of IV page to fetch"
      },
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.toggleDialogPin": {
    "doc": "Pin/unpin a dialog",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether to pin or unpin the dialog"
      },
      "peer": {
        "type": "InputDialogPeer",
        "doc": "The dialog to pin"
      }
    }
  },
  "messages.reorderPinnedDialogs": {
    "doc": "Reorder pinned dialogs",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "force": {
        "type": "flags.0?true",
        "doc": "If set, dialogs pinned server-side but not present in the `order` field will be unpinned."
      },
      "folder_id": {
        "type": "int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "order": {
        "type": "Vector<InputDialogPeer>",
        "doc": "New dialog order"
      }
    }
  },
  "messages.getPinnedDialogs": {
    "doc": "Get pinned dialogs",
    "parameters": {
      "folder_id": {
        "type": "int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      }
    }
  },
  "messages.setBotShippingResults": {
    "doc": "If you sent an invoice requesting a shipping address and the parameter is\\_flexible was specified, the bot will receive an [updateBotShippingQuery](https://core.telegram.org/constructor/updateBotShippingQuery) update. Use this method to reply to shipping queries.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "query_id": {
        "type": "long",
        "doc": "Unique identifier for the query to be answered"
      },
      "error": {
        "type": "flags.0?string",
        "doc": "Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable\"). Telegram will display this message to the user."
      },
      "shipping_options": {
        "type": "flags.1?Vector<ShippingOption>",
        "doc": "A vector of available shipping options."
      }
    }
  },
  "messages.setBotPrecheckoutResults": {
    "doc": "Once the user has confirmed their payment and shipping details, the bot receives an [updateBotPrecheckoutQuery](https://core.telegram.org/constructor/updateBotPrecheckoutQuery) update.  \nUse this method to respond to such pre-checkout queries.  \n**Note**: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "success": {
        "type": "flags.1?true",
        "doc": "Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the `error` field, instead"
      },
      "query_id": {
        "type": "long",
        "doc": "Unique identifier for the query to be answered"
      },
      "error": {
        "type": "flags.0?string",
        "doc": "Required if the `success` isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user."
      }
    }
  },
  "messages.uploadMedia": {
    "doc": "Upload a file and associate it to a chat (without actually sending it to the chat)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat, can be [inputPeerEmpty](https://core.telegram.org/constructor/inputPeerEmpty) for bots and [inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) for users."
      },
      "media": {
        "type": "InputMedia",
        "doc": "File uploaded in chunks as described in [files »](https://core.telegram.org/api/files)"
      }
    }
  },
  "messages.sendScreenshotNotification": {
    "doc": "Notify the other user in a private chat that a screenshot of the chat was taken",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Other user"
      },
      "reply_to": {
        "type": "InputReplyTo",
        "doc": "Indicates the message that was screenshotted (the specified message ID can also be `0` to avoid indicating any specific message)."
      },
      "random_id": {
        "type": "long",
        "doc": "Random ID to avoid message resending"
      }
    }
  },
  "messages.getFavedStickers": {
    "doc": "Get faved stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.faveSticker": {
    "doc": "Mark or unmark a sticker as favorite",
    "parameters": {
      "id": {
        "type": "InputDocument",
        "doc": "Sticker in question"
      },
      "unfave": {
        "type": "Bool",
        "doc": "Whether to add or remove a sticker from favorites"
      }
    }
  },
  "messages.getUnreadMentions": {
    "doc": "Get unread messages where we were mentioned",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where to look for mentions"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "If set, considers only messages within the specified [forum topic](https://core.telegram.org/api/forum#forum-topics)"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "add_offset": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "max_id": {
        "type": "int",
        "doc": "Maximum message ID to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "min_id": {
        "type": "int",
        "doc": "Minimum message ID to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.readMentions": {
    "doc": "Mark mentions as read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Dialog"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "Mark as read only mentions within the specified [forum topic](https://core.telegram.org/api/forum#forum-topics)"
      }
    }
  },
  "messages.getRecentLocations": {
    "doc": "Get live location history of a certain user",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "User"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.sendMultiMedia": {
    "doc": "Send an [album or grouped media](https://core.telegram.org/api/files#albums-grouped-media)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Whether to send the album silently (no notification triggered)"
      },
      "background": {
        "type": "flags.6?true",
        "doc": "Send in background?"
      },
      "clear_draft": {
        "type": "flags.7?true",
        "doc": "Whether to clear [drafts](https://core.telegram.org/api/drafts)"
      },
      "noforwards": {
        "type": "flags.14?true",
        "doc": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled"
      },
      "update_stickersets_order": {
        "type": "flags.15?true",
        "doc": "Whether to move used stickersets to top, [see here for more info on this flag »](https://core.telegram.org/api/stickers#recent-stickersets)"
      },
      "invert_media": {
        "type": "flags.16?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The destination chat"
      },
      "reply_to": {
        "type": "flags.0?InputReplyTo",
        "doc": "If set, indicates that the message should be sent in reply to the specified message or story."
      },
      "multi_media": {
        "type": "Vector<InputSingleMedia>",
        "doc": "The medias to send: note that they must be separately uploaded using [messages.uploadMedia](https://core.telegram.org/method/messages.uploadMedia) first, using raw `inputMediaUploaded*` constructors is not supported."
      },
      "schedule_date": {
        "type": "flags.10?int",
        "doc": "Scheduled message date for scheduled messages"
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Send this message as the specified peer"
      }
    }
  },
  "messages.uploadEncryptedFile": {
    "doc": "Upload encrypted file and associate it to a secret chat",
    "parameters": {
      "peer": {
        "type": "InputEncryptedChat",
        "doc": "The secret chat to associate the file to"
      },
      "file": {
        "type": "InputEncryptedFile",
        "doc": "The file"
      }
    }
  },
  "messages.searchStickerSets": {
    "doc": "Search for stickersets",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "exclude_featured": {
        "type": "flags.0?true",
        "doc": "Exclude featured stickersets from results"
      },
      "q": {
        "type": "string",
        "doc": "Query string"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getSplitRanges": {
    "doc": "Get message ranges for saving the user's chat history",
    "parameters": {}
  },
  "messages.markDialogUnread": {
    "doc": "Manually mark dialog as unread",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "unread": {
        "type": "flags.0?true",
        "doc": "Mark as unread/read"
      },
      "peer": {
        "type": "InputDialogPeer",
        "doc": "Dialog"
      }
    }
  },
  "messages.getDialogUnreadMarks": {
    "doc": "Get dialogs manually marked as unread",
    "parameters": {}
  },
  "messages.clearAllDrafts": {
    "doc": "Clear all [drafts](https://core.telegram.org/api/drafts).",
    "parameters": {}
  },
  "messages.updatePinnedMessage": {
    "doc": "Pin a message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.0?true",
        "doc": "Pin the message silently, without triggering a notification"
      },
      "unpin": {
        "type": "flags.1?true",
        "doc": "Whether the message should unpinned or pinned"
      },
      "pm_oneside": {
        "type": "flags.2?true",
        "doc": "Whether the message should only be pinned on the local side of a one-to-one chat"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer where to pin the message"
      },
      "id": {
        "type": "int",
        "doc": "The message to pin or unpin"
      }
    }
  },
  "messages.sendVote": {
    "doc": "Vote in a [poll](https://core.telegram.org/constructor/poll)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where the poll was sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "The message ID of the poll"
      },
      "options": {
        "type": "Vector<bytes>",
        "doc": "The options that were chosen"
      }
    }
  },
  "messages.getPollResults": {
    "doc": "Get poll results",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the poll was found"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID of poll message"
      }
    }
  },
  "messages.getOnlines": {
    "doc": "Get count of online users in a chat",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat"
      }
    }
  },
  "messages.editChatAbout": {
    "doc": "Edit the description of a [group/supergroup/channel](https://core.telegram.org/api/channel).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The [group/supergroup/channel](https://core.telegram.org/api/channel)."
      },
      "about": {
        "type": "string",
        "doc": "The new description"
      }
    }
  },
  "messages.editChatDefaultBannedRights": {
    "doc": "Edit the default banned rights of a [channel/supergroup/group](https://core.telegram.org/api/channel).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer"
      },
      "banned_rights": {
        "type": "ChatBannedRights",
        "doc": "The new global rights"
      }
    }
  },
  "messages.getEmojiKeywords": {
    "doc": "Get localized [emoji keywords »](https://core.telegram.org/api/custom-emoji#emoji-keywords).",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "messages.getEmojiKeywordsDifference": {
    "doc": "Get changed [emoji keywords »](https://core.telegram.org/api/custom-emoji#emoji-keywords).",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      },
      "from_version": {
        "type": "int",
        "doc": "Previous stored emoji keyword list `version`"
      }
    }
  },
  "messages.getEmojiKeywordsLanguages": {
    "doc": "Obtain a list of related languages that must be used when fetching [emoji keyword lists »](https://core.telegram.org/api/custom-emoji#emoji-keywords).",
    "parameters": {
      "lang_codes": {
        "type": "Vector<string>",
        "doc": "The user's language codes"
      }
    }
  },
  "messages.getEmojiURL": {
    "doc": "Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new [emoji keywords »](https://core.telegram.org/api/custom-emoji#emoji-keywords). The URL will be valid for 30 seconds after generation.",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code for which the emoji keywords will be suggested"
      }
    }
  },
  "messages.getSearchCounters": {
    "doc": "Get the number of results that would be found by a [messages.search](https://core.telegram.org/method/messages.search) call with the same parameters",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where to search"
      },
      "saved_peer_id": {
        "type": "flags.2?InputPeer",
        "doc": "Search within the [saved message dialog »](https://core.telegram.org/api/saved-messages) with this ID."
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "If set, consider only messages within the specified [forum topic](https://core.telegram.org/api/forum#forum-topics)"
      },
      "filters": {
        "type": "Vector<MessagesFilter>",
        "doc": "Search filters"
      }
    }
  },
  "messages.requestUrlAuth": {
    "doc": "Get more info about a Seamless Telegram Login authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "flags.1?InputPeer",
        "doc": "Peer where the message is located"
      },
      "msg_id": {
        "type": "flags.1?int",
        "doc": "The message"
      },
      "button_id": {
        "type": "flags.1?int",
        "doc": "The ID of the button with the authorization request"
      },
      "url": {
        "type": "flags.2?string",
        "doc": "URL used for [link URL authorization, click here for more info »](https://core.telegram.org/api/url-authorization#link-url-authorization)"
      }
    }
  },
  "messages.acceptUrlAuth": {
    "doc": "Use this to accept a Seamless Telegram Login authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "write_allowed": {
        "type": "flags.0?true",
        "doc": "Set this flag to allow the bot to send messages to you (if requested)"
      },
      "peer": {
        "type": "flags.1?InputPeer",
        "doc": "The location of the message"
      },
      "msg_id": {
        "type": "flags.1?int",
        "doc": "Message ID of the message with the login button"
      },
      "button_id": {
        "type": "flags.1?int",
        "doc": "ID of the login button"
      },
      "url": {
        "type": "flags.2?string",
        "doc": "URL used for [link URL authorization, click here for more info »](https://core.telegram.org/api/url-authorization#link-url-authorization)"
      }
    }
  },
  "messages.hidePeerSettingsBar": {
    "doc": "Should be called after the user hides the [report spam/add as contact bar](https://core.telegram.org/api/action-bar) of a new chat, effectively prevents the user from executing the actions specified in the [action bar »](https://core.telegram.org/api/action-bar).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      }
    }
  },
  "messages.getScheduledHistory": {
    "doc": "Get scheduled messages",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getScheduledMessages": {
    "doc": "Get scheduled messages",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of scheduled messages"
      }
    }
  },
  "messages.sendScheduledMessages": {
    "doc": "Send scheduled messages right away",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Scheduled message IDs"
      }
    }
  },
  "messages.deleteScheduledMessages": {
    "doc": "Delete scheduled messages",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Scheduled message IDs"
      }
    }
  },
  "messages.getPollVotes": {
    "doc": "Get poll results for non-anonymous polls",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Chat where the poll was sent"
      },
      "id": {
        "type": "int",
        "doc": "Message ID"
      },
      "option": {
        "type": "flags.0?bytes",
        "doc": "Get only results for the specified poll `option`"
      },
      "offset": {
        "type": "flags.1?string",
        "doc": "Offset for results, taken from the `next_offset` field of [messages.votesList](https://core.telegram.org/constructor/messages.votesList), initially an empty string.  \nNote: if no more results are available, the method call will return an empty `next_offset`; thus, avoid providing the `next_offset` returned in [messages.votesList](https://core.telegram.org/constructor/messages.votesList) if it is empty, to avoid an infinite loop."
      },
      "limit": {
        "type": "int",
        "doc": "Number of results to return"
      }
    }
  },
  "messages.toggleStickerSets": {
    "doc": "Apply changes to multiple stickersets",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "uninstall": {
        "type": "flags.0?true",
        "doc": "Uninstall the specified stickersets"
      },
      "archive": {
        "type": "flags.1?true",
        "doc": "Archive the specified stickersets"
      },
      "unarchive": {
        "type": "flags.2?true",
        "doc": "Unarchive the specified stickersets"
      },
      "stickersets": {
        "type": "Vector<InputStickerSet>",
        "doc": "Stickersets to act upon"
      }
    }
  },
  "messages.getDialogFilters": {
    "doc": "Get [folders](https://core.telegram.org/api/folders)",
    "parameters": {}
  },
  "messages.getSuggestedDialogFilters": {
    "doc": "Get [suggested folders](https://core.telegram.org/api/folders)",
    "parameters": {}
  },
  "messages.updateDialogFilter": {
    "doc": "Update [folder](https://core.telegram.org/api/folders)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "int",
        "doc": "[Folder](https://core.telegram.org/api/folders) ID"
      },
      "filter": {
        "type": "flags.0?DialogFilter",
        "doc": "[Folder](https://core.telegram.org/api/folders) info"
      }
    }
  },
  "messages.updateDialogFiltersOrder": {
    "doc": "Reorder [folders](https://core.telegram.org/api/folders)",
    "parameters": {
      "order": {
        "type": "Vector<int>",
        "doc": "New [folder](https://core.telegram.org/api/folders) order"
      }
    }
  },
  "messages.getOldFeaturedStickers": {
    "doc": "Method for fetching previously featured stickers",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getReplies": {
    "doc": "Get messages in a reply thread",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_date": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "add_offset": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "max_id": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with ID smaller than max\\_id"
      },
      "min_id": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with ID bigger than min\\_id"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getDiscussionMessage": {
    "doc": "Get [discussion message](https://core.telegram.org/api/threads) from the [associated discussion group](https://core.telegram.org/api/discussion) of a channel to show it on top of the comment section, without actually joining the group",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "[Channel ID](https://core.telegram.org/api/channel)"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      }
    }
  },
  "messages.readDiscussion": {
    "doc": "Mark a [thread](https://core.telegram.org/api/threads) as read",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Group ID"
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of message that started the thread"
      },
      "read_max_id": {
        "type": "int",
        "doc": "ID up to which thread messages were read"
      }
    }
  },
  "messages.unpinAllMessages": {
    "doc": "[Unpin](https://core.telegram.org/api/pin) all pinned messages",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Chat where to unpin"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "[Forum topic](https://core.telegram.org/api/forum#forum-topics) where to unpin"
      }
    }
  },
  "messages.deleteChat": {
    "doc": "Delete a [chat](https://core.telegram.org/api/channel)",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      }
    }
  },
  "messages.deletePhoneCallHistory": {
    "doc": "Delete the entire phone call history.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "revoke": {
        "type": "flags.0?true",
        "doc": "Whether to remove phone call history for participants as well"
      }
    }
  },
  "messages.checkHistoryImport": {
    "doc": "Obtains information about a chat export file, generated by a foreign chat app, [click here for more info about imported chats »](https://core.telegram.org/api/import).",
    "parameters": {
      "import_head": {
        "type": "string",
        "doc": "Beginning of the message file; up to 100 lines."
      }
    }
  },
  "messages.initHistoryImport": {
    "doc": "Import chat history from a foreign chat app into a specific Telegram chat, [click here for more info about imported chats »](https://core.telegram.org/api/import).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The Telegram chat where the [history should be imported](https://core.telegram.org/api/import)."
      },
      "file": {
        "type": "InputFile",
        "doc": "File with messages to import."
      },
      "media_count": {
        "type": "int",
        "doc": "Number of media files associated with the chat that will be uploaded using [messages.uploadImportedMedia](https://core.telegram.org/method/messages.uploadImportedMedia)."
      }
    }
  },
  "messages.uploadImportedMedia": {
    "doc": "Upload a media file associated with an [imported chat, click here for more info »](https://core.telegram.org/api/import).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The Telegram chat where the media will be imported"
      },
      "import_id": {
        "type": "long",
        "doc": "Identifier of a [history import session](https://core.telegram.org/api/import), returned by [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport)"
      },
      "file_name": {
        "type": "string",
        "doc": "File name"
      },
      "media": {
        "type": "InputMedia",
        "doc": "Media metadata"
      }
    }
  },
  "messages.startHistoryImport": {
    "doc": "Complete the [history import process](https://core.telegram.org/api/import), importing all messages into the chat.  \nTo be called only after initializing the import with [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport) and uploading all files using [messages.uploadImportedMedia](https://core.telegram.org/method/messages.uploadImportedMedia).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The Telegram chat where the messages should be [imported, click here for more info »](https://core.telegram.org/api/import)"
      },
      "import_id": {
        "type": "long",
        "doc": "Identifier of a history import session, returned by [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport)."
      }
    }
  },
  "messages.getExportedChatInvites": {
    "doc": "Get info about the chat invites of a specific chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "revoked": {
        "type": "flags.3?true",
        "doc": "Whether to fetch revoked chat invites"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      },
      "admin_id": {
        "type": "InputUser",
        "doc": "Whether to only fetch chat invites from this admin"
      },
      "offset_date": {
        "type": "flags.2?int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_link": {
        "type": "flags.2?string",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.getExportedChatInvite": {
    "doc": "Get info about a chat invite",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      },
      "link": {
        "type": "string",
        "doc": "Invite link"
      }
    }
  },
  "messages.editExportedChatInvite": {
    "doc": "Edit an exported chat invite",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "revoked": {
        "type": "flags.2?true",
        "doc": "Whether to revoke the chat invite"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      },
      "link": {
        "type": "string",
        "doc": "Invite link"
      },
      "expire_date": {
        "type": "flags.0?int",
        "doc": "New expiration date"
      },
      "usage_limit": {
        "type": "flags.1?int",
        "doc": "Maximum number of users that can join using this link"
      },
      "request_needed": {
        "type": "flags.3?Bool",
        "doc": "Whether admin confirmation is required before admitting each separate user into the chat"
      },
      "title": {
        "type": "flags.4?string",
        "doc": "Description of the invite link, visible only to administrators"
      }
    }
  },
  "messages.deleteRevokedExportedChatInvites": {
    "doc": "Delete all revoked chat invites",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      },
      "admin_id": {
        "type": "InputUser",
        "doc": "ID of the admin that originally generated the revoked chat invites"
      }
    }
  },
  "messages.deleteExportedChatInvite": {
    "doc": "Delete a chat invite",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "link": {
        "type": "string",
        "doc": "Invite link"
      }
    }
  },
  "messages.getAdminsWithInvites": {
    "doc": "Get info about chat invites generated by admins.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      }
    }
  },
  "messages.getChatInviteImporters": {
    "doc": "Get info about the users that joined the chat using a specific chat invite",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "requested": {
        "type": "flags.0?true",
        "doc": "If set, only returns info about users with pending [join requests »](https://core.telegram.org/api/invites#join-requests)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Chat"
      },
      "link": {
        "type": "flags.1?string",
        "doc": "Invite link"
      },
      "q": {
        "type": "flags.2?string",
        "doc": "Search for a user in the pending [join requests »](https://core.telegram.org/api/invites#join-requests) list: only available when the `requested` flag is set, cannot be used together with a specific `link`."
      },
      "offset_date": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_user": {
        "type": "InputUser",
        "doc": "User ID for [pagination](https://core.telegram.org/api/offsets): if set, `offset_date` must also be set."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.setHistoryTTL": {
    "doc": "Set maximum Time-To-Live of all messages in the specified chat",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The dialog"
      },
      "period": {
        "type": "int",
        "doc": "Automatically delete all messages sent in the chat after this many seconds"
      }
    }
  },
  "messages.checkHistoryImportPeer": {
    "doc": "Check whether chat history exported from another chat app can be [imported into a specific Telegram chat, click here for more info »](https://core.telegram.org/api/import).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where we want to [import history »](https://core.telegram.org/api/import)."
      }
    }
  },
  "messages.setChatTheme": {
    "doc": "Change the chat theme of a certain chat",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Private chat where to change theme"
      },
      "emoticon": {
        "type": "string",
        "doc": "Emoji, identifying a specific chat theme; a list of chat themes can be fetched using [account.getChatThemes](https://core.telegram.org/method/account.getChatThemes)"
      }
    }
  },
  "messages.getMessageReadParticipants": {
    "doc": "Get which users read a specific message: only available for groups and supergroups with less than [`chat_read_mark_size_threshold` members](https://core.telegram.org/api/config#chat-read-mark-size-threshold), read receipts will be stored for [`chat_read_mark_expire_period` seconds after the message was sent](https://core.telegram.org/api/config#chat-read-mark-expire-period), see [client configuration for more info »](https://core.telegram.org/api/config#client-configuration).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Dialog"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      }
    }
  },
  "messages.getSearchResultsCalendar": {
    "doc": "Returns information about the next messages of the specified type in the chat split by days.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where to search"
      },
      "saved_peer_id": {
        "type": "flags.2?InputPeer",
        "doc": "Search within the [saved message dialog »](https://core.telegram.org/api/saved-messages) with this ID."
      },
      "filter": {
        "type": "MessagesFilter",
        "doc": "Message filter, [inputMessagesFilterEmpty](https://core.telegram.org/constructor/inputMessagesFilterEmpty), [inputMessagesFilterMyMentions](https://core.telegram.org/constructor/inputMessagesFilterMyMentions) filters are not supported by this method."
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_date": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.getSearchResultsPositions": {
    "doc": "Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where to search"
      },
      "saved_peer_id": {
        "type": "flags.2?InputPeer",
        "doc": "Search within the [saved message dialog »](https://core.telegram.org/api/saved-messages) with this ID."
      },
      "filter": {
        "type": "MessagesFilter",
        "doc": "Message filter, [inputMessagesFilterEmpty](https://core.telegram.org/constructor/inputMessagesFilterEmpty), [inputMessagesFilterMyMentions](https://core.telegram.org/constructor/inputMessagesFilterMyMentions) filters are not supported by this method."
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.hideChatJoinRequest": {
    "doc": "Dismiss or approve a chat [join request](https://core.telegram.org/api/invites#join-requests) related to a specific chat or channel.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "approved": {
        "type": "flags.0?true",
        "doc": "Whether to dismiss or approve the chat [join request »](https://core.telegram.org/api/invites#join-requests)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The chat or channel"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "The user whose [join request »](https://core.telegram.org/api/invites#join-requests) should be dismissed or approved"
      }
    }
  },
  "messages.hideAllChatJoinRequests": {
    "doc": "Dismiss or approve all [join requests](https://core.telegram.org/api/invites#join-requests) related to a specific chat or channel.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "approved": {
        "type": "flags.0?true",
        "doc": "Whether to dismiss or approve all chat [join requests »](https://core.telegram.org/api/invites#join-requests)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The chat or channel"
      },
      "link": {
        "type": "flags.1?string",
        "doc": "Only dismiss or approve [join requests »](https://core.telegram.org/api/invites#join-requests) initiated using this invite link"
      }
    }
  },
  "messages.toggleNoForwards": {
    "doc": "Enable or disable [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) on a channel or chat",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat or channel"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Enable or disable content protection"
      }
    }
  },
  "messages.saveDefaultSendAs": {
    "doc": "Change the default peer that should be used when sending messages, reactions, poll votes to a specific group",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Group"
      },
      "send_as": {
        "type": "InputPeer",
        "doc": "The default peer that should be used when sending messages to the group"
      }
    }
  },
  "messages.sendReaction": {
    "doc": "React to message.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "big": {
        "type": "flags.1?true",
        "doc": "Whether a bigger and longer reaction should be shown"
      },
      "add_to_recent": {
        "type": "flags.2?true",
        "doc": "Whether to add this reaction to the [recent reactions list »](https://core.telegram.org/api/reactions#recent-reactions)."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID to react to"
      },
      "reaction": {
        "type": "flags.0?Vector<Reaction>",
        "doc": "A list of reactions"
      }
    }
  },
  "messages.getMessagesReactions": {
    "doc": "Get [message reactions »](https://core.telegram.org/api/reactions)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Message IDs"
      }
    }
  },
  "messages.getMessageReactionsList": {
    "doc": "Get [message reaction](https://core.telegram.org/api/reactions) list, along with the sender of each reaction.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "int",
        "doc": "Message ID"
      },
      "reaction": {
        "type": "flags.0?Reaction",
        "doc": "Get only reactions of this type"
      },
      "offset": {
        "type": "flags.1?string",
        "doc": "Offset for pagination (taken from the `next_offset` field of the returned [messages.MessageReactionsList](https://core.telegram.org/type/messages.MessageReactionsList)); empty in the first request."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.setChatAvailableReactions": {
    "doc": "Change the set of [message reactions »](https://core.telegram.org/api/reactions) that can be used in a certain group, supergroup or channel",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Group where to apply changes"
      },
      "available_reactions": {
        "type": "ChatReactions",
        "doc": "Allowed reaction emojis"
      }
    }
  },
  "messages.getAvailableReactions": {
    "doc": "Obtain available [message reactions »](https://core.telegram.org/api/reactions)",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.setDefaultReaction": {
    "doc": "Change default emoji reaction to use in the quick reaction menu: the value is synced across devices and can be fetched using [help.getConfig, `reactions_default` field](https://core.telegram.org/method/help.getConfig).",
    "parameters": {
      "reaction": {
        "type": "Reaction",
        "doc": "New emoji reaction"
      }
    }
  },
  "messages.translateText": {
    "doc": "Translate a given text.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "flags.0?InputPeer",
        "doc": "If the text is a chat message, the peer ID"
      },
      "id": {
        "type": "flags.0?Vector<int>",
        "doc": "A list of message IDs to translate"
      },
      "text": {
        "type": "flags.1?Vector<TextWithEntities>",
        "doc": "A list of styled messages to translate"
      },
      "to_lang": {
        "type": "string",
        "doc": "Two-letter ISO 639-1 language code of the language to which the message is translated"
      }
    }
  },
  "messages.getUnreadReactions": {
    "doc": "Get unread reactions to messages you sent",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "If set, considers only reactions to messages within the specified [forum topic](https://core.telegram.org/api/forum#forum-topics)"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "add_offset": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "max_id": {
        "type": "int",
        "doc": "Only return reactions for messages up until this message ID"
      },
      "min_id": {
        "type": "int",
        "doc": "Only return reactions for messages starting from this message ID"
      }
    }
  },
  "messages.readReactions": {
    "doc": "Mark [message reactions »](https://core.telegram.org/api/reactions) as read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "Mark as read only reactions to messages within the specified [forum topic](https://core.telegram.org/api/forum#forum-topics)"
      }
    }
  },
  "messages.searchSentMedia": {
    "doc": "View and search recently sent media.  \nThis method does not support pagination.",
    "parameters": {
      "q": {
        "type": "string",
        "doc": "Optional search query"
      },
      "filter": {
        "type": "MessagesFilter",
        "doc": "Message filter"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return (max 100)."
      }
    }
  },
  "messages.getAttachMenuBots": {
    "doc": "Returns installed attachment menu [bot mini apps »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getAttachMenuBot": {
    "doc": "Returns attachment menu entry for a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "Bot ID"
      }
    }
  },
  "messages.toggleBotInAttachMenu": {
    "doc": "Enable or disable [web bot attachment menu »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "write_allowed": {
        "type": "flags.0?true",
        "doc": "Whether the user authorizes the bot to write messages to them, if requested by [attachMenuBot](https://core.telegram.org/constructor/attachMenuBot).`request_write_access`"
      },
      "bot": {
        "type": "InputUser",
        "doc": "Bot ID"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Toggle"
      }
    }
  },
  "messages.requestWebView": {
    "doc": "Open a [bot mini app](https://core.telegram.org/bots/webapps), sending over user information after user confirmation.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "from_bot_menu": {
        "type": "flags.4?true",
        "doc": "Whether the webview was opened by clicking on the bot's [menu button »](https://core.telegram.org/api/bots/menu)."
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://core.telegram.org/method/messages.sendWebViewResultMessage) should be sent silently (no notifications for the receivers)."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Dialog where the web app is being opened, and where the resulting message will be sent (see the [docs for more info »](https://core.telegram.org/api/bots/webapps))."
      },
      "bot": {
        "type": "InputUser",
        "doc": "Bot that owns the [web app](https://core.telegram.org/api/bots/webapps)"
      },
      "url": {
        "type": "flags.1?string",
        "doc": "[Web app URL](https://core.telegram.org/api/bots/webapps)"
      },
      "start_param": {
        "type": "flags.3?string",
        "doc": "If the web app was opened from the attachment menu using a [attachment menu deep link](https://core.telegram.org/api/links#bot-attachment-or-side-menu-links), `start_param` should contain the `data` from the `startattach` parameter."
      },
      "theme_params": {
        "type": "flags.2?DataJSON",
        "doc": "[Theme parameters »](https://core.telegram.org/api/bots/webapps#theme-parameters)"
      },
      "platform": {
        "type": "string",
        "doc": "Short name of the application; 0-64 English letters, digits, and underscores"
      },
      "reply_to": {
        "type": "flags.0?InputReplyTo",
        "doc": "If set, indicates that the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://core.telegram.org/method/messages.sendWebViewResultMessage) should be sent in reply to the specified message or story."
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Open the web app as the specified peer, sending the resulting the message as the specified peer."
      }
    }
  },
  "messages.prolongWebView": {
    "doc": "Indicate to the server (from the user side) that the user is still using a web app.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "silent": {
        "type": "flags.5?true",
        "doc": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://core.telegram.org/method/messages.sendWebViewResultMessage) should be sent silently (no notifications for the receivers)."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Dialog where the web app was opened."
      },
      "bot": {
        "type": "InputUser",
        "doc": "Bot that owns the [web app](https://core.telegram.org/api/bots/webapps)"
      },
      "query_id": {
        "type": "long",
        "doc": "Web app interaction ID obtained from [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView)"
      },
      "reply_to": {
        "type": "flags.0?InputReplyTo",
        "doc": "If set, indicates that the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://core.telegram.org/method/messages.sendWebViewResultMessage) should be sent in reply to the specified message or story."
      },
      "send_as": {
        "type": "flags.13?InputPeer",
        "doc": "Open the web app as the specified peer"
      }
    }
  },
  "messages.requestSimpleWebView": {
    "doc": "Open a [bot mini app](https://core.telegram.org/api/bots/webapps).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "from_switch_webview": {
        "type": "flags.1?true",
        "doc": "Whether the webapp was opened by clicking on the `switch_webview` button shown on top of the inline results list returned by [messages.getInlineBotResults](https://core.telegram.org/method/messages.getInlineBotResults)."
      },
      "from_side_menu": {
        "type": "flags.2?true",
        "doc": "Set this flag if opening the Mini App from the installed [side menu entry »](https://core.telegram.org/api/bots/attach) or from a [Mini App link »](https://core.telegram.org/api/links#mini-app-links)."
      },
      "bot": {
        "type": "InputUser",
        "doc": "Bot that owns the mini app"
      },
      "url": {
        "type": "flags.3?string",
        "doc": "Web app URL, if opening from a keyboard button or inline result"
      },
      "start_param": {
        "type": "flags.4?string",
        "doc": "Start parameter, if opening from a [Mini App link »](https://core.telegram.org/api/links#mini-app-links)."
      },
      "theme_params": {
        "type": "flags.0?DataJSON",
        "doc": "[Theme parameters »](https://core.telegram.org/api/bots/webapps#theme-parameters)"
      },
      "platform": {
        "type": "string",
        "doc": "Short name of the application; 0-64 English letters, digits, and underscores"
      }
    }
  },
  "messages.sendWebViewResultMessage": {
    "doc": "Terminate webview interaction started with [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), sending the specified message to the chat on behalf of the user.",
    "parameters": {
      "bot_query_id": {
        "type": "string",
        "doc": "Webview interaction ID obtained from [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView)"
      },
      "result": {
        "type": "InputBotInlineResult",
        "doc": "Message to send"
      }
    }
  },
  "messages.sendWebViewData": {
    "doc": "Used by the user to relay data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) to the bot that owns it.",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "Bot that owns the web app"
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID to prevent duplicate sending of the same event"
      },
      "button_text": {
        "type": "string",
        "doc": "Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app."
      },
      "data": {
        "type": "string",
        "doc": "Data to relay to the bot, obtained from a [`web_app_data_send` JS event](https://core.telegram.org/api/web-events#web-app-data-send)."
      }
    }
  },
  "messages.transcribeAudio": {
    "doc": "[Transcribe voice message](https://core.telegram.org/api/transcribe)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer ID where the voice message was sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "Voice message ID"
      }
    }
  },
  "messages.rateTranscribedAudio": {
    "doc": "Rate [transcribed voice message](https://core.telegram.org/api/transcribe)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the voice message was sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "transcription_id": {
        "type": "long",
        "doc": "Transcription ID"
      },
      "good": {
        "type": "Bool",
        "doc": "Whether the transcription was correct"
      }
    }
  },
  "messages.getCustomEmojiDocuments": {
    "doc": "Fetch [custom emoji stickers »](https://core.telegram.org/api/custom-emoji).",
    "parameters": {
      "document_id": {
        "type": "Vector<long>",
        "doc": "[Custom emoji](https://core.telegram.org/api/custom-emoji) IDs from a [messageEntityCustomEmoji](https://core.telegram.org/constructor/messageEntityCustomEmoji)."
      }
    }
  },
  "messages.getEmojiStickers": {
    "doc": "Gets the list of currently installed [custom emoji stickersets](https://core.telegram.org/api/custom-emoji).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getFeaturedEmojiStickers": {
    "doc": "Gets featured custom emoji stickersets.",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.reportReaction": {
    "doc": "Report a [message reaction](https://core.telegram.org/api/reactions)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the message was sent"
      },
      "id": {
        "type": "int",
        "doc": "Message ID"
      },
      "reaction_peer": {
        "type": "InputPeer",
        "doc": "Peer that sent the reaction"
      }
    }
  },
  "messages.getTopReactions": {
    "doc": "Got popular [message reactions](https://core.telegram.org/api/reactions)",
    "parameters": {
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getRecentReactions": {
    "doc": "Get recently used [message reactions](https://core.telegram.org/api/reactions)",
    "parameters": {
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.clearRecentReactions": {
    "doc": "Clear recently used [message reactions](https://core.telegram.org/api/reactions)",
    "parameters": {}
  },
  "messages.getExtendedMedia": {
    "doc": "Get information about extended media",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Message IDs"
      }
    }
  },
  "messages.setDefaultHistoryTTL": {
    "doc": "Changes the default value of the Time-To-Live setting, applied to all new chats.",
    "parameters": {
      "period": {
        "type": "int",
        "doc": "The new default Time-To-Live of all messages sent in new chats."
      }
    }
  },
  "messages.getDefaultHistoryTTL": {
    "doc": "Gets the default value of the Time-To-Live setting, applied to all new chats.",
    "parameters": {}
  },
  "messages.sendBotRequestedPeer": {
    "doc": "Send one or more chosen peers, as requested by a [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) button.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The bot that sent the [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) button."
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the message that contained the reply keyboard with the [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) button."
      },
      "button_id": {
        "type": "int",
        "doc": "The `button_id` field from the [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) constructor."
      },
      "requested_peers": {
        "type": "Vector<InputPeer>",
        "doc": "The chosen peers."
      }
    }
  },
  "messages.getEmojiGroups": {
    "doc": "Represents a list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories), to be used when selecting [custom emojis](https://core.telegram.org/api/custom-emoji).",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getEmojiStatusGroups": {
    "doc": "Represents a list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories), to be used when selecting custom emojis to set as [custom emoji status](https://core.telegram.org/api).",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getEmojiProfilePhotoGroups": {
    "doc": "Represents a list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories), to be used when selecting custom emojis to set as [profile picture](https://core.telegram.org/api/files#sticker-profile-pictures).",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.searchCustomEmoji": {
    "doc": "Look for [custom emojis](https://core.telegram.org/api/custom-emoji) associated to a UTF8 emoji",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "The emoji"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.togglePeerTranslations": {
    "doc": "Show or hide the [real-time chat translation popup](https://core.telegram.org/api/translation) for a certain chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "disabled": {
        "type": "flags.0?true",
        "doc": "Whether to disable or enable the real-time chat translation popup"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer"
      }
    }
  },
  "messages.getBotApp": {
    "doc": "Obtain information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps)",
    "parameters": {
      "app": {
        "type": "InputBotApp",
        "doc": "Bot app information obtained from a [Direct Mini App deep link »](https://core.telegram.org/api/links#direct-mini-app-links)."
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.requestAppWebView": {
    "doc": "Open a [bot mini app](https://core.telegram.org/bots/webapps) from a [direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links), sending over user information after user confirmation.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "write_allowed": {
        "type": "flags.0?true",
        "doc": "Set this flag if the bot is asking permission to send messages to the user as specified in the [direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links) docs, and the user agreed."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "If the client has clicked on the link in a Telegram chat, pass the chat's peer information; otherwise pass the bot's peer information, instead."
      },
      "app": {
        "type": "InputBotApp",
        "doc": "The app obtained by invoking [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp) as specified in the [direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links) docs."
      },
      "start_param": {
        "type": "flags.1?string",
        "doc": "If the `startapp` query string parameter is present in the [direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links), pass it to `start_param`."
      },
      "theme_params": {
        "type": "flags.2?DataJSON",
        "doc": "[Theme parameters »](https://core.telegram.org/api/bots/webapps#theme-parameters)"
      },
      "platform": {
        "type": "string",
        "doc": "Short name of the application; 0-64 English letters, digits, and underscores"
      }
    }
  },
  "messages.setChatWallPaper": {
    "doc": "Set a custom [wallpaper »](https://core.telegram.org/api/wallpapers) in a specific private chat with another user.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "for_both": {
        "type": "flags.3?true",
        "doc": "Only for [Premium](https://core.telegram.org/api/premium) users, sets the specified wallpaper for both users of the chat, without requiring confirmation from the other user."
      },
      "revert": {
        "type": "flags.4?true",
        "doc": "If we don't like the new wallpaper the other user of the chat has chosen for us using the `for_both` flag, we can re-set our previous wallpaper just on our side using this flag."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The private chat where the wallpaper will be set"
      },
      "wallpaper": {
        "type": "flags.0?InputWallPaper",
        "doc": "The [wallpaper »](https://core.telegram.org/api/wallpapers), obtained as described in the [wallpaper documentation »](https://core.telegram.org/api/wallpapers#uploading-wallpapers); must **not** be provided when installing a wallpaper obtained from a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) service message (`id` must be provided, instead)."
      },
      "settings": {
        "type": "flags.2?WallPaperSettings",
        "doc": "Wallpaper settings, obtained as described in the [wallpaper documentation »](https://core.telegram.org/api/wallpapers#uploading-wallpapers) or from [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper).`wallpaper`.`settings`."
      },
      "id": {
        "type": "flags.1?int",
        "doc": "If the wallpaper was obtained from a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) service message, must contain the ID of that message."
      }
    }
  },
  "messages.searchEmojiStickerSets": {
    "doc": "Search for [custom emoji stickersets »](https://core.telegram.org/api/custom-emoji)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "exclude_featured": {
        "type": "flags.0?true",
        "doc": "Exclude featured stickersets from results"
      },
      "q": {
        "type": "string",
        "doc": "Query string"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getSavedDialogs": {
    "doc": "Returns the current saved dialog list, see [here »](https://core.telegram.org/api/saved-messages) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "exclude_pinned": {
        "type": "flags.0?true",
        "doc": "Exclude pinned dialogs"
      },
      "offset_date": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets) (`top_message` ID used for pagination)"
      },
      "offset_peer": {
        "type": "InputPeer",
        "doc": "[Offset peer for pagination](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Number of list elements to be returned"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messages.getSavedHistory": {
    "doc": "Returns [saved messages »](https://core.telegram.org/api/saved-messages) forwarded from a specific peer",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Target peer"
      },
      "offset_id": {
        "type": "int",
        "doc": "Only return messages starting from the specified message ID"
      },
      "offset_date": {
        "type": "int",
        "doc": "Only return messages sent before the specified date"
      },
      "add_offset": {
        "type": "int",
        "doc": "Number of list elements to be skipped, negative values are also accepted."
      },
      "limit": {
        "type": "int",
        "doc": "Number of results to return"
      },
      "max_id": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with IDs less than **max\\_id**"
      },
      "min_id": {
        "type": "int",
        "doc": "If a positive value was transferred, the method will return only messages with IDs more than **min\\_id**"
      },
      "hash": {
        "type": "long",
        "doc": "[Result hash](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "messages.deleteSavedHistory": {
    "doc": "Deletes messages forwarded from a specific peer to [saved messages »](https://core.telegram.org/api/saved-messages).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer, whose messages will be deleted from [saved messages »](https://core.telegram.org/api/saved-messages)"
      },
      "max_id": {
        "type": "int",
        "doc": "Maximum ID of message to delete"
      },
      "min_date": {
        "type": "flags.2?int",
        "doc": "Delete all messages newer than this UNIX timestamp"
      },
      "max_date": {
        "type": "flags.3?int",
        "doc": "Delete all messages older than this UNIX timestamp"
      }
    }
  },
  "messages.getPinnedSavedDialogs": {
    "doc": "Get pinned [saved dialogs, see here »](https://core.telegram.org/api/saved-messages) for more info.",
    "parameters": {}
  },
  "messages.toggleSavedDialogPin": {
    "doc": "Pin or unpin a [saved message dialog »](https://core.telegram.org/api/saved-messages).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether to pin or unpin the dialog"
      },
      "peer": {
        "type": "InputDialogPeer",
        "doc": "The dialog to pin"
      }
    }
  },
  "messages.reorderPinnedSavedDialogs": {
    "doc": "Reorder pinned [saved message dialogs »](https://core.telegram.org/api/saved-messages).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "force": {
        "type": "flags.0?true",
        "doc": "If set, dialogs pinned server-side but not present in the `order` field will be unpinned."
      },
      "order": {
        "type": "Vector<InputDialogPeer>",
        "doc": "New dialog order"
      }
    }
  },
  "updates.getState": {
    "doc": "Returns a current state of updates.",
    "parameters": {}
  },
  "updates.getDifference": {
    "doc": "Get new [updates](https://core.telegram.org/api/updates).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pts": {
        "type": "int",
        "doc": "PTS, see [updates](https://core.telegram.org/api/updates)."
      },
      "pts_limit": {
        "type": "flags.1?int",
        "doc": "PTS limit"
      },
      "pts_total_limit": {
        "type": "flags.0?int",
        "doc": "For fast updating: if provided and `pts + pts_total_limit < remote pts`, [updates.differenceTooLong](https://core.telegram.org/constructor/updates.differenceTooLong) will be returned.  \nSimply tells the server to not return the difference if it is bigger than `pts_total_limit`  \nIf the remote pts is too big (> ~4000000), this field will default to 1000000"
      },
      "date": {
        "type": "int",
        "doc": "date, see [updates](https://core.telegram.org/api/updates)."
      },
      "qts": {
        "type": "int",
        "doc": "QTS, see [updates](https://core.telegram.org/api/updates)."
      },
      "qts_limit": {
        "type": "flags.2?int",
        "doc": "QTS limit"
      }
    }
  },
  "updates.getChannelDifference": {
    "doc": "Returns the difference between the current state of updates of a certain channel and transmitted.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "force": {
        "type": "flags.0?true",
        "doc": "Set to true to skip some possibly unneeded updates and reduce server-side load"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "The channel"
      },
      "filter": {
        "type": "ChannelMessagesFilter",
        "doc": "Messsage filter"
      },
      "pts": {
        "type": "int",
        "doc": "Persistent timestamp (see [updates](https://core.telegram.org/api/updates))"
      },
      "limit": {
        "type": "int",
        "doc": "How many updates to fetch, max `100000`  \nOrdinary (non-bot) users are supposed to pass `10-100`"
      }
    }
  },
  "photos.updateProfilePhoto": {
    "doc": "Installs a previously uploaded photo as a profile photo.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "fallback": {
        "type": "flags.0?true",
        "doc": "If set, the chosen profile photo will be shown to users that can't display your main profile photo due to your privacy settings."
      },
      "bot": {
        "type": "flags.1?InputUser",
        "doc": "Can contain info of a bot we own, to change the profile photo of that bot, instead of the current user."
      },
      "id": {
        "type": "InputPhoto",
        "doc": "Input photo"
      }
    }
  },
  "photos.uploadProfilePhoto": {
    "doc": "Updates current user profile photo.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "fallback": {
        "type": "flags.3?true",
        "doc": "If set, the chosen profile photo will be shown to users that can't display your main profile photo due to your privacy settings."
      },
      "bot": {
        "type": "flags.5?InputUser",
        "doc": "Can contain info of a bot we own, to change the profile photo of that bot, instead of the current user."
      },
      "file": {
        "type": "flags.0?InputFile",
        "doc": "Profile photo"
      },
      "video": {
        "type": "flags.1?InputFile",
        "doc": "[Animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) video"
      },
      "video_start_ts": {
        "type": "flags.2?double",
        "doc": "Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set."
      },
      "video_emoji_markup": {
        "type": "flags.4?VideoSize",
        "doc": "Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](https://core.telegram.org/constructor/videoSizeEmojiMarkup) or a [videoSizeStickerMarkup](https://core.telegram.org/constructor/videoSizeStickerMarkup) constructor."
      }
    }
  },
  "photos.deletePhotos": {
    "doc": "Deletes profile photos. The method returns a list of successfully deleted photo IDs.",
    "parameters": {
      "id": {
        "type": "Vector<InputPhoto>",
        "doc": "Input photos to delete"
      }
    }
  },
  "photos.getUserPhotos": {
    "doc": "Returns the list of user photos.",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User ID"
      },
      "offset": {
        "type": "int",
        "doc": "Number of list elements to be skipped"
      },
      "max_id": {
        "type": "long",
        "doc": "If a positive value was transferred, the method will return only photos with IDs less than the set one. This parameter is often useful when [refetching file references »](https://core.telegram.org/api/file_reference), as in conjuction with `limit=1` and `offset=-1` the [photo](https://core.telegram.org/constructor/photo) object with the `id` specified in `max_id` can be fetched."
      },
      "limit": {
        "type": "int",
        "doc": "Number of list elements to be returned"
      }
    }
  },
  "photos.uploadContactProfilePhoto": {
    "doc": "Upload a custom profile picture for a contact, or suggest a new profile picture to a contact.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "suggest": {
        "type": "flags.3?true",
        "doc": "If set, will send a [messageActionSuggestProfilePhoto](https://core.telegram.org/constructor/messageActionSuggestProfilePhoto) service message to `user_id`, suggesting them to use the specified profile picture; otherwise, will set a personal profile picture for the user (only visible to the current user)."
      },
      "save": {
        "type": "flags.4?true",
        "doc": "If set, removes a previously set personal profile picture (does not affect suggested profile pictures, to remove them simply deleted the [messageActionSuggestProfilePhoto](https://core.telegram.org/constructor/messageActionSuggestProfilePhoto) service message with [messages.deleteMessages](https://core.telegram.org/method/messages.deleteMessages))."
      },
      "user_id": {
        "type": "InputUser",
        "doc": "The contact"
      },
      "file": {
        "type": "flags.0?InputFile",
        "doc": "Profile photo"
      },
      "video": {
        "type": "flags.1?InputFile",
        "doc": "[Animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) video"
      },
      "video_start_ts": {
        "type": "flags.2?double",
        "doc": "Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set."
      },
      "video_emoji_markup": {
        "type": "flags.5?VideoSize",
        "doc": "Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](https://core.telegram.org/constructor/videoSizeEmojiMarkup) or a [videoSizeStickerMarkup](https://core.telegram.org/constructor/videoSizeStickerMarkup) constructor."
      }
    }
  },
  "upload.saveFilePart": {
    "doc": "Saves a part of file for further sending to one of the methods.",
    "parameters": {
      "file_id": {
        "type": "long",
        "doc": "Random file identifier created by the client"
      },
      "file_part": {
        "type": "int",
        "doc": "Numerical order of a part"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Binary data, content of a part"
      }
    }
  },
  "upload.getFile": {
    "doc": "Returns content of a whole file or its part.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "precise": {
        "type": "flags.0?true",
        "doc": "Disable some checks on limit and offset values, useful for example to stream videos by keyframes"
      },
      "cdn_supported": {
        "type": "flags.1?true",
        "doc": "Whether the current client supports [CDN downloads](https://core.telegram.org/cdn)"
      },
      "location": {
        "type": "InputFileLocation",
        "doc": "File location"
      },
      "offset": {
        "type": "long",
        "doc": "Number of bytes to be skipped"
      },
      "limit": {
        "type": "int",
        "doc": "Number of bytes to be returned"
      }
    }
  },
  "upload.saveBigFilePart": {
    "doc": "Saves a part of a large file (over 10 MB in size) to be later passed to one of the methods.",
    "parameters": {
      "file_id": {
        "type": "long",
        "doc": "Random file id, created by the client"
      },
      "file_part": {
        "type": "int",
        "doc": "Part sequence number"
      },
      "file_total_parts": {
        "type": "int",
        "doc": "Total number of parts"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Binary data, part contents"
      }
    }
  },
  "upload.getWebFile": {
    "doc": "Returns content of a web file, by proxying the request through telegram, see the [webfile docs for more info](https://core.telegram.org/api/files#downloading-webfiles).",
    "parameters": {
      "location": {
        "type": "InputWebFileLocation",
        "doc": "The file to download"
      },
      "offset": {
        "type": "int",
        "doc": "Number of bytes to be skipped"
      },
      "limit": {
        "type": "int",
        "doc": "Number of bytes to be returned"
      }
    }
  },
  "upload.getCdnFile": {
    "doc": "Download a [CDN](https://core.telegram.org/cdn) file.",
    "parameters": {
      "file_token": {
        "type": "bytes",
        "doc": "File token"
      },
      "offset": {
        "type": "long",
        "doc": "Offset of chunk to download"
      },
      "limit": {
        "type": "int",
        "doc": "Length of chunk to download"
      }
    }
  },
  "upload.reuploadCdnFile": {
    "doc": "Request a reupload of a certain file to a [CDN DC](https://core.telegram.org/cdn).",
    "parameters": {
      "file_token": {
        "type": "bytes",
        "doc": "File token"
      },
      "request_token": {
        "type": "bytes",
        "doc": "Request token"
      }
    }
  },
  "upload.getCdnFileHashes": {
    "doc": "Get SHA256 hashes for verifying downloaded [CDN](https://core.telegram.org/cdn) files",
    "parameters": {
      "file_token": {
        "type": "bytes",
        "doc": "File"
      },
      "offset": {
        "type": "long",
        "doc": "Offset from which to start getting hashes"
      }
    }
  },
  "upload.getFileHashes": {
    "doc": "Get SHA256 hashes for verifying downloaded files",
    "parameters": {
      "location": {
        "type": "InputFileLocation",
        "doc": "File"
      },
      "offset": {
        "type": "long",
        "doc": "Offset from which to get file hashes"
      }
    }
  },
  "help.getConfig": {
    "doc": "Returns current configuration, including data center configuration.",
    "parameters": {}
  },
  "help.getNearestDc": {
    "doc": "Returns info on data center nearest to the user.",
    "parameters": {}
  },
  "help.getAppUpdate": {
    "doc": "Returns information on update availability for the current application.",
    "parameters": {
      "source": {
        "type": "string",
        "doc": "Source"
      }
    }
  },
  "help.getInviteText": {
    "doc": "Returns localized text of a text message with an invitation.",
    "parameters": {}
  },
  "help.getSupport": {
    "doc": "Returns the support user for the \"ask a question\" feature.",
    "parameters": {}
  },
  "help.setBotUpdatesStatus": {
    "doc": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
    "parameters": {
      "pending_updates_count": {
        "type": "int",
        "doc": "Number of pending updates"
      },
      "message": {
        "type": "string",
        "doc": "Error message, if present"
      }
    }
  },
  "help.getCdnConfig": {
    "doc": "Get configuration for [CDN](https://core.telegram.org/cdn) file downloads.",
    "parameters": {}
  },
  "help.getRecentMeUrls": {
    "doc": "Get recently used `t.me` links.",
    "parameters": {
      "referer": {
        "type": "string",
        "doc": "Referrer"
      }
    }
  },
  "help.getTermsOfServiceUpdate": {
    "doc": "Look for updates of telegram's terms of service",
    "parameters": {}
  },
  "help.acceptTermsOfService": {
    "doc": "Accept the new terms of service",
    "parameters": {
      "id": {
        "type": "DataJSON",
        "doc": "ID of terms of service"
      }
    }
  },
  "help.getDeepLinkInfo": {
    "doc": "Get info about an unsupported deep link, see [here for more info »](https://core.telegram.org/api/links#unsupported-links).",
    "parameters": {
      "path": {
        "type": "string",
        "doc": "Path component of a `tg:` link"
      }
    }
  },
  "help.getAppConfig": {
    "doc": "Get app-specific configuration, see [client configuration](https://core.telegram.org/api/config#client-configuration) for more info on the result.",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "help.saveAppLog": {
    "doc": "Saves logs of application on the server.",
    "parameters": {
      "events": {
        "type": "Vector<InputAppEvent>",
        "doc": "List of input events"
      }
    }
  },
  "help.getPassportConfig": {
    "doc": "Get [passport](https://core.telegram.org/passport) configuration",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "help.getSupportName": {
    "doc": "Get localized name of the telegram support user",
    "parameters": {}
  },
  "help.getUserInfo": {
    "doc": "Can only be used by TSF members to obtain internal information.",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User ID"
      }
    }
  },
  "help.editUserInfo": {
    "doc": "Internal use",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User"
      },
      "message": {
        "type": "string",
        "doc": "Message"
      },
      "entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "help.getPromoData": {
    "doc": "Get MTProxy/Public Service Announcement information",
    "parameters": {}
  },
  "help.hidePromoData": {
    "doc": "Hide MTProxy/Public Service Announcement information",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer to hide"
      }
    }
  },
  "help.dismissSuggestion": {
    "doc": "Dismiss a [suggestion, see here for more info »](https://core.telegram.org/api/config#suggestions).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "In the case of pending suggestions in [channels](https://core.telegram.org/constructor/channelFull), the channel ID."
      },
      "suggestion": {
        "type": "string",
        "doc": "[Suggestion, see here for more info »](https://core.telegram.org/api/config#suggestions)."
      }
    }
  },
  "help.getCountriesList": {
    "doc": "Get name, ISO code, localized name and phone codes/patterns of all available countries",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code of the current user"
      },
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "help.getPremiumPromo": {
    "doc": "Get Telegram Premium promotion information",
    "parameters": {}
  },
  "help.getPeerColors": {
    "doc": "Get the set of [accent color palettes »](https://core.telegram.org/api/colors) that can be used for message accents.",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "help.getPeerProfileColors": {
    "doc": "Get the set of [accent color palettes »](https://core.telegram.org/api/colors) that can be used in profile page backgrounds.",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "channels.readHistory": {
    "doc": "Mark [channel/supergroup](https://core.telegram.org/api/channel) history as read",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "max_id": {
        "type": "int",
        "doc": "ID of message up to which messages should be marked as read"
      }
    }
  },
  "channels.deleteMessages": {
    "doc": "Delete messages in a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of messages to delete"
      }
    }
  },
  "channels.reportSpam": {
    "doc": "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup"
      },
      "participant": {
        "type": "InputPeer",
        "doc": "Participant whose messages should be reported"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of spam messages"
      }
    }
  },
  "channels.getMessages": {
    "doc": "Get [channel/supergroup](https://core.telegram.org/api/channel) messages",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup"
      },
      "id": {
        "type": "Vector<InputMessage>",
        "doc": "IDs of messages to get"
      }
    }
  },
  "channels.getParticipants": {
    "doc": "Get the participants of a [supergroup/channel](https://core.telegram.org/api/channel)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "filter": {
        "type": "ChannelParticipantsFilter",
        "doc": "Which participant types to fetch"
      },
      "offset": {
        "type": "int",
        "doc": "[Offset](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "[Limit](https://core.telegram.org/api/offsets)"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "channels.getParticipant": {
    "doc": "Get info about a [channel/supergroup](https://core.telegram.org/api/channel) participant",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup"
      },
      "participant": {
        "type": "InputPeer",
        "doc": "Participant to get info about"
      }
    }
  },
  "channels.getChannels": {
    "doc": "Get info about [channels/supergroups](https://core.telegram.org/api/channel)",
    "parameters": {
      "id": {
        "type": "Vector<InputChannel>",
        "doc": "IDs of channels/supergroups to get info about"
      }
    }
  },
  "channels.getFullChannel": {
    "doc": "Get full info about a [supergroup](https://core.telegram.org/api/channel#supergroups), [gigagroup](https://core.telegram.org/api/channel#gigagroups) or [channel](https://core.telegram.org/api/channel#channels)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [gigagroup](https://core.telegram.org/api/channel#gigagroups) to get info about"
      }
    }
  },
  "channels.createChannel": {
    "doc": "Create a [supergroup/channel](https://core.telegram.org/api/channel).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "broadcast": {
        "type": "flags.0?true",
        "doc": "Whether to create a [channel](https://core.telegram.org/api/channel)"
      },
      "megagroup": {
        "type": "flags.1?true",
        "doc": "Whether to create a [supergroup](https://core.telegram.org/api/channel)"
      },
      "for_import": {
        "type": "flags.3?true",
        "doc": "Whether the supergroup is being created to import messages from a foreign chat service using [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport)"
      },
      "forum": {
        "type": "flags.5?true",
        "doc": "Whether to create a [forum](https://core.telegram.org/api/forum)"
      },
      "title": {
        "type": "string",
        "doc": "Channel title"
      },
      "about": {
        "type": "string",
        "doc": "Channel description"
      },
      "geo_point": {
        "type": "flags.2?InputGeoPoint",
        "doc": "Geogroup location, see [here »](https://core.telegram.org/api/nearby) for more info on geogroups."
      },
      "address": {
        "type": "flags.2?string",
        "doc": "Geogroup address, see [here »](https://core.telegram.org/api/nearby) for more info on geogroups."
      },
      "ttl_period": {
        "type": "flags.4?int",
        "doc": "Time-to-live of all messages that will be sent in the supergroup: once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well. You can use [messages.setDefaultHistoryTTL](https://core.telegram.org/method/messages.setDefaultHistoryTTL) to edit this value later."
      }
    }
  },
  "channels.editAdmin": {
    "doc": "Modify the admin rights of a user in a [supergroup/channel](https://core.telegram.org/api/channel).",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The [supergroup/channel](https://core.telegram.org/api/channel)."
      },
      "user_id": {
        "type": "InputUser",
        "doc": "The ID of the user whose admin rights should be modified"
      },
      "admin_rights": {
        "type": "ChatAdminRights",
        "doc": "The admin rights"
      },
      "rank": {
        "type": "string",
        "doc": "Indicates the role (rank) of the admin in the group: just an arbitrary string"
      }
    }
  },
  "channels.editTitle": {
    "doc": "Edit the name of a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup"
      },
      "title": {
        "type": "string",
        "doc": "New name"
      }
    }
  },
  "channels.editPhoto": {
    "doc": "Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup whose photo should be edited"
      },
      "photo": {
        "type": "InputChatPhoto",
        "doc": "New photo"
      }
    }
  },
  "channels.checkUsername": {
    "doc": "Check if a username is free and can be assigned to a channel/supergroup",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The [channel/supergroup](https://core.telegram.org/api/channel) that will assigned the specified username"
      },
      "username": {
        "type": "string",
        "doc": "The username to check"
      }
    }
  },
  "channels.updateUsername": {
    "doc": "Change or remove the username of a supergroup/channel",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "username": {
        "type": "string",
        "doc": "New username, pass an empty string to remove the username"
      }
    }
  },
  "channels.joinChannel": {
    "doc": "Join a channel/supergroup",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup to join"
      }
    }
  },
  "channels.leaveChannel": {
    "doc": "Leave a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel) to leave"
      }
    }
  },
  "channels.inviteToChannel": {
    "doc": "Invite users to a channel/supergroup",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup"
      },
      "users": {
        "type": "Vector<InputUser>",
        "doc": "Users to invite"
      }
    }
  },
  "channels.deleteChannel": {
    "doc": "Delete a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel) to delete"
      }
    }
  },
  "channels.exportMessageLink": {
    "doc": "Get link and embed info of a message in a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "grouped": {
        "type": "flags.0?true",
        "doc": "Whether to include other grouped media (for albums)"
      },
      "thread": {
        "type": "flags.1?true",
        "doc": "Whether to also include a thread ID, if available, inside of the link"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "id": {
        "type": "int",
        "doc": "Message ID"
      }
    }
  },
  "channels.toggleSignatures": {
    "doc": "Enable/disable message signatures in channels",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Value"
      }
    }
  },
  "channels.getAdminedPublicChannels": {
    "doc": "Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we're admin in. Usually called when the user exceeds the [limit](https://core.telegram.org/constructor/config) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "by_location": {
        "type": "flags.0?true",
        "doc": "Get geogroups"
      },
      "check_limit": {
        "type": "flags.1?true",
        "doc": "If set and the user has reached the limit of owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), instead of returning the channel list one of the specified [errors](#possible-errors) will be returned.  \nUseful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](https://core.telegram.org/method/channels.checkUsername)/[channels.updateUsername](https://core.telegram.org/method/channels.updateUsername)."
      }
    }
  },
  "channels.editBanned": {
    "doc": "Ban/unban/kick a user in a [supergroup/channel](https://core.telegram.org/api/channel).",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The [supergroup/channel](https://core.telegram.org/api/channel)."
      },
      "participant": {
        "type": "InputPeer",
        "doc": "Participant to ban"
      },
      "banned_rights": {
        "type": "ChatBannedRights",
        "doc": "The banned rights"
      }
    }
  },
  "channels.getAdminLog": {
    "doc": "Get the admin log of a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "q": {
        "type": "string",
        "doc": "Search query, can be empty"
      },
      "events_filter": {
        "type": "flags.0?ChannelAdminLogEventsFilter",
        "doc": "Event filter"
      },
      "admins": {
        "type": "flags.1?Vector<InputUser>",
        "doc": "Only show events from these admins"
      },
      "max_id": {
        "type": "long",
        "doc": "Maximum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))"
      },
      "min_id": {
        "type": "long",
        "doc": "Minimum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "channels.setStickers": {
    "doc": "Associate a stickerset to the supergroup",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup"
      },
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "The stickerset to associate"
      }
    }
  },
  "channels.readMessageContents": {
    "doc": "Mark [channel/supergroup](https://core.telegram.org/api/channel) message contents as read",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of messages whose contents should be marked as read"
      }
    }
  },
  "channels.deleteHistory": {
    "doc": "Delete the history of a [supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "for_everyone": {
        "type": "flags.0?true",
        "doc": "Whether the history should be deleted for everyone"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "[Supergroup](https://core.telegram.org/api/channel) whose history must be deleted"
      },
      "max_id": {
        "type": "int",
        "doc": "ID of message **up to which** the history must be deleted"
      }
    }
  },
  "channels.togglePreHistoryHidden": {
    "doc": "Hide/unhide message history for new channel/supergroup users",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel/supergroup"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Hide/unhide"
      }
    }
  },
  "channels.getLeftChannels": {
    "doc": "Get a list of [channels/supergroups](https://core.telegram.org/api/channel) we left, requires a [takeout session, see here » for more info](https://core.telegram.org/api/takeout).",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset for [pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "channels.getGroupsForDiscussion": {
    "doc": "Get all groups that can be used as [discussion groups](https://core.telegram.org/api/discussion).",
    "parameters": {}
  },
  "channels.setDiscussionGroup": {
    "doc": "Associate a group to a channel as [discussion group](https://core.telegram.org/api/discussion) for that channel",
    "parameters": {
      "broadcast": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "group": {
        "type": "InputChannel",
        "doc": "[Discussion group](https://core.telegram.org/api/discussion) to associate to the channel"
      }
    }
  },
  "channels.editCreator": {
    "doc": "Transfer channel ownership",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "New channel owner"
      },
      "password": {
        "type": "InputCheckPasswordSRP",
        "doc": "[2FA password](https://core.telegram.org/api/srp) of account"
      }
    }
  },
  "channels.editLocation": {
    "doc": "Edit location of geogroup, see [here »](https://core.telegram.org/api/nearby) for more info on geogroups.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Geogroup](https://core.telegram.org/api/channel)"
      },
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "New geolocation"
      },
      "address": {
        "type": "string",
        "doc": "Address string"
      }
    }
  },
  "channels.toggleSlowMode": {
    "doc": "Toggle supergroup slow mode: if enabled, users will only be able to send one message every `seconds` seconds",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The [supergroup](https://core.telegram.org/api/channel)"
      },
      "seconds": {
        "type": "int",
        "doc": "Users will only be able to send one message every `seconds` seconds, `0` to disable the limitation"
      }
    }
  },
  "channels.getInactiveChannels": {
    "doc": "Get inactive channels and supergroups",
    "parameters": {}
  },
  "channels.convertToGigagroup": {
    "doc": "Convert a [supergroup](https://core.telegram.org/api/channel) to a [gigagroup](https://core.telegram.org/api/channel), when requested by [channel suggestions](https://core.telegram.org/api/config#channel-suggestions).",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The [supergroup](https://core.telegram.org/api/channel) to convert"
      }
    }
  },
  "channels.viewSponsoredMessage": {
    "doc": "Mark a specific sponsored message as read",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Peer"
      },
      "random_id": {
        "type": "bytes",
        "doc": "Message ID"
      }
    }
  },
  "channels.getSponsoredMessages": {
    "doc": "Get a list of sponsored messages",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Peer"
      }
    }
  },
  "channels.getSendAs": {
    "doc": "Obtains a list of peers that can be used to send messages in a specific group",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The group where we intend to send messages"
      }
    }
  },
  "channels.deleteParticipantHistory": {
    "doc": "Delete all messages sent by a specific participant of a given supergroup",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup"
      },
      "participant": {
        "type": "InputPeer",
        "doc": "The participant whose messages should be deleted"
      }
    }
  },
  "channels.toggleJoinToSend": {
    "doc": "Set whether all users [should join a discussion group in order to comment on a post »](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Discussion group"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Toggle"
      }
    }
  },
  "channels.toggleJoinRequest": {
    "doc": "Set whether all users should [request admin approval to join the group »](https://core.telegram.org/api/invites#join-requests).",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Group"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Toggle"
      }
    }
  },
  "channels.reorderUsernames": {
    "doc": "Reorder active usernames",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The supergroup or channel"
      },
      "order": {
        "type": "Vector<string>",
        "doc": "The new order for active usernames. All active usernames must be specified."
      }
    }
  },
  "channels.toggleUsername": {
    "doc": "Activate or deactivate a purchased [fragment.com](https://fragment.com) username associated to a [supergroup or channel](https://core.telegram.org/api/channel) we own.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "[Supergroup or channel](https://core.telegram.org/api/channel)"
      },
      "username": {
        "type": "string",
        "doc": "Username"
      },
      "active": {
        "type": "Bool",
        "doc": "Whether to activate or deactivate the username"
      }
    }
  },
  "channels.deactivateAllUsernames": {
    "doc": "Disable all purchased usernames of a supergroup or channel",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup or channel"
      }
    }
  },
  "channels.toggleForum": {
    "doc": "Enable or disable [forum functionality](https://core.telegram.org/api/forum) in a supergroup.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup ID"
      },
      "enabled": {
        "type": "Bool",
        "doc": "Enable or disable forum functionality"
      }
    }
  },
  "channels.createForumTopic": {
    "doc": "Create a [forum topic](https://core.telegram.org/api/forum); requires [`manage_topics` rights](https://core.telegram.org/api/rights).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "[The forum](https://core.telegram.org/api/forum)"
      },
      "title": {
        "type": "string",
        "doc": "Topic title (maximum UTF-8 length: 128)"
      },
      "icon_color": {
        "type": "flags.0?int",
        "doc": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`."
      },
      "icon_emoji_id": {
        "type": "flags.3?long",
        "doc": "ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon. [Telegram Premium](https://core.telegram.org/api/premium) users can use any custom emoji, other users can only use the custom emojis contained in the [inputStickerSetEmojiDefaultTopicIcons](https://core.telegram.org/constructor/inputStickerSetEmojiDefaultTopicIcons) emoji pack."
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID to prevent duplicate sending of the same event"
      },
      "send_as": {
        "type": "flags.2?InputPeer",
        "doc": "Create the topic as the specified peer"
      }
    }
  },
  "channels.getForumTopics": {
    "doc": "Get [topics of a forum](https://core.telegram.org/api/forum)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup"
      },
      "q": {
        "type": "flags.0?string",
        "doc": "Search query"
      },
      "offset_date": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets), date of the last message of the last found topic. Use 0 or any date in the future to get results from the last topic."
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets), ID of the last message of the last found topic (or initially `0`)."
      },
      "offset_topic": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets), ID of the last found topic (or initially `0`)."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets). For optimal performance, the number of returned topics is chosen by the server and can be smaller than the specified limit."
      }
    }
  },
  "channels.getForumTopicsByID": {
    "doc": "Get forum topics by their ID",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Forum"
      },
      "topics": {
        "type": "Vector<int>",
        "doc": "Topic IDs"
      }
    }
  },
  "channels.editForumTopic": {
    "doc": "Edit [forum topic](https://core.telegram.org/api/forum); requires [`manage_topics` rights](https://core.telegram.org/api/rights).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup"
      },
      "topic_id": {
        "type": "int",
        "doc": "Topic ID"
      },
      "title": {
        "type": "flags.0?string",
        "doc": "If present, will update the topic title (maximum UTF-8 length: 128)."
      },
      "icon_emoji_id": {
        "type": "flags.1?long",
        "doc": "If present, updates the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon. [Telegram Premium](https://core.telegram.org/api/premium) users can use any custom emoji, other users can only use the custom emojis contained in the [inputStickerSetEmojiDefaultTopicIcons](https://core.telegram.org/constructor/inputStickerSetEmojiDefaultTopicIcons) emoji pack. Pass 0 to switch to the fallback topic icon."
      },
      "closed": {
        "type": "flags.2?Bool",
        "doc": "If present, will update the open/closed status of the topic."
      },
      "hidden": {
        "type": "flags.3?Bool",
        "doc": "If present, will hide/unhide the topic (only valid for the \"General\" topic, `id=1`)."
      }
    }
  },
  "channels.updatePinnedForumTopic": {
    "doc": "Pin or unpin [forum topics](https://core.telegram.org/api/forum)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup ID"
      },
      "topic_id": {
        "type": "int",
        "doc": "[Forum topic ID](https://core.telegram.org/api/forum)"
      },
      "pinned": {
        "type": "Bool",
        "doc": "Whether to pin or unpin the topic"
      }
    }
  },
  "channels.deleteTopicHistory": {
    "doc": "Delete message history of a [forum topic](https://core.telegram.org/api/forum)",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Forum"
      },
      "top_msg_id": {
        "type": "int",
        "doc": "Topic ID"
      }
    }
  },
  "channels.reorderPinnedForumTopics": {
    "doc": "Reorder pinned forum topics",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "force": {
        "type": "flags.0?true",
        "doc": "If not set, the order of only the topics present both server-side and in `order` will be changed (i.e. mentioning topics not pinned server-side in `order` will not pin them, and not mentioning topics pinned server-side will not unpin them).  \nIf set, the entire server-side pinned topic list will be replaced with `order` (i.e. mentioning topics not pinned server-side in `order` will pin them, and not mentioning topics pinned server-side will unpin them)"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup ID"
      },
      "order": {
        "type": "Vector<int>",
        "doc": "[Topic IDs »](https://core.telegram.org/api/forum)"
      }
    }
  },
  "channels.toggleAntiSpam": {
    "doc": "Enable or disable the [native antispam system](https://core.telegram.org/api/antispam).",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup ID. The specified supergroup must have at least `telegram_antispam_group_size_min` members to enable antispam functionality, as specified by the [client configuration parameters](https://core.telegram.org/api/config#client-configuration)."
      },
      "enabled": {
        "type": "Bool",
        "doc": "Enable or disable the native antispam system."
      }
    }
  },
  "channels.reportAntiSpamFalsePositive": {
    "doc": "Report a [native antispam](https://core.telegram.org/api/antispam) false positive",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup ID"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID that was mistakenly deleted by the [native antispam](https://core.telegram.org/api/antispam) system, taken from the [admin log](https://core.telegram.org/api/recent-actions)"
      }
    }
  },
  "channels.toggleParticipantsHidden": {
    "doc": "Hide or display the participants list in a [supergroup](https://core.telegram.org/api/channel).",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Supergroup ID"
      },
      "enabled": {
        "type": "Bool",
        "doc": "If true, will hide the participants list; otherwise will unhide it."
      }
    }
  },
  "channels.clickSponsoredMessage": {
    "doc": "Informs the server that the user has either:",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Channel where the sponsored message was posted"
      },
      "random_id": {
        "type": "bytes",
        "doc": "Message ID"
      }
    }
  },
  "channels.updateColor": {
    "doc": "Update the [accent color and background custom emoji »](https://core.telegram.org/api/colors) of a channel.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "for_profile": {
        "type": "flags.1?true",
        "doc": "Whether to change the accent color emoji pattern of the profile page; otherwise, the accent color and emoji pattern of messages will be changed."
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Channel whose accent color should be changed."
      },
      "color": {
        "type": "flags.2?int",
        "doc": "[ID of the accent color palette »](https://core.telegram.org/api/colors) to use (not RGB24, see [here »](https://core.telegram.org/api/colors) for more info); if not set, the default palette is used."
      },
      "background_emoji_id": {
        "type": "flags.0?long",
        "doc": "Custom emoji ID used in the accent color pattern."
      }
    }
  },
  "channels.toggleViewForumAsMessages": {
    "doc": "Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a \"View as messages\" setting in the local client: this setting only affects the current account, and is synced to other logged in sessions using this method.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The forum"
      },
      "enabled": {
        "type": "Bool",
        "doc": "The new value of the `view_forum_as_messages` flag."
      }
    }
  },
  "channels.getChannelRecommendations": {
    "doc": "Obtain a list of similarly themed public channels, selected based on similarities in their **subscriber bases**.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The method will return channels related to the passed `channel`."
      }
    }
  },
  "channels.updateEmojiStatus": {
    "doc": "Set an [emoji status](https://core.telegram.org/api/emoji-status) for a channel.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "The channel, must have at least [`channel_emoji_status_level_min` boosts](https://core.telegram.org/api/config#channel-emoji-status-level-min)."
      },
      "emoji_status": {
        "type": "EmojiStatus",
        "doc": "[Emoji status](https://core.telegram.org/api/emoji-status) to set"
      }
    }
  },
  "bots.sendCustomRequest": {
    "doc": "Sends a custom request; for bots only",
    "parameters": {
      "custom_method": {
        "type": "string",
        "doc": "The method name"
      },
      "params": {
        "type": "DataJSON",
        "doc": "JSON-serialized method parameters"
      }
    }
  },
  "bots.answerWebhookJSONQuery": {
    "doc": "Answers a custom query; for bots only",
    "parameters": {
      "query_id": {
        "type": "long",
        "doc": "Identifier of a custom query"
      },
      "data": {
        "type": "DataJSON",
        "doc": "JSON-serialized answer to the query"
      }
    }
  },
  "bots.setBotCommands": {
    "doc": "Set bot command list",
    "parameters": {
      "scope": {
        "type": "BotCommandScope",
        "doc": "Command scope"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      },
      "commands": {
        "type": "Vector<BotCommand>",
        "doc": "Bot commands"
      }
    }
  },
  "bots.resetBotCommands": {
    "doc": "Clear bot commands for the specified bot scope and language code",
    "parameters": {
      "scope": {
        "type": "BotCommandScope",
        "doc": "Command scope"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "bots.getBotCommands": {
    "doc": "Obtain a list of bot commands for the specified bot scope and language code",
    "parameters": {
      "scope": {
        "type": "BotCommandScope",
        "doc": "Command scope"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "bots.setBotMenuButton": {
    "doc": "Sets the [menu button action »](https://core.telegram.org/api/bots/menu) for a given user or for all users",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User ID"
      },
      "button": {
        "type": "BotMenuButton",
        "doc": "Bot menu button action"
      }
    }
  },
  "bots.getBotMenuButton": {
    "doc": "Gets the menu button action for a given user or for all users, previously set using [bots.setBotMenuButton](https://core.telegram.org/method/bots.setBotMenuButton); users can see this information in the [botInfo](https://core.telegram.org/constructor/botInfo) constructor.",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "User ID or empty for the default menu button."
      }
    }
  },
  "bots.setBotBroadcastDefaultAdminRights": {
    "doc": "Set the default [suggested admin rights](https://core.telegram.org/api/rights#suggested-bot-rights) for bots being added as admins to channels, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights).",
    "parameters": {
      "admin_rights": {
        "type": "ChatAdminRights",
        "doc": "Admin rights"
      }
    }
  },
  "bots.setBotGroupDefaultAdminRights": {
    "doc": "Set the default [suggested admin rights](https://core.telegram.org/api/rights#suggested-bot-rights) for bots being added as admins to groups, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights).",
    "parameters": {
      "admin_rights": {
        "type": "ChatAdminRights",
        "doc": "Admin rights"
      }
    }
  },
  "bots.setBotInfo": {
    "doc": "Set localized name, about text and description of a bot (or of the current account, if called by a bot).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "bot": {
        "type": "flags.2?InputUser",
        "doc": "If called by a user, **must** contain the peer of a bot we own."
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code, if left empty update the fallback about text and description"
      },
      "name": {
        "type": "flags.3?string",
        "doc": "New bot name"
      },
      "about": {
        "type": "flags.0?string",
        "doc": "New about text"
      },
      "description": {
        "type": "flags.1?string",
        "doc": "New description"
      }
    }
  },
  "bots.getBotInfo": {
    "doc": "Get localized name, about text and description of a bot (or of the current account, if called by a bot).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "bot": {
        "type": "flags.0?InputUser",
        "doc": "If called by a user, **must** contain the peer of a bot we own."
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code, if left empty this method will return the fallback about text and description."
      }
    }
  },
  "bots.reorderUsernames": {
    "doc": "Reorder usernames associated to a bot we own.",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "The bot"
      },
      "order": {
        "type": "Vector<string>",
        "doc": "The new order for active usernames. All active usernames must be specified."
      }
    }
  },
  "bots.toggleUsername": {
    "doc": "Activate or deactivate a purchased [fragment.com](https://fragment.com) username associated to a bot we own.",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "The bot"
      },
      "username": {
        "type": "string",
        "doc": "Username"
      },
      "active": {
        "type": "Bool",
        "doc": "Whether to activate or deactivate it"
      }
    }
  },
  "bots.canSendMessage": {
    "doc": "Check whether the specified bot can send us messages",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "The bot"
      }
    }
  },
  "bots.allowSendMessage": {
    "doc": "Allow the specified bot to send us messages",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "The bot"
      }
    }
  },
  "bots.invokeWebViewCustomMethod": {
    "doc": "Send a custom request from a [mini bot app](https://core.telegram.org/api/bots/webapps), triggered by a [web\\_app\\_invoke\\_custom\\_method event »](https://core.telegram.org/api/web-events#web-app-invoke-custom-method).",
    "parameters": {
      "bot": {
        "type": "InputUser",
        "doc": "Identifier of the bot associated to the [mini bot app](https://core.telegram.org/api/bots/webapps)"
      },
      "custom_method": {
        "type": "string",
        "doc": "Identifier of the custom method to invoke"
      },
      "params": {
        "type": "DataJSON",
        "doc": "Method parameters"
      }
    }
  },
  "payments.getPaymentForm": {
    "doc": "Get a payment form",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "invoice": {
        "type": "InputInvoice",
        "doc": "Invoice"
      },
      "theme_params": {
        "type": "flags.0?DataJSON",
        "doc": "A JSON object with the following keys, containing color theme information (integers, RGB24) to pass to the payment provider, to apply in eventual verification pages:  \n`bg_color` - Background color  \n`text_color` - Text color  \n`hint_color` - Hint text color  \n`link_color` - Link color  \n`button_color` - Button color  \n`button_text_color` - Button text color"
      }
    }
  },
  "payments.getPaymentReceipt": {
    "doc": "Get payment receipt",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer where the payment receipt was sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID of receipt"
      }
    }
  },
  "payments.validateRequestedInfo": {
    "doc": "Submit requested order information for validation",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "save": {
        "type": "flags.0?true",
        "doc": "Save order information to re-use it for future orders"
      },
      "invoice": {
        "type": "InputInvoice",
        "doc": "Invoice"
      },
      "info": {
        "type": "PaymentRequestedInfo",
        "doc": "Requested order information"
      }
    }
  },
  "payments.sendPaymentForm": {
    "doc": "Send compiled payment form",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "form_id": {
        "type": "long",
        "doc": "Form ID"
      },
      "invoice": {
        "type": "InputInvoice",
        "doc": "Invoice"
      },
      "requested_info_id": {
        "type": "flags.0?string",
        "doc": "ID of saved and validated [order info](https://core.telegram.org/constructor/payments.validatedRequestedInfo)"
      },
      "shipping_option_id": {
        "type": "flags.1?string",
        "doc": "Chosen shipping option ID"
      },
      "credentials": {
        "type": "InputPaymentCredentials",
        "doc": "Payment credentials"
      },
      "tip_amount": {
        "type": "flags.2?long",
        "doc": "Tip, in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "payments.getSavedInfo": {
    "doc": "Get saved payment information",
    "parameters": {}
  },
  "payments.clearSavedInfo": {
    "doc": "Clear saved payment information",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "credentials": {
        "type": "flags.0?true",
        "doc": "Remove saved payment credentials"
      },
      "info": {
        "type": "flags.1?true",
        "doc": "Clear the last order settings saved by the user"
      }
    }
  },
  "payments.getBankCardData": {
    "doc": "Get info about a credit card",
    "parameters": {
      "number": {
        "type": "string",
        "doc": "Credit card number"
      }
    }
  },
  "payments.exportInvoice": {
    "doc": "Generate an [invoice deep link](https://core.telegram.org/api/links#invoice-links)",
    "parameters": {
      "invoice_media": {
        "type": "InputMedia",
        "doc": "Invoice"
      }
    }
  },
  "payments.assignAppStoreTransaction": {
    "doc": "Informs server about a purchase made through the App Store: for official applications only.",
    "parameters": {
      "receipt": {
        "type": "bytes",
        "doc": "Receipt"
      },
      "purpose": {
        "type": "InputStorePaymentPurpose",
        "doc": "Payment purpose"
      }
    }
  },
  "payments.assignPlayMarketTransaction": {
    "doc": "Informs server about a purchase made through the Play Store: for official applications only.",
    "parameters": {
      "receipt": {
        "type": "DataJSON",
        "doc": "Receipt"
      },
      "purpose": {
        "type": "InputStorePaymentPurpose",
        "doc": "Payment purpose"
      }
    }
  },
  "payments.canPurchasePremium": {
    "doc": "Checks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase, official apps only.",
    "parameters": {
      "purpose": {
        "type": "InputStorePaymentPurpose",
        "doc": "Payment purpose"
      }
    }
  },
  "payments.getPremiumGiftCodeOptions": {
    "doc": "Obtain a list of Telegram Premium [giveaway/gift code »](https://core.telegram.org/api/giveaways) options.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "boost_peer": {
        "type": "flags.0?InputPeer",
        "doc": "The channel that will start the giveaway"
      }
    }
  },
  "payments.checkGiftCode": {
    "doc": "Obtain information about a [Telegram Premium giftcode »](https://core.telegram.org/api/giveaways)",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "The giftcode to check"
      }
    }
  },
  "payments.applyGiftCode": {
    "doc": "Apply a [Telegram Premium giftcode »](https://core.telegram.org/api/giveaways)",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "The code to apply"
      }
    }
  },
  "payments.getGiveawayInfo": {
    "doc": "Obtain information about a [Telegram Premium giveaway »](https://core.telegram.org/api/giveaways).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer where the giveaway was posted."
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID of the [messageActionGiveawayLaunch](https://core.telegram.org/constructor/messageActionGiveawayLaunch) service message"
      }
    }
  },
  "payments.launchPrepaidGiveaway": {
    "doc": "Launch a [prepaid giveaway »](https://core.telegram.org/api/giveaways).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer where to launch the giveaway."
      },
      "giveaway_id": {
        "type": "long",
        "doc": "The prepaid giveaway ID."
      },
      "purpose": {
        "type": "InputStorePaymentPurpose",
        "doc": "Giveway parameters"
      }
    }
  },
  "stickers.createStickerSet": {
    "doc": "Create a stickerset, bots only.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "masks": {
        "type": "flags.0?true",
        "doc": "Whether this is a mask stickerset"
      },
      "animated": {
        "type": "flags.1?true",
        "doc": "Whether this is an animated stickerset"
      },
      "videos": {
        "type": "flags.4?true",
        "doc": "Whether this is a video stickerset"
      },
      "emojis": {
        "type": "flags.5?true",
        "doc": "Whether this is a [custom emoji](https://core.telegram.org/api/custom-emoji) stickerset."
      },
      "text_color": {
        "type": "flags.6?true",
        "doc": "Whether the color of TGS custom emojis contained in this set should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. For custom emoji stickersets only."
      },
      "user_id": {
        "type": "InputUser",
        "doc": "Stickerset owner"
      },
      "title": {
        "type": "string",
        "doc": "Stickerset name, `1-64` chars"
      },
      "short_name": {
        "type": "string",
        "doc": "Short name of sticker set, to be used in [sticker deep links »](https://core.telegram.org/api/links#stickerset-links). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and, **if called by a bot**, must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters."
      },
      "thumb": {
        "type": "flags.2?InputDocument",
        "doc": "Thumbnail"
      },
      "stickers": {
        "type": "Vector<InputStickerSetItem>",
        "doc": "Stickers"
      },
      "software": {
        "type": "flags.3?string",
        "doc": "Used when [importing stickers using the sticker import SDKs](https://core.telegram.org/import-stickers), specifies the name of the software that created the stickers"
      }
    }
  },
  "stickers.removeStickerFromSet": {
    "doc": "Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.",
    "parameters": {
      "sticker": {
        "type": "InputDocument",
        "doc": "The sticker to remove"
      }
    }
  },
  "stickers.changeStickerPosition": {
    "doc": "Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot",
    "parameters": {
      "sticker": {
        "type": "InputDocument",
        "doc": "The sticker"
      },
      "position": {
        "type": "int",
        "doc": "The new position of the sticker, zero-based"
      }
    }
  },
  "stickers.addStickerToSet": {
    "doc": "Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "The stickerset"
      },
      "sticker": {
        "type": "InputStickerSetItem",
        "doc": "The sticker"
      }
    }
  },
  "stickers.setStickerSetThumb": {
    "doc": "Set stickerset thumbnail",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Stickerset"
      },
      "thumb": {
        "type": "flags.0?InputDocument",
        "doc": "Thumbnail (only for normal stickersets, not custom emoji stickersets)."
      },
      "thumb_document_id": {
        "type": "flags.1?long",
        "doc": "Only for [custom emoji stickersets](https://core.telegram.org/api/custom-emoji), ID of a custom emoji present in the set to use as thumbnail; pass 0 to fallback to the first custom emoji of the set."
      }
    }
  },
  "stickers.checkShortName": {
    "doc": "Check whether the given short name is available",
    "parameters": {
      "short_name": {
        "type": "string",
        "doc": "Short name"
      }
    }
  },
  "stickers.suggestShortName": {
    "doc": "Suggests a short name for a given stickerpack name",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "Sticker pack name"
      }
    }
  },
  "stickers.changeSticker": {
    "doc": "Update the keywords, emojis or [mask coordinates](https://core.telegram.org/api/stickers#mask-stickers) of a sticker, bots only.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "sticker": {
        "type": "InputDocument",
        "doc": "The sticker"
      },
      "emoji": {
        "type": "flags.0?string",
        "doc": "If set, updates the emoji list associated to the sticker"
      },
      "mask_coords": {
        "type": "flags.1?MaskCoords",
        "doc": "If set, updates the [mask coordinates](https://core.telegram.org/api/stickers#mask-stickers)"
      },
      "keywords": {
        "type": "flags.2?string",
        "doc": "If set, updates the sticker keywords (separated by commas). Can't be provided for mask stickers."
      }
    }
  },
  "stickers.renameStickerSet": {
    "doc": "Renames a stickerset, bots only.",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Stickerset to rename"
      },
      "title": {
        "type": "string",
        "doc": "New stickerset title"
      }
    }
  },
  "stickers.deleteStickerSet": {
    "doc": "Deletes a stickerset we created, bots only.",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Stickerset to delete"
      }
    }
  },
  "phone.getCallConfig": {
    "doc": "Get phone call configuration to be passed to libtgvoip's shared config",
    "parameters": {}
  },
  "phone.requestCall": {
    "doc": "Start a telegram phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "video": {
        "type": "flags.0?true",
        "doc": "Whether to start a video call"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "Destination of the phone call"
      },
      "random_id": {
        "type": "int",
        "doc": "Random ID to avoid resending the same object"
      },
      "g_a_hash": {
        "type": "bytes",
        "doc": "[Parameter for E2E encryption key exchange »](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Phone call settings"
      }
    }
  },
  "phone.acceptCall": {
    "doc": "Accept incoming call",
    "parameters": {
      "peer": {
        "type": "InputPhoneCall",
        "doc": "The call to accept"
      },
      "g_b": {
        "type": "bytes",
        "doc": "[Parameter for E2E encryption key exchange »](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Phone call settings"
      }
    }
  },
  "phone.confirmCall": {
    "doc": "[Complete phone call E2E encryption key exchange »](https://core.telegram.org/api/end-to-end/voice-calls)",
    "parameters": {
      "peer": {
        "type": "InputPhoneCall",
        "doc": "The phone call"
      },
      "g_a": {
        "type": "bytes",
        "doc": "[Parameter for E2E encryption key exchange »](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "key_fingerprint": {
        "type": "long",
        "doc": "Key fingerprint"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Phone call settings"
      }
    }
  },
  "phone.receivedCall": {
    "doc": "Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.",
    "parameters": {
      "peer": {
        "type": "InputPhoneCall",
        "doc": "The phone call we're currently in"
      }
    }
  },
  "phone.discardCall": {
    "doc": "Refuse or end running call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "video": {
        "type": "flags.0?true",
        "doc": "Whether this is a video call"
      },
      "peer": {
        "type": "InputPhoneCall",
        "doc": "The phone call"
      },
      "duration": {
        "type": "int",
        "doc": "Call duration"
      },
      "reason": {
        "type": "PhoneCallDiscardReason",
        "doc": "Why was the call discarded"
      },
      "connection_id": {
        "type": "long",
        "doc": "Preferred libtgvoip relay ID"
      }
    }
  },
  "phone.setCallRating": {
    "doc": "Rate a call, returns info about the rating message sent to the official VoIP bot.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "user_initiative": {
        "type": "flags.0?true",
        "doc": "Whether the user decided on their own initiative to rate the call"
      },
      "peer": {
        "type": "InputPhoneCall",
        "doc": "The call to rate"
      },
      "rating": {
        "type": "int",
        "doc": "Rating in `1-5` stars"
      },
      "comment": {
        "type": "string",
        "doc": "An additional comment"
      }
    }
  },
  "phone.saveCallDebug": {
    "doc": "Send phone call debug data to server",
    "parameters": {
      "peer": {
        "type": "InputPhoneCall",
        "doc": "Phone call"
      },
      "debug": {
        "type": "DataJSON",
        "doc": "Debug statistics obtained from libtgvoip"
      }
    }
  },
  "phone.sendSignalingData": {
    "doc": "Send VoIP signaling data",
    "parameters": {
      "peer": {
        "type": "InputPhoneCall",
        "doc": "Phone call"
      },
      "data": {
        "type": "bytes",
        "doc": "Signaling payload"
      }
    }
  },
  "phone.createGroupCall": {
    "doc": "Create a group call or livestream",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "rtmp_stream": {
        "type": "flags.2?true",
        "doc": "Whether RTMP stream support should be enabled: only the [group/supergroup/channel](https://core.telegram.org/api/channel) owner can use this flag."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Associate the group call or livestream to the provided [group/supergroup/channel](https://core.telegram.org/api/channel)"
      },
      "random_id": {
        "type": "int",
        "doc": "Unique client message ID required to prevent creation of duplicate group calls"
      },
      "title": {
        "type": "flags.0?string",
        "doc": "Call title"
      },
      "schedule_date": {
        "type": "flags.1?int",
        "doc": "For scheduled group call or livestreams, the absolute date when the group call will start"
      }
    }
  },
  "phone.joinGroupCall": {
    "doc": "Join a group call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "muted": {
        "type": "flags.0?true",
        "doc": "If set, the user will be muted by default upon joining."
      },
      "video_stopped": {
        "type": "flags.2?true",
        "doc": "If set, the user's video will be disabled by default upon joining."
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "join_as": {
        "type": "InputPeer",
        "doc": "Join the group call, presenting yourself as the specified user/channel"
      },
      "invite_hash": {
        "type": "flags.1?string",
        "doc": "The invitation hash from the [invite link »](https://core.telegram.org/api/links#video-chat-livestream-links), if provided allows speaking in a livestream or muted group chat."
      },
      "params": {
        "type": "DataJSON",
        "doc": "WebRTC parameters"
      }
    }
  },
  "phone.leaveGroupCall": {
    "doc": "Leave a group call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "source": {
        "type": "int",
        "doc": "Your source ID"
      }
    }
  },
  "phone.inviteToGroupCall": {
    "doc": "Invite a set of users to a group call.",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "users": {
        "type": "Vector<InputUser>",
        "doc": "The users to invite."
      }
    }
  },
  "phone.discardGroupCall": {
    "doc": "Terminate a group call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call to terminate"
      }
    }
  },
  "phone.toggleGroupCallSettings": {
    "doc": "Change group call settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "reset_invite_hash": {
        "type": "flags.1?true",
        "doc": "Invalidate existing invite links"
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      },
      "join_muted": {
        "type": "flags.0?Bool",
        "doc": "Whether all users will that join this group call are muted by default upon joining the group call"
      }
    }
  },
  "phone.getGroupCall": {
    "doc": "Get info about a group call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "phone.getGroupParticipants": {
    "doc": "Get group call participants",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      },
      "ids": {
        "type": "Vector<InputPeer>",
        "doc": "If specified, will fetch group participant info about the specified peers"
      },
      "sources": {
        "type": "Vector<int>",
        "doc": "If specified, will fetch group participant info about the specified WebRTC source IDs"
      },
      "offset": {
        "type": "string",
        "doc": "Offset for results, taken from the `next_offset` field of [phone.groupParticipants](https://core.telegram.org/constructor/phone.groupParticipants), initially an empty string.  \nNote: if no more results are available, the method call will return an empty `next_offset`; thus, avoid providing the `next_offset` returned in [phone.groupParticipants](https://core.telegram.org/constructor/phone.groupParticipants) if it is empty, to avoid an infinite loop."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "phone.checkGroupCall": {
    "doc": "Check whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs.  \nReturns an intersection of the source IDs specified in `sources`, and the source IDs currently being forwarded by the SFU.",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      },
      "sources": {
        "type": "Vector<int>",
        "doc": "Source IDs"
      }
    }
  },
  "phone.toggleGroupCallRecord": {
    "doc": "Start or stop recording a group call: the recorded audio and video streams will be automatically sent to `Saved messages` (the chat with ourselves).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "start": {
        "type": "flags.0?true",
        "doc": "Whether to start or stop recording"
      },
      "video": {
        "type": "flags.2?true",
        "doc": "Whether to also record video streams"
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call or livestream"
      },
      "title": {
        "type": "flags.1?string",
        "doc": "Recording title"
      },
      "video_portrait": {
        "type": "flags.2?Bool",
        "doc": "If video stream recording is enabled, whether to record in portrait or landscape mode"
      }
    }
  },
  "phone.editGroupCallParticipant": {
    "doc": "Edit information about a given group call participant",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "participant": {
        "type": "InputPeer",
        "doc": "The group call participant (can also be the user itself)"
      },
      "muted": {
        "type": "flags.0?Bool",
        "doc": "Whether to mute or unmute the specified participant"
      },
      "volume": {
        "type": "flags.1?int",
        "doc": "New volume"
      },
      "raise_hand": {
        "type": "flags.2?Bool",
        "doc": "Raise or lower hand"
      },
      "video_stopped": {
        "type": "flags.3?Bool",
        "doc": "Start or stop the video stream"
      },
      "video_paused": {
        "type": "flags.4?Bool",
        "doc": "Pause or resume the video stream"
      },
      "presentation_paused": {
        "type": "flags.5?Bool",
        "doc": "Pause or resume the screen sharing stream"
      }
    }
  },
  "phone.editGroupCallTitle": {
    "doc": "Edit the title of a group call or livestream",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      },
      "title": {
        "type": "string",
        "doc": "New title"
      }
    }
  },
  "phone.getGroupCallJoinAs": {
    "doc": "Get a list of peers that can be used to join a group call, presenting yourself as a specific user/channel.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The dialog whose group call or livestream we're trying to join"
      }
    }
  },
  "phone.exportGroupCallInvite": {
    "doc": "Get an [invite link](https://core.telegram.org/api/links#video-chat-livestream-links) for a group call or livestream",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_self_unmute": {
        "type": "flags.0?true",
        "doc": "For livestreams or muted group chats, if set, users that join using this link will be able to speak without explicitly requesting permission by (for example by raising their hand)."
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      }
    }
  },
  "phone.toggleGroupCallStartSubscription": {
    "doc": "Subscribe or unsubscribe to a scheduled group call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Scheduled group call"
      },
      "subscribed": {
        "type": "Bool",
        "doc": "Enable or disable subscription"
      }
    }
  },
  "phone.startScheduledGroupCall": {
    "doc": "Start a scheduled group call.",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The scheduled group call"
      }
    }
  },
  "phone.saveDefaultGroupCallJoinAs": {
    "doc": "Set the default peer that will be used to join a group call in a specific dialog.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The dialog"
      },
      "join_as": {
        "type": "InputPeer",
        "doc": "The default peer that will be used to join group calls in this dialog, presenting yourself as a specific user/channel."
      }
    }
  },
  "phone.joinGroupCallPresentation": {
    "doc": "Start screen sharing in a call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "params": {
        "type": "DataJSON",
        "doc": "WebRTC parameters"
      }
    }
  },
  "phone.leaveGroupCallPresentation": {
    "doc": "Stop screen sharing in a group call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      }
    }
  },
  "phone.getGroupCallStreamChannels": {
    "doc": "Get info about RTMP streams in a group call or livestream.  \nThis method should be invoked to the same group/channel-related DC used for [downloading livestream chunks](https://core.telegram.org/api/files#downloading-files).  \nAs usual, the media DC is preferred, if available.",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call or livestream"
      }
    }
  },
  "phone.getGroupCallStreamRtmpUrl": {
    "doc": "Get RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with [phone.createGroupCall](https://core.telegram.org/method/phone.createGroupCall) (the `rtmp_stream` flag must be set).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer to livestream into"
      },
      "revoke": {
        "type": "Bool",
        "doc": "Whether to revoke the previous stream key or simply return the existing one"
      }
    }
  },
  "phone.saveCallLog": {
    "doc": "Save phone call debug information",
    "parameters": {
      "peer": {
        "type": "InputPhoneCall",
        "doc": "Phone call"
      },
      "file": {
        "type": "InputFile",
        "doc": "Logs"
      }
    }
  },
  "langpack.getLangPack": {
    "doc": "Get localization pack strings",
    "parameters": {
      "lang_pack": {
        "type": "string",
        "doc": "Language pack name, usually obtained from a [language pack link](https://core.telegram.org/api/links#language-pack-links)"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "langpack.getStrings": {
    "doc": "Get strings from a language pack",
    "parameters": {
      "lang_pack": {
        "type": "string",
        "doc": "Language pack name, usually obtained from a [language pack link](https://core.telegram.org/api/links#language-pack-links)"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      },
      "keys": {
        "type": "Vector<string>",
        "doc": "Strings to get"
      }
    }
  },
  "langpack.getDifference": {
    "doc": "Get new strings in language pack",
    "parameters": {
      "lang_pack": {
        "type": "string",
        "doc": "Language pack"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      },
      "from_version": {
        "type": "int",
        "doc": "Previous localization pack version"
      }
    }
  },
  "langpack.getLanguages": {
    "doc": "Get information about all languages in a localization pack",
    "parameters": {
      "lang_pack": {
        "type": "string",
        "doc": "Language pack"
      }
    }
  },
  "langpack.getLanguage": {
    "doc": "Get information about a language in a localization pack",
    "parameters": {
      "lang_pack": {
        "type": "string",
        "doc": "Language pack name, usually obtained from a [language pack link](https://core.telegram.org/api/links#language-pack-links)"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "folders.editPeerFolders": {
    "doc": "Edit peers in [peer folder](https://core.telegram.org/api/folders#peer-folders)",
    "parameters": {
      "folder_peers": {
        "type": "Vector<InputFolderPeer>",
        "doc": "New peer list"
      }
    }
  },
  "stats.getBroadcastStats": {
    "doc": "Get [channel statistics](https://core.telegram.org/api/stats)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "dark": {
        "type": "flags.0?true",
        "doc": "Whether to enable dark theme for graph colors"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "The channel"
      }
    }
  },
  "stats.loadAsyncGraph": {
    "doc": "Load [channel statistics graph](https://core.telegram.org/api/stats) asynchronously",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "token": {
        "type": "string",
        "doc": "Graph token from [statsGraphAsync](https://core.telegram.org/constructor/statsGraphAsync) constructor"
      },
      "x": {
        "type": "flags.0?long",
        "doc": "Zoom value, if required"
      }
    }
  },
  "stats.getMegagroupStats": {
    "doc": "Get [supergroup statistics](https://core.telegram.org/api/stats)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "dark": {
        "type": "flags.0?true",
        "doc": "Whether to enable dark theme for graph colors"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "[Supergroup ID](https://core.telegram.org/api/channel)"
      }
    }
  },
  "stats.getMessagePublicForwards": {
    "doc": "Obtains a list of messages, indicating to which other public channels was a channel message forwarded.  \nWill return a list of [messages](https://core.telegram.org/constructor/message) with `peer_id` equal to the public channel to which this message was forwarded.",
    "parameters": {
      "channel": {
        "type": "InputChannel",
        "doc": "Source channel"
      },
      "msg_id": {
        "type": "int",
        "doc": "Source message ID"
      },
      "offset": {
        "type": "string",
        "doc": "Offset for [pagination](https://core.telegram.org/api/offsets), empty string on first call, then use the `next_offset` field of the returned constructor (if present, otherwise no more results are available)."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "stats.getMessageStats": {
    "doc": "Get [message statistics](https://core.telegram.org/api/stats)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "dark": {
        "type": "flags.0?true",
        "doc": "Whether to enable dark theme for graph colors"
      },
      "channel": {
        "type": "InputChannel",
        "doc": "Channel ID"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      }
    }
  },
  "stats.getStoryStats": {
    "doc": "Get [statistics](https://core.telegram.org/api/stats) for a certain [story](https://core.telegram.org/api/stories).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "dark": {
        "type": "flags.0?true",
        "doc": "Whether to enable the dark theme for graph colors"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer that posted the story"
      },
      "id": {
        "type": "int",
        "doc": "Story ID"
      }
    }
  },
  "stats.getStoryPublicForwards": {
    "doc": "Obtain forwards of a [story](https://core.telegram.org/api/stories) as a message to public chats and reposts by public channels.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the story was originally posted"
      },
      "id": {
        "type": "int",
        "doc": "[Story](https://core.telegram.org/api/stories) ID"
      },
      "offset": {
        "type": "string",
        "doc": "Offset for pagination, from [stats.PublicForwards](https://core.telegram.org/constructor/stats.publicForwards).`next_offset`."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "chatlists.exportChatlistInvite": {
    "doc": "Export a [folder »](https://core.telegram.org/api/folders), creating a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "The folder to export"
      },
      "title": {
        "type": "string",
        "doc": "An optional name for the link"
      },
      "peers": {
        "type": "Vector<InputPeer>",
        "doc": "The list of channels, group and supergroups to share with the link. Basic groups will automatically be [converted to supergroups](https://core.telegram.org/api/channel#migration) when invoking the method."
      }
    }
  },
  "chatlists.deleteExportedInvite": {
    "doc": "Delete a previously created [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "The related folder"
      },
      "slug": {
        "type": "string",
        "doc": "`slug` obtained from the [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      }
    }
  },
  "chatlists.editExportedInvite": {
    "doc": "Edit a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "chatlist": {
        "type": "InputChatlist",
        "doc": "Folder ID"
      },
      "slug": {
        "type": "string",
        "doc": "`slug` obtained from the [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "title": {
        "type": "flags.1?string",
        "doc": "If set, sets a new name for the link"
      },
      "peers": {
        "type": "flags.2?Vector<InputPeer>",
        "doc": "If set, changes the list of peers shared with the link"
      }
    }
  },
  "chatlists.getExportedInvites": {
    "doc": "List all [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links) associated to a folder",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "The folder"
      }
    }
  },
  "chatlists.checkChatlistInvite": {
    "doc": "Obtain information about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "`slug` obtained from the [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)"
      }
    }
  },
  "chatlists.joinChatlistInvite": {
    "doc": "Import a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links), joining some or all the chats in the folder.",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "`slug` obtained from a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "peers": {
        "type": "Vector<InputPeer>",
        "doc": "List of new chats to join, fetched using [chatlists.checkChatlistInvite](https://core.telegram.org/method/chatlists.checkChatlistInvite) and filtered as specified in the [documentation »](https://core.telegram.org/api/folders#shared-folders)."
      }
    }
  },
  "chatlists.getChatlistUpdates": {
    "doc": "Fetch new chats associated with an imported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). Must be invoked at most every `chatlist_update_period` seconds (as per the related [client configuration parameter »](https://core.telegram.org/api/config#chatlist-update-period)).",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "The folder"
      }
    }
  },
  "chatlists.joinChatlistUpdates": {
    "doc": "Join channels and supergroups recently added to a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "The folder"
      },
      "peers": {
        "type": "Vector<InputPeer>",
        "doc": "List of new chats to join, fetched using [chatlists.getChatlistUpdates](https://core.telegram.org/method/chatlists.getChatlistUpdates) and filtered as specified in the [documentation »](https://core.telegram.org/api/folders#shared-folders)."
      }
    }
  },
  "chatlists.hideChatlistUpdates": {
    "doc": "Dismiss new pending peers recently added to a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "The folder"
      }
    }
  },
  "chatlists.getLeaveChatlistSuggestions": {
    "doc": "Returns identifiers of pinned or always included chats from a chat folder imported using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links), which are suggested to be left when the chat folder is deleted.",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "Folder ID"
      }
    }
  },
  "chatlists.leaveChatlist": {
    "doc": "Delete a folder imported using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)",
    "parameters": {
      "chatlist": {
        "type": "InputChatlist",
        "doc": "Folder ID"
      },
      "peers": {
        "type": "Vector<InputPeer>",
        "doc": "Also leave the specified channels and groups"
      }
    }
  },
  "stories.canSendStory": {
    "doc": "Check whether we can post stories as the specified peer.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer from which we wish to post stories."
      }
    }
  },
  "stories.sendStory": {
    "doc": "Uploads a [Telegram Story](https://core.telegram.org/api/stories).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.2?true",
        "doc": "Whether to add the story to the profile automatically upon expiration. If not set, the story will only be added to the archive, see [here »](https://core.telegram.org/api/stories) for more info."
      },
      "noforwards": {
        "type": "flags.4?true",
        "doc": "If set, disables forwards, screenshots, and downloads."
      },
      "fwd_modified": {
        "type": "flags.7?true",
        "doc": "Set this flag when reposting stories with `fwd_from_id`+`fwd_from_id`, if the `media` was modified before reposting."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer to send the story as."
      },
      "media": {
        "type": "InputMedia",
        "doc": "The story media."
      },
      "media_areas": {
        "type": "flags.5?Vector<MediaArea>",
        "doc": "[Media areas](https://core.telegram.org/api/stories#media-areas) associated to the story, see [here »](https://core.telegram.org/api/stories#media-areas) for more info."
      },
      "caption": {
        "type": "flags.0?string",
        "doc": "Story caption."
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities), if allowed by the [`stories_entities` client configuration parameter »](https://core.telegram.org/api/config#stories-entities)."
      },
      "privacy_rules": {
        "type": "Vector<InputPrivacyRule>",
        "doc": "[Privacy rules](https://core.telegram.org/api/privacy) for the story, indicating who can or can't view the story."
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client message ID required to prevent message resending."
      },
      "period": {
        "type": "flags.3?int",
        "doc": "Period after which the story is moved to archive (and to the profile if `pinned` is set), in seconds; must be one of `6 * 3600`, `12 * 3600`, `86400`, or `2 * 86400` for Telegram Premium users, and `86400` otherwise."
      },
      "fwd_from_id": {
        "type": "flags.6?InputPeer",
        "doc": "If set, indicates that this story is a repost of story with ID `fwd_from_story` posted by the peer in `fwd_from_id`."
      },
      "fwd_from_story": {
        "type": "flags.6?int",
        "doc": "If set, indicates that this story is a repost of story with ID `fwd_from_story` posted by the peer in `fwd_from_id`."
      }
    }
  },
  "stories.editStory": {
    "doc": "Edit an uploaded [story](https://core.telegram.org/api/stories)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the story was posted."
      },
      "id": {
        "type": "int",
        "doc": "ID of story to edit."
      },
      "media": {
        "type": "flags.0?InputMedia",
        "doc": "If specified, replaces the story media."
      },
      "media_areas": {
        "type": "flags.3?Vector<MediaArea>",
        "doc": "[Media areas](https://core.telegram.org/api/stories#media-areas) associated to the story, see [here »](https://core.telegram.org/api/stories#media-areas) for more info."
      },
      "caption": {
        "type": "flags.1?string",
        "doc": "If specified, replaces the story caption."
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text in the caption](https://core.telegram.org/api/entities), if allowed by the [`stories_entities` client configuration parameter »](https://core.telegram.org/api/config#stories-entities)."
      },
      "privacy_rules": {
        "type": "flags.2?Vector<InputPrivacyRule>",
        "doc": "If specified, alters the [privacy settings »](https://core.telegram.org/api/privacy) of the story, changing who can or can't view the story."
      }
    }
  },
  "stories.deleteStories": {
    "doc": "Deletes some posted [stories](https://core.telegram.org/api/stories).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Channel/user from where to delete stories."
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of stories to delete."
      }
    }
  },
  "stories.togglePinned": {
    "doc": "Pin or unpin one or more stories",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where to pin or unpin stories"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of stories to pin or unpin"
      },
      "pinned": {
        "type": "Bool",
        "doc": "Whether to pin or unpin the stories"
      }
    }
  },
  "stories.getAllStories": {
    "doc": "Fetch the List of active (or active and hidden) stories, see [here »](https://core.telegram.org/api/stories#watching-stories) for more info on watching stories.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "next": {
        "type": "flags.1?true",
        "doc": "If `next` and `state` are both set, uses the passed `state` to paginate to the next results; if neither `state` nor `next` are set, fetches the initial page; if `state` is set and `next` is not set, check for changes in the active/hidden peerset, see [here »](https://core.telegram.org/api/stories#watching-stories) for more info on the full flow."
      },
      "hidden": {
        "type": "flags.2?true",
        "doc": "If set, fetches the hidden active story list, otherwise fetches the active story list, see [here »](https://core.telegram.org/api/stories#watching-stories) for more info on the full flow."
      },
      "state": {
        "type": "flags.0?string",
        "doc": "If `next` and `state` are both set, uses the passed `state` to paginate to the next results; if neither `state` nor `next` are set, fetches the initial page; if `state` is set and `next` is not set, check for changes in the active/hidden peerset, see [here »](https://core.telegram.org/api/stories#watching-stories) for more info on the full flow."
      }
    }
  },
  "stories.getPinnedStories": {
    "doc": "Fetch the [stories](https://core.telegram.org/api/stories#pinned-or-archived-stories) pinned on a peer's profile.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer whose pinned stories should be fetched"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "stories.getStoriesArchive": {
    "doc": "Fetch the [story archive »](https://core.telegram.org/api/stories#pinned-or-archived-stories) of a peer we control.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer whose archived stories should be fetched"
      },
      "offset_id": {
        "type": "int",
        "doc": "[Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "stories.getStoriesByID": {
    "doc": "Obtain full info about a set of [stories](https://core.telegram.org/api/stories) by their IDs.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the stories were posted"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Story IDs"
      }
    }
  },
  "stories.toggleAllStoriesHidden": {
    "doc": "Hide the active stories of a specific peer, preventing them from being displayed on the action bar on the homescreen.",
    "parameters": {
      "hidden": {
        "type": "Bool",
        "doc": "Whether to hide or unhide all active stories of the peer"
      }
    }
  },
  "stories.readStories": {
    "doc": "Mark all stories up to a certain ID as read, for a given peer; will emit an [updateReadStories](https://core.telegram.org/constructor/updateReadStories) update to all logged-in sessions.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer whose stories should be marked as read."
      },
      "max_id": {
        "type": "int",
        "doc": "Mark all stories up to and including this ID as read"
      }
    }
  },
  "stories.incrementStoryViews": {
    "doc": "Increment the view counter of one or more stories.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the stories were posted."
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of the stories (maximum 200 at a time)."
      }
    }
  },
  "stories.getStoryViewsList": {
    "doc": "Obtain the list of users that have viewed a specific [story we posted](https://core.telegram.org/api/stories)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "just_contacts": {
        "type": "flags.0?true",
        "doc": "Whether to only fetch view reaction/views made by our [contacts](https://core.telegram.org/api/contacts)"
      },
      "reactions_first": {
        "type": "flags.2?true",
        "doc": "Whether to return [storyView](https://core.telegram.org/constructor/storyView) info about users that reacted to the story (i.e. if set, the server will first sort results by view date as usual, and then also additionally sort the list by putting [storyView](https://core.telegram.org/constructor/storyView)s with an associated reaction first in the list). Ignored if `forwards_first` is set."
      },
      "forwards_first": {
        "type": "flags.3?true",
        "doc": "If set, returns forwards and reposts first, then reactions, then other views; otherwise returns interactions sorted just by interaction date."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the story was posted"
      },
      "q": {
        "type": "flags.1?string",
        "doc": "Search for specific peers"
      },
      "id": {
        "type": "int",
        "doc": "Story ID"
      },
      "offset": {
        "type": "string",
        "doc": "Offset for pagination, obtained from [stories.storyViewsList](https://core.telegram.org/constructor/stories.storyViewsList).`next_offset`"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "stories.getStoriesViews": {
    "doc": "Obtain info about the view count, forward count, reactions and recent viewers of one or more [stories](https://core.telegram.org/api/stories).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer whose stories should be fetched"
      },
      "id": {
        "type": "Vector<int>",
        "doc": "Story IDs"
      }
    }
  },
  "stories.exportStoryLink": {
    "doc": "Generate a [story deep link](https://core.telegram.org/api/links#story-links) for a specific story",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the story was posted"
      },
      "id": {
        "type": "int",
        "doc": "Story ID"
      }
    }
  },
  "stories.report": {
    "doc": "Report a story.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer that uploaded the story."
      },
      "id": {
        "type": "Vector<int>",
        "doc": "IDs of the stories to report."
      },
      "reason": {
        "type": "ReportReason",
        "doc": "Why are these storeis being reported."
      },
      "message": {
        "type": "string",
        "doc": "Comment for report moderation"
      }
    }
  },
  "stories.activateStealthMode": {
    "doc": "Activates [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode), see [here »](https://core.telegram.org/api/stories#stealth-mode) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "past": {
        "type": "flags.0?true",
        "doc": "Whether to erase views from any stories opened in the past [`stories_stealth_past_period` seconds »](https://core.telegram.org/api/config#stories-stealth-past-period), as specified by the [client configuration](https://core.telegram.org/api/config#client-configuration)."
      },
      "future": {
        "type": "flags.1?true",
        "doc": "Whether to hide future story views for the next [`stories_stealth_future_period` seconds »](https://core.telegram.org/api/config#stories-stealth-future-period), as specified by the [client configuration](https://core.telegram.org/api/config#client-configuration)."
      }
    }
  },
  "stories.sendReaction": {
    "doc": "React to a story.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "add_to_recent": {
        "type": "flags.0?true",
        "doc": "Whether to add this reaction to the [recent reactions list »](https://core.telegram.org/api/reactions#recent-reactions)."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer that sent the story"
      },
      "story_id": {
        "type": "int",
        "doc": "ID of the story to react to"
      },
      "reaction": {
        "type": "Reaction",
        "doc": "Reaction"
      }
    }
  },
  "stories.getPeerStories": {
    "doc": "Fetch the full active [story list](https://core.telegram.org/api/stories#watching-stories) of a specific peer.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer whose stories should be fetched"
      }
    }
  },
  "stories.getAllReadPeerStories": {
    "doc": "Obtain the latest read story ID for all peers when first logging in, returned as a list of [updateReadStories](https://core.telegram.org/constructor/updateReadStories) updates, see [here »](https://core.telegram.org/api/stories#watching-stories) for more info.",
    "parameters": {}
  },
  "stories.getPeerMaxIDs": {
    "doc": "Get the IDs of the maximum read stories for a set of peers.",
    "parameters": {
      "id": {
        "type": "Vector<InputPeer>",
        "doc": "Peers"
      }
    }
  },
  "stories.getChatsToSend": {
    "doc": "Obtain a list of channels where the user can post [stories](https://core.telegram.org/api/stories)",
    "parameters": {}
  },
  "stories.togglePeerStoriesHidden": {
    "doc": "Hide the active stories of a user, preventing them from being displayed on the action bar on the homescreen, see [here »](https://core.telegram.org/api/stories#hiding-stories-of-other-users) for more info.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer whose stories should be (un)hidden."
      },
      "hidden": {
        "type": "Bool",
        "doc": "Whether to hide or unhide stories."
      }
    }
  },
  "stories.getStoryReactionsList": {
    "doc": "Get the [reaction](https://core.telegram.org/api/reactions) and interaction list of a [story](https://core.telegram.org/api/stories) posted to a channel, along with the sender of each reaction.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "forwards_first": {
        "type": "flags.2?true",
        "doc": "If set, returns forwards and reposts first, then reactions, then other views; otherwise returns interactions sorted just by interaction date."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "Channel"
      },
      "id": {
        "type": "int",
        "doc": "[Story](https://core.telegram.org/api/stories) ID"
      },
      "reaction": {
        "type": "flags.0?Reaction",
        "doc": "Get only reactions of this type"
      },
      "offset": {
        "type": "flags.1?string",
        "doc": "Offset for pagination (taken from the `next_offset` field of the returned [stories.StoryReactionsList](https://core.telegram.org/type/stories.StoryReactionsList)); empty in the first request."
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "premium.getBoostsList": {
    "doc": "Obtains info about the boosts that were applied to a certain channel (admins only)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "gifts": {
        "type": "flags.0?true",
        "doc": "Whether to return only info about boosts received from [gift codes and giveaways created by the channel »](https://core.telegram.org/api/giveaways)"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The channel"
      },
      "offset": {
        "type": "string",
        "doc": "Offset for pagination, obtained from [premium.boostsList](https://core.telegram.org/constructor/premium.boostsList).`next_offset`"
      },
      "limit": {
        "type": "int",
        "doc": "Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)"
      }
    }
  },
  "premium.getMyBoosts": {
    "doc": "Obtain which peers are we currently [boosting](https://core.telegram.org/api/boost), and how many [boost slots](https://core.telegram.org/api/boost) we have left.",
    "parameters": {}
  },
  "premium.applyBoost": {
    "doc": "Apply one or more [boosts »](https://core.telegram.org/api/boost) to a peer.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "slots": {
        "type": "flags.0?Vector<int>",
        "doc": "Which [boost slots](https://core.telegram.org/api/boost) to assign to this peer."
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer to boost."
      }
    }
  },
  "premium.getBoostsStatus": {
    "doc": "Gets the current [number of boosts](https://core.telegram.org/api/boost) of a channel.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The peer."
      }
    }
  },
  "premium.getUserBoosts": {
    "doc": "Returns the lists of boost that were applied to a channel by a specific user (admins only)",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The channel"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "The user"
      }
    }
  }
}
