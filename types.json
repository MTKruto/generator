{
  "boolFalse": {
    "doc": "Constructor may be interpreted as a **boolean**`false` value.",
    "parameters": {}
  },
  "boolTrue": {
    "doc": "The constructor can be interpreted as a **boolean**`true` value.",
    "parameters": {}
  },
  "true": {
    "doc": "See [predefined identifiers](https://core.telegram.org/mtproto/TL-formal#predefined-identifiers).",
    "parameters": {}
  },
  "vector": {
    "doc": "A universal vector constructor.",
    "parameters": {}
  },
  "error": {
    "doc": "Error.",
    "parameters": {
      "code": {
        "type": "int",
        "doc": "Error code"
      },
      "text": {
        "type": "string",
        "doc": "Message"
      }
    }
  },
  "null": {
    "doc": "Corresponds to an arbitrary empty object.",
    "parameters": {}
  },
  "inputPeerEmpty": {
    "doc": "An empty constructor, no user or chat is defined.",
    "parameters": {}
  },
  "inputPeerSelf": {
    "doc": "Defines the current user.",
    "parameters": {}
  },
  "inputPeerChat": {
    "doc": "Defines a chat for further interaction.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat identifier"
      }
    }
  },
  "inputPeerUser": {
    "doc": "Defines a user for further interaction.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "access_hash": {
        "type": "long",
        "doc": "**access\\_hash** value from the [user](https://core.telegram.org/constructor/user) constructor"
      }
    }
  },
  "inputPeerChannel": {
    "doc": "Defines a channel for further interaction.",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel identifier"
      },
      "access_hash": {
        "type": "long",
        "doc": "**access\\_hash** value from the [channel](https://core.telegram.org/constructor/channel) constructor"
      }
    }
  },
  "inputPeerUserFromMessage": {
    "doc": "Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where the user was seen"
      },
      "msg_id": {
        "type": "int",
        "doc": "The message ID"
      },
      "user_id": {
        "type": "long",
        "doc": "The identifier of the user that was seen"
      }
    }
  },
  "inputPeerChannelFromMessage": {
    "doc": "Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where the channel's message was seen"
      },
      "msg_id": {
        "type": "int",
        "doc": "The message ID"
      },
      "channel_id": {
        "type": "long",
        "doc": "The identifier of the channel that was seen"
      }
    }
  },
  "inputUserEmpty": {
    "doc": "Empty constructor, does not define a user.",
    "parameters": {}
  },
  "inputUserSelf": {
    "doc": "Defines the current user.",
    "parameters": {}
  },
  "inputUser": {
    "doc": "Defines a user for further interaction.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "access_hash": {
        "type": "long",
        "doc": "**access\\_hash** value from the [user](https://core.telegram.org/constructor/user) constructor"
      }
    }
  },
  "inputUserFromMessage": {
    "doc": "Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where the user was seen"
      },
      "msg_id": {
        "type": "int",
        "doc": "The message ID"
      },
      "user_id": {
        "type": "long",
        "doc": "The identifier of the user that was seen"
      }
    }
  },
  "inputPhoneContact": {
    "doc": "Phone contact.",
    "parameters": {
      "client_id": {
        "type": "long",
        "doc": "An arbitrary 64-bit integer: it should be set, for example, to an incremental number when using [contacts.importContacts](https://core.telegram.org/method/contacts.importContacts), in order to retry importing only the contacts that weren't imported successfully, according to the client\\_ids returned in [contacts.importedContacts](https://core.telegram.org/constructor/contacts.importedContacts).`retry_contacts`."
      },
      "phone": {
        "type": "string",
        "doc": "Phone number"
      },
      "first_name": {
        "type": "string",
        "doc": "Contact's first name"
      },
      "last_name": {
        "type": "string",
        "doc": "Contact's last name"
      }
    }
  },
  "inputFile": {
    "doc": "Defines a file saved in parts using the method [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart).",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Random file identifier created by the client"
      },
      "parts": {
        "type": "int",
        "doc": "Number of parts saved"
      },
      "name": {
        "type": "string",
        "doc": "Full name of the file"
      },
      "md5_checksum": {
        "type": "string",
        "doc": "In case the file's [md5-hash](https://en.wikipedia.org/wiki/MD5#MD5_hashes) was passed, contents of the file will be checked prior to use"
      }
    }
  },
  "inputFileBig": {
    "doc": "Assigns a big file (over 10 MB in size), saved in part using the method [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart).",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Random file id, created by the client"
      },
      "parts": {
        "type": "int",
        "doc": "Number of parts saved"
      },
      "name": {
        "type": "string",
        "doc": "Full file name"
      }
    }
  },
  "inputMediaEmpty": {
    "doc": "Empty media content of a message.",
    "parameters": {}
  },
  "inputMediaUploadedPhoto": {
    "doc": "Photo",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "spoiler": {
        "type": "flags.2?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "file": {
        "type": "InputFile",
        "doc": "The [uploaded file](https://core.telegram.org/api/files)"
      },
      "stickers": {
        "type": "flags.0?Vector<InputDocument>",
        "doc": "Attached mask stickers"
      },
      "ttl_seconds": {
        "type": "flags.1?int",
        "doc": "Time to live in seconds of self-destructing photo"
      }
    }
  },
  "inputMediaPhoto": {
    "doc": "Forwarded photo",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "spoiler": {
        "type": "flags.1?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "id": {
        "type": "InputPhoto",
        "doc": "Photo to be forwarded"
      },
      "ttl_seconds": {
        "type": "flags.0?int",
        "doc": "Time to live in seconds of self-destructing photo"
      }
    }
  },
  "inputMediaGeoPoint": {
    "doc": "Map.",
    "parameters": {
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "GeoPoint"
      }
    }
  },
  "inputMediaContact": {
    "doc": "Phone book contact",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "first_name": {
        "type": "string",
        "doc": "Contact's first name"
      },
      "last_name": {
        "type": "string",
        "doc": "Contact's last name"
      },
      "vcard": {
        "type": "string",
        "doc": "Contact vcard"
      }
    }
  },
  "inputMediaUploadedDocument": {
    "doc": "New document",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "nosound_video": {
        "type": "flags.3?true",
        "doc": "Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)"
      },
      "force_file": {
        "type": "flags.4?true",
        "doc": "Force the media file to be uploaded as document"
      },
      "spoiler": {
        "type": "flags.5?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "file": {
        "type": "InputFile",
        "doc": "The [uploaded file](https://core.telegram.org/api/files)"
      },
      "thumb": {
        "type": "flags.2?InputFile",
        "doc": "Thumbnail of the document, uploaded as for the file"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type of document"
      },
      "attributes": {
        "type": "Vector<DocumentAttribute>",
        "doc": "Attributes that specify the type of the document (video, audio, voice, sticker, etc.)"
      },
      "stickers": {
        "type": "flags.0?Vector<InputDocument>",
        "doc": "Attached stickers"
      },
      "ttl_seconds": {
        "type": "flags.1?int",
        "doc": "Time to live in seconds of self-destructing document"
      }
    }
  },
  "inputMediaDocument": {
    "doc": "Forwarded document",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "spoiler": {
        "type": "flags.2?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "id": {
        "type": "InputDocument",
        "doc": "The document to be forwarded."
      },
      "ttl_seconds": {
        "type": "flags.0?int",
        "doc": "Time to live of self-destructing document"
      },
      "query": {
        "type": "flags.1?string",
        "doc": "Text query or emoji that was used by the user to find this sticker or GIF: used to improve search result relevance."
      }
    }
  },
  "inputMediaVenue": {
    "doc": "Can be used to send a venue geolocation.",
    "parameters": {
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "Geolocation"
      },
      "title": {
        "type": "string",
        "doc": "Venue name"
      },
      "address": {
        "type": "string",
        "doc": "Physical address of the venue"
      },
      "provider": {
        "type": "string",
        "doc": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported"
      },
      "venue_id": {
        "type": "string",
        "doc": "Venue ID in the provider's database"
      },
      "venue_type": {
        "type": "string",
        "doc": "Venue type in the provider's database"
      }
    }
  },
  "inputMediaPhotoExternal": {
    "doc": "New photo that will be uploaded by the server using the specified URL",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "spoiler": {
        "type": "flags.1?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "url": {
        "type": "string",
        "doc": "URL of the photo"
      },
      "ttl_seconds": {
        "type": "flags.0?int",
        "doc": "Self-destruct time to live of photo"
      }
    }
  },
  "inputMediaDocumentExternal": {
    "doc": "Document that will be downloaded by the telegram servers",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "spoiler": {
        "type": "flags.1?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "url": {
        "type": "string",
        "doc": "URL of the document"
      },
      "ttl_seconds": {
        "type": "flags.0?int",
        "doc": "Self-destruct time to live of document"
      }
    }
  },
  "inputMediaGame": {
    "doc": "A game",
    "parameters": {
      "id": {
        "type": "InputGame",
        "doc": "The game to forward"
      }
    }
  },
  "inputMediaInvoice": {
    "doc": "Generated invoice of a [bot payment](https://core.telegram.org/bots/payments)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "title": {
        "type": "string",
        "doc": "Product name, 1-32 characters"
      },
      "description": {
        "type": "string",
        "doc": "Product description, 1-255 characters"
      },
      "photo": {
        "type": "flags.0?InputWebDocument",
        "doc": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for."
      },
      "invoice": {
        "type": "Invoice",
        "doc": "The actual invoice"
      },
      "payload": {
        "type": "bytes",
        "doc": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
      },
      "provider": {
        "type": "string",
        "doc": "Payments provider token, obtained via [Botfather](https://t.me/botfather)"
      },
      "provider_data": {
        "type": "DataJSON",
        "doc": "JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider."
      },
      "start_param": {
        "type": "flags.1?string",
        "doc": "Unique [bot deep links start parameter](https://core.telegram.org/api/links#bot-links). If present, forwarded copies of the sent message will have a URL button with a [deep link](https://core.telegram.org/api/links#bot-links) to the bot (instead of a Pay button), with the value used as the start parameter. If absent, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice."
      },
      "extended_media": {
        "type": "flags.2?InputMedia",
        "doc": "Extended media"
      }
    }
  },
  "inputMediaGeoLive": {
    "doc": "[Live geolocation](https://core.telegram.org/api/live-location)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "stopped": {
        "type": "flags.0?true",
        "doc": "Whether sending of the geolocation was stopped"
      },
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "Current geolocation"
      },
      "heading": {
        "type": "flags.2?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360."
      },
      "period": {
        "type": "flags.1?int",
        "doc": "Validity period of the current location"
      },
      "proximity_notification_radius": {
        "type": "flags.3?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000)"
      }
    }
  },
  "inputMediaPoll": {
    "doc": "A poll",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "poll": {
        "type": "Poll",
        "doc": "The poll to send"
      },
      "correct_answers": {
        "type": "flags.0?Vector<bytes>",
        "doc": "Correct answer IDs (for quiz polls)"
      },
      "solution": {
        "type": "flags.1?string",
        "doc": "Explanation of quiz solution"
      },
      "solution_entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "inputMediaDice": {
    "doc": "Send a [dice-based animated sticker](https://core.telegram.org/api/dice)",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported"
      }
    }
  },
  "inputMediaStory": {
    "doc": "Forwarded story",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer where the story was posted"
      },
      "id": {
        "type": "int",
        "doc": "Story ID"
      }
    }
  },
  "inputMediaWebPage": {
    "doc": "Specifies options that will be used to generate the link preview for the caption, or even a standalone link preview without an attached message.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "force_large_media": {
        "type": "flags.0?true",
        "doc": "If set, specifies that a large media preview should be used."
      },
      "force_small_media": {
        "type": "flags.1?true",
        "doc": "If set, specifies that a small media preview should be used."
      },
      "optional": {
        "type": "flags.2?true",
        "doc": "If **not** set, a `WEBPAGE_NOT_FOUND` RPC error will be emitted if a webpage preview cannot be generated for the specified `url`; otherwise, no error will be emitted (unless the provided message is also empty, in which case a `MESSAGE_EMPTY` will be emitted, instead)."
      },
      "url": {
        "type": "string",
        "doc": "The URL to use for the link preview."
      }
    }
  },
  "inputChatPhotoEmpty": {
    "doc": "Empty constructor, remove group photo.",
    "parameters": {}
  },
  "inputChatUploadedPhoto": {
    "doc": "New photo to be set as group profile photo.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "file": {
        "type": "flags.0?InputFile",
        "doc": "File saved in parts using the method [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart)"
      },
      "video": {
        "type": "flags.1?InputFile",
        "doc": "Square video for animated profile picture"
      },
      "video_start_ts": {
        "type": "flags.2?double",
        "doc": "Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set."
      },
      "video_emoji_markup": {
        "type": "flags.3?VideoSize",
        "doc": "Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](https://core.telegram.org/constructor/videoSizeEmojiMarkup) or a [videoSizeStickerMarkup](https://core.telegram.org/constructor/videoSizeStickerMarkup) constructor."
      }
    }
  },
  "inputChatPhoto": {
    "doc": "Existing photo to be set as a chat profile photo.",
    "parameters": {
      "id": {
        "type": "InputPhoto",
        "doc": "Existing photo"
      }
    }
  },
  "inputGeoPointEmpty": {
    "doc": "Empty GeoPoint constructor.",
    "parameters": {}
  },
  "inputGeoPoint": {
    "doc": "Defines a GeoPoint by its coordinates.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "lat": {
        "type": "double",
        "doc": "Latitude"
      },
      "long": {
        "type": "double",
        "doc": "Longitude"
      },
      "accuracy_radius": {
        "type": "flags.0?int",
        "doc": "The estimated horizontal accuracy of the location, in meters; as defined by the sender."
      }
    }
  },
  "inputPhotoEmpty": {
    "doc": "Empty constructor.",
    "parameters": {}
  },
  "inputPhoto": {
    "doc": "Defines a photo for further interaction.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Photo identifier"
      },
      "access_hash": {
        "type": "long",
        "doc": "**access\\_hash** value from the [photo](https://core.telegram.org/constructor/photo) constructor"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[File reference](https://core.telegram.org/api/file_reference)"
      }
    }
  },
  "inputFileLocation": {
    "doc": "DEPRECATED location of a photo",
    "parameters": {
      "volume_id": {
        "type": "long",
        "doc": "Server volume"
      },
      "local_id": {
        "type": "int",
        "doc": "File identifier"
      },
      "secret": {
        "type": "long",
        "doc": "Check sum to access the file"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[File reference](https://core.telegram.org/api/file_reference)"
      }
    }
  },
  "inputEncryptedFileLocation": {
    "doc": "Location of encrypted secret chat file.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "File ID, **id** parameter value from [encryptedFile](https://core.telegram.org/constructor/encryptedFile)"
      },
      "access_hash": {
        "type": "long",
        "doc": "Checksum, **access\\_hash** parameter value from [encryptedFile](https://core.telegram.org/constructor/encryptedFile)"
      }
    }
  },
  "inputDocumentFileLocation": {
    "doc": "Document location (video, voice, audio, basically every type except photo)",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Document ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "**access\\_hash** parameter from the [document](https://core.telegram.org/constructor/document) constructor"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[File reference](https://core.telegram.org/api/file_reference)"
      },
      "thumb_size": {
        "type": "string",
        "doc": "Thumbnail size to download the thumbnail"
      }
    }
  },
  "inputSecureFileLocation": {
    "doc": "Location of encrypted telegram [passport](https://core.telegram.org/passport) file.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "File ID, **id** parameter value from [secureFile](https://core.telegram.org/constructor/secureFile)"
      },
      "access_hash": {
        "type": "long",
        "doc": "Checksum, **access\\_hash** parameter value from [secureFile](https://core.telegram.org/constructor/secureFile)"
      }
    }
  },
  "inputTakeoutFileLocation": {
    "doc": "Used to download a JSON file that will contain all personal data related to features that do not have a specialized [takeout method](https://core.telegram.org/api/takeout) yet, see [here »](https://core.telegram.org/api/takeout) for more info on the takeout API.",
    "parameters": {}
  },
  "inputPhotoFileLocation": {
    "doc": "Use this object to download a photo with [upload.getFile](https://core.telegram.org/method/upload.getFile) method",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Photo ID, obtained from the [photo](https://core.telegram.org/constructor/photo) object"
      },
      "access_hash": {
        "type": "long",
        "doc": "Photo's access hash, obtained from the [photo](https://core.telegram.org/constructor/photo) object"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[File reference](https://core.telegram.org/api/file_reference)"
      },
      "thumb_size": {
        "type": "string",
        "doc": "The [PhotoSize](https://core.telegram.org/type/PhotoSize) to download: must be set to the `type` field of the desired PhotoSize object of the [photo](https://core.telegram.org/constructor/photo)"
      }
    }
  },
  "inputPhotoLegacyFileLocation": {
    "doc": "DEPRECATED legacy photo file location",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Photo ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "File reference"
      },
      "volume_id": {
        "type": "long",
        "doc": "Volume ID"
      },
      "local_id": {
        "type": "int",
        "doc": "Local ID"
      },
      "secret": {
        "type": "long",
        "doc": "Secret"
      }
    }
  },
  "inputPeerPhotoFileLocation": {
    "doc": "Location of profile photo of channel/group/supergroup/user",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "big": {
        "type": "flags.0?true",
        "doc": "Whether to download the high-quality version of the picture"
      },
      "peer": {
        "type": "InputPeer",
        "doc": "The peer whose profile picture should be downloaded"
      },
      "photo_id": {
        "type": "long",
        "doc": "Photo ID"
      }
    }
  },
  "inputStickerSetThumb": {
    "doc": "Location of stickerset thumbnail (see [files](https://core.telegram.org/api/files))",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Sticker set"
      },
      "thumb_version": {
        "type": "int",
        "doc": "Thumbnail version"
      }
    }
  },
  "inputGroupCallStream": {
    "doc": "Chunk of a livestream",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "Livestream info"
      },
      "time_ms": {
        "type": "long",
        "doc": "Timestamp in milliseconds"
      },
      "scale": {
        "type": "int",
        "doc": "Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`"
      },
      "video_channel": {
        "type": "flags.0?int",
        "doc": "Selected video channel"
      },
      "video_quality": {
        "type": "flags.0?int",
        "doc": "Selected video quality (0 = lowest, 1 = medium, 2 = best)"
      }
    }
  },
  "peerUser": {
    "doc": "Chat partner",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      }
    }
  },
  "peerChat": {
    "doc": "Group.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Group identifier"
      }
    }
  },
  "peerChannel": {
    "doc": "Channel/supergroup",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      }
    }
  },
  "storage.fileUnknown": {
    "doc": "Unknown type.",
    "parameters": {}
  },
  "storage.filePartial": {
    "doc": "Part of a bigger file.",
    "parameters": {}
  },
  "storage.fileJpeg": {
    "doc": "JPEG image. MIME type: `image/jpeg`.",
    "parameters": {}
  },
  "storage.fileGif": {
    "doc": "GIF image. MIME type: `image/gif`.",
    "parameters": {}
  },
  "storage.filePng": {
    "doc": "PNG image. MIME type: `image/png`.",
    "parameters": {}
  },
  "storage.filePdf": {
    "doc": "PDF document image. MIME type: `application/pdf`.",
    "parameters": {}
  },
  "storage.fileMp3": {
    "doc": "Mp3 audio. MIME type: `audio/mpeg`.",
    "parameters": {}
  },
  "storage.fileMov": {
    "doc": "Quicktime video. MIME type: `video/quicktime`.",
    "parameters": {}
  },
  "storage.fileMp4": {
    "doc": "MPEG-4 video. MIME type: `video/mp4`.",
    "parameters": {}
  },
  "storage.fileWebp": {
    "doc": "WEBP image. MIME type: `image/webp`.",
    "parameters": {}
  },
  "userEmpty": {
    "doc": "Empty constructor, non-existent user.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "User identifier or `0`"
      }
    }
  },
  "user": {
    "doc": "Indicates info about a certain user",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "self": {
        "type": "flags.10?true",
        "doc": "Whether this user indicates the currently logged in user"
      },
      "contact": {
        "type": "flags.11?true",
        "doc": "Whether this user is a contact"
      },
      "mutual_contact": {
        "type": "flags.12?true",
        "doc": "Whether this user is a mutual contact"
      },
      "deleted": {
        "type": "flags.13?true",
        "doc": "Whether the account of this user was deleted"
      },
      "bot": {
        "type": "flags.14?true",
        "doc": "Is this user a bot?"
      },
      "bot_chat_history": {
        "type": "flags.15?true",
        "doc": "Can the bot see all messages in groups?"
      },
      "bot_nochats": {
        "type": "flags.16?true",
        "doc": "Can the bot be added to groups?"
      },
      "verified": {
        "type": "flags.17?true",
        "doc": "Whether this user is verified"
      },
      "restricted": {
        "type": "flags.18?true",
        "doc": "Access to this user must be restricted for the reason specified in `restriction_reason`"
      },
      "min": {
        "type": "flags.20?true",
        "doc": "See [min](https://core.telegram.org/api/min)"
      },
      "bot_inline_geo": {
        "type": "flags.21?true",
        "doc": "Whether the bot can request our geolocation in inline mode"
      },
      "support": {
        "type": "flags.23?true",
        "doc": "Whether this is an official support user"
      },
      "scam": {
        "type": "flags.24?true",
        "doc": "This may be a scam user"
      },
      "apply_min_photo": {
        "type": "flags.25?true",
        "doc": "If set, the profile picture for this user should be refetched"
      },
      "fake": {
        "type": "flags.26?true",
        "doc": "If set, this user was reported by many users as a fake or scam user: be careful when interacting with them."
      },
      "bot_attach_menu": {
        "type": "flags.27?true",
        "doc": "Whether this bot offers an [attachment menu web app](https://core.telegram.org/api/bots/attach)"
      },
      "premium": {
        "type": "flags.28?true",
        "doc": "Whether this user is a Telegram Premium user"
      },
      "attach_menu_enabled": {
        "type": "flags.29?true",
        "doc": "Whether we installed the [attachment menu web app](https://core.telegram.org/api/bots/attach) offered by this bot"
      },
      "flags2": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "bot_can_edit": {
        "type": "flags2.1?true",
        "doc": "Whether we can edit the profile picture, name, about text and description of this bot because we own it."
      },
      "close_friend": {
        "type": "flags2.2?true",
        "doc": "Whether we marked this user as a [close friend, see here » for more info](https://core.telegram.org/api/privacy)"
      },
      "stories_hidden": {
        "type": "flags2.3?true",
        "doc": "Whether we have [hidden »](https://core.telegram.org/api/stories#hiding-stories-of-other-users) all active stories of this user."
      },
      "stories_unavailable": {
        "type": "flags2.4?true",
        "doc": "No stories from this user are visible."
      },
      "id": {
        "type": "long",
        "doc": "ID of the user"
      },
      "access_hash": {
        "type": "flags.0?long",
        "doc": "Access hash of the user"
      },
      "first_name": {
        "type": "flags.1?string",
        "doc": "First name"
      },
      "last_name": {
        "type": "flags.2?string",
        "doc": "Last name"
      },
      "username": {
        "type": "flags.3?string",
        "doc": "Username"
      },
      "phone": {
        "type": "flags.4?string",
        "doc": "Phone number"
      },
      "photo": {
        "type": "flags.5?UserProfilePhoto",
        "doc": "Profile picture of user"
      },
      "status": {
        "type": "flags.6?UserStatus",
        "doc": "Online status of user"
      },
      "bot_info_version": {
        "type": "flags.14?int",
        "doc": "Version of the [bot\\_info field in userFull](https://core.telegram.org/constructor/userFull), incremented every time it changes"
      },
      "restriction_reason": {
        "type": "flags.18?Vector<RestrictionReason>",
        "doc": "Contains the reason why access to this user must be restricted."
      },
      "bot_inline_placeholder": {
        "type": "flags.19?string",
        "doc": "Inline placeholder for this inline bot"
      },
      "lang_code": {
        "type": "flags.22?string",
        "doc": "Language code of the user"
      },
      "emoji_status": {
        "type": "flags.30?EmojiStatus",
        "doc": "[Emoji status](https://core.telegram.org/api/emoji-status)"
      },
      "usernames": {
        "type": "flags2.0?Vector<Username>",
        "doc": "Additional usernames"
      },
      "stories_max_id": {
        "type": "flags2.5?int",
        "doc": "ID of the maximum read [story](https://core.telegram.org/api/stories)."
      },
      "color": {
        "type": "flags2.8?PeerColor",
        "doc": "The user's [accent color](https://core.telegram.org/api/colors)."
      },
      "profile_color": {
        "type": "flags2.9?PeerColor",
        "doc": "The user's [profile color](https://core.telegram.org/api/colors)."
      }
    }
  },
  "userProfilePhotoEmpty": {
    "doc": "Profile photo has not been set, or was hidden.",
    "parameters": {}
  },
  "userProfilePhoto": {
    "doc": "User profile photo.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_video": {
        "type": "flags.0?true",
        "doc": "Whether an [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) is available for this user"
      },
      "personal": {
        "type": "flags.2?true",
        "doc": "Whether this profile photo is only visible to us (i.e. it was set using [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto))."
      },
      "photo_id": {
        "type": "long",
        "doc": "Identifier of the respective photo"
      },
      "stripped_thumb": {
        "type": "flags.1?bytes",
        "doc": "[Stripped thumbnail](https://core.telegram.org/api/files#stripped-thumbnails)"
      },
      "dc_id": {
        "type": "int",
        "doc": "DC ID where the photo is stored"
      }
    }
  },
  "userStatusEmpty": {
    "doc": "User status has not been set yet.",
    "parameters": {}
  },
  "userStatusOnline": {
    "doc": "Online status of the user.",
    "parameters": {
      "expires": {
        "type": "int",
        "doc": "Time to expiration of the current online status"
      }
    }
  },
  "userStatusOffline": {
    "doc": "The user's offline status.",
    "parameters": {
      "was_online": {
        "type": "int",
        "doc": "Time the user was last seen online"
      }
    }
  },
  "userStatusRecently": {
    "doc": "Online status: last seen recently",
    "parameters": {}
  },
  "userStatusLastWeek": {
    "doc": "Online status: last seen last week",
    "parameters": {}
  },
  "userStatusLastMonth": {
    "doc": "Online status: last seen last month",
    "parameters": {}
  },
  "chatEmpty": {
    "doc": "Empty constructor, group doesn't exist",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Group identifier"
      }
    }
  },
  "chat": {
    "doc": "Info about a group",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "creator": {
        "type": "flags.0?true",
        "doc": "Whether the current user is the creator of the group"
      },
      "left": {
        "type": "flags.2?true",
        "doc": "Whether the current user has left the group"
      },
      "deactivated": {
        "type": "flags.5?true",
        "doc": "Whether the group was [migrated](https://core.telegram.org/api/channel)"
      },
      "call_active": {
        "type": "flags.23?true",
        "doc": "Whether a group call is currently active"
      },
      "call_not_empty": {
        "type": "flags.24?true",
        "doc": "Whether there's anyone in the group call"
      },
      "noforwards": {
        "type": "flags.25?true",
        "doc": "Whether this group is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it"
      },
      "id": {
        "type": "long",
        "doc": "ID of the group"
      },
      "title": {
        "type": "string",
        "doc": "Title"
      },
      "photo": {
        "type": "ChatPhoto",
        "doc": "Chat photo"
      },
      "participants_count": {
        "type": "int",
        "doc": "Participant count"
      },
      "date": {
        "type": "int",
        "doc": "Date of creation of the group"
      },
      "version": {
        "type": "int",
        "doc": "Used in basic groups to reorder updates and make sure that all of them were received."
      },
      "migrated_to": {
        "type": "flags.6?InputChannel",
        "doc": "Means this chat was [upgraded](https://core.telegram.org/api/channel) to a supergroup"
      },
      "admin_rights": {
        "type": "flags.14?ChatAdminRights",
        "doc": "[Admin rights](https://core.telegram.org/api/rights) of the user in the group"
      },
      "default_banned_rights": {
        "type": "flags.18?ChatBannedRights",
        "doc": "[Default banned rights](https://core.telegram.org/api/rights) of all users in the group"
      }
    }
  },
  "chatForbidden": {
    "doc": "A group to which the user has no access. E.g., because the user was kicked from the group.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "User identifier"
      },
      "title": {
        "type": "string",
        "doc": "Group name"
      }
    }
  },
  "channel": {
    "doc": "Channel/supergroup info",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "creator": {
        "type": "flags.0?true",
        "doc": "Whether the current user is the creator of this channel"
      },
      "left": {
        "type": "flags.2?true",
        "doc": "Whether the current user has left or is not a member of this channel"
      },
      "broadcast": {
        "type": "flags.5?true",
        "doc": "Is this a channel?"
      },
      "verified": {
        "type": "flags.7?true",
        "doc": "Is this channel verified by telegram?"
      },
      "megagroup": {
        "type": "flags.8?true",
        "doc": "Is this a supergroup?"
      },
      "restricted": {
        "type": "flags.9?true",
        "doc": "Whether viewing/writing in this channel for a reason (see `restriction_reason`"
      },
      "signatures": {
        "type": "flags.11?true",
        "doc": "Whether signatures are enabled (channels)"
      },
      "min": {
        "type": "flags.12?true",
        "doc": "See [min](https://core.telegram.org/api/min)"
      },
      "scam": {
        "type": "flags.19?true",
        "doc": "This channel/supergroup is probably a scam"
      },
      "has_link": {
        "type": "flags.20?true",
        "doc": "Whether this channel has a private join link"
      },
      "has_geo": {
        "type": "flags.21?true",
        "doc": "Whether this chanel has a geoposition"
      },
      "slowmode_enabled": {
        "type": "flags.22?true",
        "doc": "Whether slow mode is enabled for groups to prevent flood in chat"
      },
      "call_active": {
        "type": "flags.23?true",
        "doc": "Whether a group call or livestream is currently active"
      },
      "call_not_empty": {
        "type": "flags.24?true",
        "doc": "Whether there's anyone in the group call or livestream"
      },
      "fake": {
        "type": "flags.25?true",
        "doc": "If set, this [supergroup/channel](https://core.telegram.org/api/channel) was reported by many users as a fake or scam: be careful when interacting with it."
      },
      "gigagroup": {
        "type": "flags.26?true",
        "doc": "Whether this [supergroup](https://core.telegram.org/api/channel) is a gigagroup"
      },
      "noforwards": {
        "type": "flags.27?true",
        "doc": "Whether this channel or group is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it"
      },
      "join_to_send": {
        "type": "flags.28?true",
        "doc": "Whether a user needs to join the supergroup before they can send messages: can be false only for [discussion groups »](https://core.telegram.org/api/discussion), toggle using [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinToSend)"
      },
      "join_request": {
        "type": "flags.29?true",
        "doc": "Whether a user's join request will have to be [approved by administrators](https://core.telegram.org/api/invites#join-requests), toggle using [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinRequest)"
      },
      "forum": {
        "type": "flags.30?true",
        "doc": "Whether this supergroup is a [forum](https://core.telegram.org/api/forum)"
      },
      "flags2": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "stories_hidden": {
        "type": "flags2.1?true",
        "doc": "Whether we have [hidden all stories posted by this channel »](https://core.telegram.org/api/stories#hiding-stories-of-other-users)."
      },
      "stories_hidden_min": {
        "type": "flags2.2?true",
        "doc": "If set, indicates that the `stories_hidden` flag was not populated, and its value must cannot be relied on; use the previously cached value, or re-fetch the constructor using [channels.getChannels](https://core.telegram.org/method/channels.getChannels) to obtain the latest value of the `stories_hidden` flag."
      },
      "stories_unavailable": {
        "type": "flags2.3?true",
        "doc": "No stories from the channel are visible."
      },
      "id": {
        "type": "long",
        "doc": "ID of the channel"
      },
      "access_hash": {
        "type": "flags.13?long",
        "doc": "Access hash"
      },
      "title": {
        "type": "string",
        "doc": "Title"
      },
      "username": {
        "type": "flags.6?string",
        "doc": "Username"
      },
      "photo": {
        "type": "ChatPhoto",
        "doc": "Profile photo"
      },
      "date": {
        "type": "int",
        "doc": "Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date"
      },
      "restriction_reason": {
        "type": "flags.9?Vector<RestrictionReason>",
        "doc": "Contains the reason why access to this channel must be restricted."
      },
      "admin_rights": {
        "type": "flags.14?ChatAdminRights",
        "doc": "Admin rights of the user in this channel (see [rights](https://core.telegram.org/api/rights))"
      },
      "banned_rights": {
        "type": "flags.15?ChatBannedRights",
        "doc": "Banned rights of the user in this channel (see [rights](https://core.telegram.org/api/rights))"
      },
      "default_banned_rights": {
        "type": "flags.18?ChatBannedRights",
        "doc": "Default chat rights (see [rights](https://core.telegram.org/api/rights))"
      },
      "participants_count": {
        "type": "flags.17?int",
        "doc": "Participant count"
      },
      "usernames": {
        "type": "flags2.0?Vector<Username>",
        "doc": "Additional usernames"
      },
      "stories_max_id": {
        "type": "flags2.4?int",
        "doc": "ID of the maximum read [story](https://core.telegram.org/api/stories)."
      },
      "color": {
        "type": "flags2.7?PeerColor",
        "doc": "The channel's [accent color](https://core.telegram.org/api/colors)."
      },
      "profile_color": {
        "type": "flags2.8?PeerColor",
        "doc": "The channel's [profile color](https://core.telegram.org/api/colors)."
      },
      "emoji_status": {
        "type": "flags2.9?EmojiStatus",
        "doc": "[Emoji status](https://core.telegram.org/api/emoji-status)"
      },
      "level": {
        "type": "flags2.10?int",
        "doc": "[Boost level](https://core.telegram.org/api/boost)"
      }
    }
  },
  "channelForbidden": {
    "doc": "Indicates a channel/supergroup we can't access because we were banned, or for some other reason.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "broadcast": {
        "type": "flags.5?true",
        "doc": "Is this a channel"
      },
      "megagroup": {
        "type": "flags.8?true",
        "doc": "Is this a supergroup"
      },
      "id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "title": {
        "type": "string",
        "doc": "Title"
      },
      "until_date": {
        "type": "flags.16?int",
        "doc": "The ban is valid until the specified date"
      }
    }
  },
  "chatFull": {
    "doc": "Full info about a [basic group](https://core.telegram.org/api/channel#basic-groups).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_set_username": {
        "type": "flags.7?true",
        "doc": "Can we change the username of this chat"
      },
      "has_scheduled": {
        "type": "flags.8?true",
        "doc": "Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available"
      },
      "translations_disabled": {
        "type": "flags.19?true",
        "doc": "Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden."
      },
      "id": {
        "type": "long",
        "doc": "ID of the chat"
      },
      "about": {
        "type": "string",
        "doc": "About string for this chat"
      },
      "participants": {
        "type": "ChatParticipants",
        "doc": "Participant list"
      },
      "chat_photo": {
        "type": "flags.2?Photo",
        "doc": "Chat photo"
      },
      "notify_settings": {
        "type": "PeerNotifySettings",
        "doc": "Notification settings"
      },
      "exported_invite": {
        "type": "flags.13?ExportedChatInvite",
        "doc": "Chat invite"
      },
      "bot_info": {
        "type": "flags.3?Vector<BotInfo>",
        "doc": "Info about bots that are in this chat"
      },
      "pinned_msg_id": {
        "type": "flags.6?int",
        "doc": "Message ID of the last [pinned message](https://core.telegram.org/api/pin)"
      },
      "folder_id": {
        "type": "flags.11?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "call": {
        "type": "flags.12?InputGroupCall",
        "doc": "Group call information"
      },
      "ttl_period": {
        "type": "flags.14?int",
        "doc": "Time-To-Live of messages sent by the current user to this chat"
      },
      "groupcall_default_join_as": {
        "type": "flags.15?Peer",
        "doc": "When using [phone.getGroupCallJoinAs](https://core.telegram.org/method/phone.getGroupCallJoinAs) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default."
      },
      "theme_emoticon": {
        "type": "flags.16?string",
        "doc": "Emoji representing a specific chat theme"
      },
      "requests_pending": {
        "type": "flags.17?int",
        "doc": "Pending [join requests »](https://core.telegram.org/api/invites#join-requests)"
      },
      "recent_requesters": {
        "type": "flags.17?Vector<long>",
        "doc": "IDs of users who requested to join recently"
      },
      "available_reactions": {
        "type": "flags.18?ChatReactions",
        "doc": "Allowed [message reactions »](https://core.telegram.org/api/reactions)"
      }
    }
  },
  "channelFull": {
    "doc": "Full info about a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [gigagroup](https://core.telegram.org/api/channel#gigagroups).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_view_participants": {
        "type": "flags.3?true",
        "doc": "Can we view the participant list?"
      },
      "can_set_username": {
        "type": "flags.6?true",
        "doc": "Can we set the channel's username?"
      },
      "can_set_stickers": {
        "type": "flags.7?true",
        "doc": "Can we [associate](https://core.telegram.org/method/channels.setStickers) a stickerpack to the supergroup?"
      },
      "hidden_prehistory": {
        "type": "flags.10?true",
        "doc": "Is the history before we joined hidden to us?"
      },
      "can_set_location": {
        "type": "flags.16?true",
        "doc": "Can we set the geolocation of this group (for geogroups)"
      },
      "has_scheduled": {
        "type": "flags.19?true",
        "doc": "Whether scheduled messages are available"
      },
      "can_view_stats": {
        "type": "flags.20?true",
        "doc": "Can the user view [channel/supergroup statistics](https://core.telegram.org/api/stats)"
      },
      "blocked": {
        "type": "flags.22?true",
        "doc": "Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in [discussion replies via @replies](https://core.telegram.org/api/discussion)"
      },
      "flags2": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_delete_channel": {
        "type": "flags2.0?true",
        "doc": "Can we delete this channel?"
      },
      "antispam": {
        "type": "flags2.1?true",
        "doc": "Whether [native antispam](https://core.telegram.org/api/antispam) functionality is enabled in this supergroup."
      },
      "participants_hidden": {
        "type": "flags2.2?true",
        "doc": "Whether the participant list is hidden."
      },
      "translations_disabled": {
        "type": "flags2.3?true",
        "doc": "Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden."
      },
      "stories_pinned_available": {
        "type": "flags2.5?true",
        "doc": "Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories)."
      },
      "view_forum_as_messages": {
        "type": "flags2.6?true",
        "doc": "Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a \"View as messages\" setting in the local client.  \nThis setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of this flag."
      },
      "id": {
        "type": "long",
        "doc": "ID of the channel"
      },
      "about": {
        "type": "string",
        "doc": "Info about the channel"
      },
      "participants_count": {
        "type": "flags.0?int",
        "doc": "Number of participants of the channel"
      },
      "admins_count": {
        "type": "flags.1?int",
        "doc": "Number of channel admins"
      },
      "kicked_count": {
        "type": "flags.2?int",
        "doc": "Number of users [kicked](https://core.telegram.org/api/rights) from the channel"
      },
      "banned_count": {
        "type": "flags.2?int",
        "doc": "Number of users [banned](https://core.telegram.org/api/rights) from the channel"
      },
      "online_count": {
        "type": "flags.13?int",
        "doc": "Number of users currently online"
      },
      "read_inbox_max_id": {
        "type": "int",
        "doc": "Position up to which all incoming messages are read."
      },
      "read_outbox_max_id": {
        "type": "int",
        "doc": "Position up to which all outgoing messages are read."
      },
      "unread_count": {
        "type": "int",
        "doc": "Count of unread messages"
      },
      "chat_photo": {
        "type": "Photo",
        "doc": "Channel picture"
      },
      "notify_settings": {
        "type": "PeerNotifySettings",
        "doc": "Notification settings"
      },
      "exported_invite": {
        "type": "flags.23?ExportedChatInvite",
        "doc": "Invite link"
      },
      "bot_info": {
        "type": "Vector<BotInfo>",
        "doc": "Info about bots in the channel/supergroup"
      },
      "migrated_from_chat_id": {
        "type": "flags.4?long",
        "doc": "The chat ID from which this group was [migrated](https://core.telegram.org/api/channel)"
      },
      "migrated_from_max_id": {
        "type": "flags.4?int",
        "doc": "The message ID in the original chat at which this group was [migrated](https://core.telegram.org/api/channel)"
      },
      "pinned_msg_id": {
        "type": "flags.5?int",
        "doc": "Message ID of the last [pinned message](https://core.telegram.org/api/pin)"
      },
      "stickerset": {
        "type": "flags.8?StickerSet",
        "doc": "Associated stickerset"
      },
      "available_min_id": {
        "type": "flags.9?int",
        "doc": "Identifier of a maximum unavailable message in a channel due to hidden history."
      },
      "folder_id": {
        "type": "flags.11?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "linked_chat_id": {
        "type": "flags.14?long",
        "doc": "ID of the linked [discussion chat](https://core.telegram.org/api/discussion) for channels"
      },
      "location": {
        "type": "flags.15?ChannelLocation",
        "doc": "Location of the geogroup"
      },
      "slowmode_seconds": {
        "type": "flags.17?int",
        "doc": "If specified, users in supergroups will only be able to send one message every `slowmode_seconds` seconds"
      },
      "slowmode_next_send_date": {
        "type": "flags.18?int",
        "doc": "Indicates when the user will be allowed to send another message in the supergroup (unixtime)"
      },
      "stats_dc": {
        "type": "flags.12?int",
        "doc": "If set, specifies the DC to use for fetching channel statistics"
      },
      "pts": {
        "type": "int",
        "doc": "Latest [PTS](https://core.telegram.org/api/updates) for this channel"
      },
      "call": {
        "type": "flags.21?InputGroupCall",
        "doc": "Livestream or group call information"
      },
      "ttl_period": {
        "type": "flags.24?int",
        "doc": "Time-To-Live of messages in this channel or supergroup"
      },
      "pending_suggestions": {
        "type": "flags.25?Vector<string>",
        "doc": "A list of [suggested actions](https://core.telegram.org/api/config#suggestions) for the supergroup admin, [see here for more info »](https://core.telegram.org/api/config#suggestions)."
      },
      "groupcall_default_join_as": {
        "type": "flags.26?Peer",
        "doc": "When using [phone.getGroupCallJoinAs](https://core.telegram.org/method/phone.getGroupCallJoinAs) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default."
      },
      "theme_emoticon": {
        "type": "flags.27?string",
        "doc": "Emoji representing a specific chat theme"
      },
      "requests_pending": {
        "type": "flags.28?int",
        "doc": "Pending [join requests »](https://core.telegram.org/api/invites#join-requests)"
      },
      "recent_requesters": {
        "type": "flags.28?Vector<long>",
        "doc": "IDs of users who requested to join recently"
      },
      "default_send_as": {
        "type": "flags.29?Peer",
        "doc": "Default peer used for sending messages to this channel"
      },
      "available_reactions": {
        "type": "flags.30?ChatReactions",
        "doc": "Allowed [message reactions »](https://core.telegram.org/api/reactions)"
      },
      "stories": {
        "type": "flags2.4?PeerStories",
        "doc": "Channel [stories](https://core.telegram.org/api/stories)"
      },
      "wallpaper": {
        "type": "flags2.7?WallPaper",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers)"
      }
    }
  },
  "chatParticipant": {
    "doc": "Group member.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "Member user ID"
      },
      "inviter_id": {
        "type": "long",
        "doc": "ID of the user that added the member to the group"
      },
      "date": {
        "type": "int",
        "doc": "Date added to the group"
      }
    }
  },
  "chatParticipantCreator": {
    "doc": "Represents the creator of the group",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "ID of the user that created the group"
      }
    }
  },
  "chatParticipantAdmin": {
    "doc": "Chat admin",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "ID of a group member that is admin"
      },
      "inviter_id": {
        "type": "long",
        "doc": "ID of the user that added the member to the group"
      },
      "date": {
        "type": "int",
        "doc": "Date when the user was added"
      }
    }
  },
  "chatParticipantsForbidden": {
    "doc": "Info on members is unavailable",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "chat_id": {
        "type": "long",
        "doc": "Group ID"
      },
      "self_participant": {
        "type": "flags.0?ChatParticipant",
        "doc": "Info about the group membership of the current user"
      }
    }
  },
  "chatParticipants": {
    "doc": "Group members.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Group identifier"
      },
      "participants": {
        "type": "Vector<ChatParticipant>",
        "doc": "List of group members"
      },
      "version": {
        "type": "int",
        "doc": "Group version number"
      }
    }
  },
  "chatPhotoEmpty": {
    "doc": "Group photo is not set.",
    "parameters": {}
  },
  "chatPhoto": {
    "doc": "Group profile photo.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_video": {
        "type": "flags.0?true",
        "doc": "Whether the user has an animated profile picture"
      },
      "photo_id": {
        "type": "long",
        "doc": "Photo ID"
      },
      "stripped_thumb": {
        "type": "flags.1?bytes",
        "doc": "[Stripped thumbnail](https://core.telegram.org/api/files#stripped-thumbnails)"
      },
      "dc_id": {
        "type": "int",
        "doc": "DC where this photo is stored"
      }
    }
  },
  "messageEmpty": {
    "doc": "Empty constructor, non-existent message.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "int",
        "doc": "Message identifier"
      },
      "peer_id": {
        "type": "flags.0?Peer",
        "doc": "Peer ID, the chat where this message was sent"
      }
    }
  },
  "message": {
    "doc": "A message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "out": {
        "type": "flags.1?true",
        "doc": "Is this an outgoing message"
      },
      "mentioned": {
        "type": "flags.4?true",
        "doc": "Whether we were [mentioned](https://core.telegram.org/api/mentions) in this message"
      },
      "media_unread": {
        "type": "flags.5?true",
        "doc": "Whether there are unread media attachments in this message"
      },
      "silent": {
        "type": "flags.13?true",
        "doc": "Whether this is a silent message (no notification triggered)"
      },
      "post": {
        "type": "flags.14?true",
        "doc": "Whether this is a channel post"
      },
      "from_scheduled": {
        "type": "flags.18?true",
        "doc": "Whether this is a [scheduled message](https://core.telegram.org/api/scheduled-messages)"
      },
      "legacy": {
        "type": "flags.19?true",
        "doc": "This is a legacy message: it has to be refetched with the new layer"
      },
      "edit_hide": {
        "type": "flags.21?true",
        "doc": "Whether the message should be shown as not modified to the user, even if an edit date is present"
      },
      "pinned": {
        "type": "flags.24?true",
        "doc": "Whether this message is [pinned](https://core.telegram.org/api/pin)"
      },
      "noforwards": {
        "type": "flags.26?true",
        "doc": "Whether this message is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more) and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera)."
      },
      "invert_media": {
        "type": "flags.27?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "id": {
        "type": "int",
        "doc": "ID of the message"
      },
      "from_id": {
        "type": "flags.8?Peer",
        "doc": "ID of the sender of the message"
      },
      "peer_id": {
        "type": "Peer",
        "doc": "Peer ID, the chat where this message was sent"
      },
      "saved_peer_id": {
        "type": "flags.28?Peer",
        "doc": "Messages fetched from a [saved messages dialog »](https://core.telegram.org/api/saved-messages) will have `peer`\\=[inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) and the `saved_peer_id` flag set to the ID of the saved dialog."
      },
      "fwd_from": {
        "type": "flags.2?MessageFwdHeader",
        "doc": "Info about forwarded messages"
      },
      "via_bot_id": {
        "type": "flags.11?long",
        "doc": "ID of the inline bot that generated the message"
      },
      "reply_to": {
        "type": "flags.3?MessageReplyHeader",
        "doc": "Reply information"
      },
      "date": {
        "type": "int",
        "doc": "Date of the message"
      },
      "message": {
        "type": "string",
        "doc": "The message"
      },
      "media": {
        "type": "flags.9?MessageMedia",
        "doc": "Media attachment"
      },
      "reply_markup": {
        "type": "flags.6?ReplyMarkup",
        "doc": "Reply markup (bot/inline keyboards)"
      },
      "entities": {
        "type": "flags.7?Vector<MessageEntity>",
        "doc": "Message [entities](https://core.telegram.org/api/entities) for styled text"
      },
      "views": {
        "type": "flags.10?int",
        "doc": "View count for channel posts"
      },
      "forwards": {
        "type": "flags.10?int",
        "doc": "Forward counter"
      },
      "replies": {
        "type": "flags.23?MessageReplies",
        "doc": "Info about [post comments (for channels) or message replies (for groups)](https://core.telegram.org/api/threads)"
      },
      "edit_date": {
        "type": "flags.15?int",
        "doc": "Last edit date of this message"
      },
      "post_author": {
        "type": "flags.16?string",
        "doc": "Name of the author of this message for channel posts (with signatures enabled)"
      },
      "grouped_id": {
        "type": "flags.17?long",
        "doc": "Multiple media messages sent using [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia) with the same grouped ID indicate an [album or media group](https://core.telegram.org/api/files#albums-grouped-media)"
      },
      "reactions": {
        "type": "flags.20?MessageReactions",
        "doc": "Reactions to this message"
      },
      "restriction_reason": {
        "type": "flags.22?Vector<RestrictionReason>",
        "doc": "Contains the reason why access to this message must be restricted."
      },
      "ttl_period": {
        "type": "flags.25?int",
        "doc": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    }
  },
  "messageService": {
    "doc": "Indicates a service message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "out": {
        "type": "flags.1?true",
        "doc": "Whether the message is outgoing"
      },
      "mentioned": {
        "type": "flags.4?true",
        "doc": "Whether we were mentioned in the message"
      },
      "media_unread": {
        "type": "flags.5?true",
        "doc": "Whether the message contains unread media"
      },
      "silent": {
        "type": "flags.13?true",
        "doc": "Whether the message is silent"
      },
      "post": {
        "type": "flags.14?true",
        "doc": "Whether it's a channel post"
      },
      "legacy": {
        "type": "flags.19?true",
        "doc": "This is a legacy message: it has to be refetched with the new layer"
      },
      "id": {
        "type": "int",
        "doc": "Message ID"
      },
      "from_id": {
        "type": "flags.8?Peer",
        "doc": "ID of the sender of this message"
      },
      "peer_id": {
        "type": "Peer",
        "doc": "Sender of service message"
      },
      "reply_to": {
        "type": "flags.3?MessageReplyHeader",
        "doc": "Reply (thread) information"
      },
      "date": {
        "type": "int",
        "doc": "Message date"
      },
      "action": {
        "type": "MessageAction",
        "doc": "Event connected with the service message"
      },
      "ttl_period": {
        "type": "flags.25?int",
        "doc": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    }
  },
  "messageMediaEmpty": {
    "doc": "Empty constructor.",
    "parameters": {}
  },
  "messageMediaPhoto": {
    "doc": "Attached photo.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "spoiler": {
        "type": "flags.3?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "photo": {
        "type": "flags.0?Photo",
        "doc": "Photo"
      },
      "ttl_seconds": {
        "type": "flags.2?int",
        "doc": "Time to live in seconds of self-destructing photo"
      }
    }
  },
  "messageMediaGeo": {
    "doc": "Attached map.",
    "parameters": {
      "geo": {
        "type": "GeoPoint",
        "doc": "GeoPoint"
      }
    }
  },
  "messageMediaContact": {
    "doc": "Attached contact.",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "first_name": {
        "type": "string",
        "doc": "Contact's first name"
      },
      "last_name": {
        "type": "string",
        "doc": "Contact's last name"
      },
      "vcard": {
        "type": "string",
        "doc": "VCARD of contact"
      },
      "user_id": {
        "type": "long",
        "doc": "User identifier or `0`, if the user with the given phone number is not registered"
      }
    }
  },
  "messageMediaUnsupported": {
    "doc": "Current version of the client does not support this media type.",
    "parameters": {}
  },
  "messageMediaDocument": {
    "doc": "Document (video, audio, voice, sticker, any media type except photo)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "nopremium": {
        "type": "flags.3?true",
        "doc": "Whether this is a normal sticker, if not set this is a premium sticker and a premium sticker animation must be played."
      },
      "spoiler": {
        "type": "flags.4?true",
        "doc": "Whether this media should be hidden behind a spoiler warning"
      },
      "video": {
        "type": "flags.6?true",
        "doc": "Whether this is a video."
      },
      "round": {
        "type": "flags.7?true",
        "doc": "Whether this is a round video."
      },
      "voice": {
        "type": "flags.8?true",
        "doc": "Whether this is a voice message."
      },
      "document": {
        "type": "flags.0?Document",
        "doc": "Attached document"
      },
      "alt_document": {
        "type": "flags.5?Document",
        "doc": "Currently only used for story videos, may contain an alternative version of the story video, explicitly encoded using H.264 (in MPEG4 transport) at a lower resolution than `document`."
      },
      "ttl_seconds": {
        "type": "flags.2?int",
        "doc": "Time to live of self-destructing document"
      }
    }
  },
  "messageMediaWebPage": {
    "doc": "Preview of webpage",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "force_large_media": {
        "type": "flags.0?true",
        "doc": "If set, specifies that a large media preview should be used."
      },
      "force_small_media": {
        "type": "flags.1?true",
        "doc": "If set, specifies that a small media preview should be used."
      },
      "manual": {
        "type": "flags.3?true",
        "doc": "If set, indicates that the URL used for the webpage preview was specified manually using [inputMediaWebPage](https://core.telegram.org/constructor/inputMediaWebPage), and may not be related to any of the URLs specified in the message."
      },
      "safe": {
        "type": "flags.4?true",
        "doc": "If set, the webpage can be opened directly without user confirmation; otherwise, user confirmation is required, showing the exact URL that will be opened."
      },
      "webpage": {
        "type": "WebPage",
        "doc": "Webpage preview"
      }
    }
  },
  "messageMediaVenue": {
    "doc": "Venue",
    "parameters": {
      "geo": {
        "type": "GeoPoint",
        "doc": "Geolocation of venue"
      },
      "title": {
        "type": "string",
        "doc": "Venue name"
      },
      "address": {
        "type": "string",
        "doc": "Address"
      },
      "provider": {
        "type": "string",
        "doc": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported"
      },
      "venue_id": {
        "type": "string",
        "doc": "Venue ID in the provider's database"
      },
      "venue_type": {
        "type": "string",
        "doc": "Venue type in the provider's database"
      }
    }
  },
  "messageMediaGame": {
    "doc": "Telegram game",
    "parameters": {
      "game": {
        "type": "Game",
        "doc": "Game"
      }
    }
  },
  "messageMediaInvoice": {
    "doc": "Invoice",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "shipping_address_requested": {
        "type": "flags.1?true",
        "doc": "Whether the shipping address was requested"
      },
      "test": {
        "type": "flags.3?true",
        "doc": "Whether this is an example invoice"
      },
      "title": {
        "type": "string",
        "doc": "Product name, 1-32 characters"
      },
      "description": {
        "type": "string",
        "doc": "Product description, 1-255 characters"
      },
      "photo": {
        "type": "flags.0?WebDocument",
        "doc": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for."
      },
      "receipt_msg_id": {
        "type": "flags.2?int",
        "doc": "Message ID of receipt: if set, clients should change the text of the first [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button always attached to the [message](https://core.telegram.org/constructor/message) to a localized version of the word `Receipt`"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "total_amount": {
        "type": "long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "start_param": {
        "type": "string",
        "doc": "Unique bot deep-linking parameter that can be used to generate this invoice"
      },
      "extended_media": {
        "type": "flags.4?MessageExtendedMedia",
        "doc": "Extended media"
      }
    }
  },
  "messageMediaGeoLive": {
    "doc": "Indicates a [live geolocation](https://core.telegram.org/api/live-location)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "geo": {
        "type": "GeoPoint",
        "doc": "Geolocation"
      },
      "heading": {
        "type": "flags.0?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360"
      },
      "period": {
        "type": "int",
        "doc": "Validity period of provided geolocation"
      },
      "proximity_notification_radius": {
        "type": "flags.1?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000)."
      }
    }
  },
  "messageMediaPoll": {
    "doc": "Poll",
    "parameters": {
      "poll": {
        "type": "Poll",
        "doc": "The poll"
      },
      "results": {
        "type": "PollResults",
        "doc": "The results of the poll"
      }
    }
  },
  "messageMediaDice": {
    "doc": "[Dice-based animated sticker](https://core.telegram.org/api/dice)",
    "parameters": {
      "value": {
        "type": "int",
        "doc": "[Dice value](https://core.telegram.org/api/dice)"
      },
      "emoticon": {
        "type": "string",
        "doc": "The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported"
      }
    }
  },
  "messageMediaStory": {
    "doc": "Represents a forwarded [story](https://core.telegram.org/api/stories) or a story mention.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "via_mention": {
        "type": "flags.1?true",
        "doc": "If set, indicates that this someone has mentioned us in this story (i.e. by tagging us in the description) or vice versa, we have mentioned the other peer (if the message is outgoing)."
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer that posted the story."
      },
      "id": {
        "type": "int",
        "doc": "Story ID"
      },
      "story": {
        "type": "flags.0?StoryItem",
        "doc": "The story itself, if absent fetch it using [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) and the `peer`/`id` parameters specified above."
      }
    }
  },
  "messageMediaGiveaway": {
    "doc": "Contains info about a [giveaway, see here »](https://core.telegram.org/api/giveaways) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "only_new_subscribers": {
        "type": "flags.0?true",
        "doc": "If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway."
      },
      "winners_are_visible": {
        "type": "flags.2?true",
        "doc": "If set, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel once the giveaway ends."
      },
      "channels": {
        "type": "Vector<long>",
        "doc": "The channels that the user must join to participate in the giveaway."
      },
      "countries_iso2": {
        "type": "flags.1?Vector<string>",
        "doc": "If set, only users residing in these countries can participate in the giveaway, (specified as a list of two-letter ISO 3166-1 alpha-2 country codes); otherwise there are no country-based limitations."
      },
      "prize_description": {
        "type": "flags.3?string",
        "doc": "Can contain a textual description of additional giveaway prizes."
      },
      "quantity": {
        "type": "int",
        "doc": "Number of [Telegram Premium](https://core.telegram.org/api/premium) subscriptions given away."
      },
      "months": {
        "type": "int",
        "doc": "Duration in months of each [Telegram Premium](https://core.telegram.org/api/premium) subscription in the giveaway."
      },
      "until_date": {
        "type": "int",
        "doc": "The end date of the giveaway."
      }
    }
  },
  "messageMediaGiveawayResults": {
    "doc": "A [giveaway](https://core.telegram.org/api/giveaways) with public winners has finished, this constructor contains info about the winners.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "only_new_subscribers": {
        "type": "flags.0?true",
        "doc": "If set, only new subscribers starting from the giveaway creation date participated in the giveaway."
      },
      "refunded": {
        "type": "flags.2?true",
        "doc": "If set, the giveaway was canceled and was fully refunded."
      },
      "channel_id": {
        "type": "long",
        "doc": "ID of the channel that was automatically [boosted](https://core.telegram.org/api/boost) by the winners of the giveaway for duration of the Premium subscription."
      },
      "additional_peers_count": {
        "type": "flags.3?int",
        "doc": "Number of other channels that participated in the giveaway."
      },
      "launch_msg_id": {
        "type": "int",
        "doc": "Identifier of the message with the giveaway in `channel_id`."
      },
      "winners_count": {
        "type": "int",
        "doc": "Total number of winners in the giveaway."
      },
      "unclaimed_count": {
        "type": "int",
        "doc": "Number of not-yet-claimed prizes."
      },
      "winners": {
        "type": "Vector<long>",
        "doc": "Up to 100 user identifiers of the winners of the giveaway."
      },
      "months": {
        "type": "int",
        "doc": "Duration in months of each [Telegram Premium](https://core.telegram.org/api/premium) subscription in the giveaway."
      },
      "prize_description": {
        "type": "flags.1?string",
        "doc": "Can contain a textual description of additional giveaway prizes."
      },
      "until_date": {
        "type": "int",
        "doc": "Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in initial parameters of the giveaway."
      }
    }
  },
  "messageActionEmpty": {
    "doc": "Empty constructor.",
    "parameters": {}
  },
  "messageActionChatCreate": {
    "doc": "Group created",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "Group name"
      },
      "users": {
        "type": "Vector<long>",
        "doc": "List of group members"
      }
    }
  },
  "messageActionChatEditTitle": {
    "doc": "Group name changed.",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "New group name"
      }
    }
  },
  "messageActionChatEditPhoto": {
    "doc": "Group profile changed",
    "parameters": {
      "photo": {
        "type": "Photo",
        "doc": "New group profile photo"
      }
    }
  },
  "messageActionChatDeletePhoto": {
    "doc": "Group profile photo removed.",
    "parameters": {}
  },
  "messageActionChatAddUser": {
    "doc": "New member in the group",
    "parameters": {
      "users": {
        "type": "Vector<long>",
        "doc": "Users that were invited to the chat"
      }
    }
  },
  "messageActionChatDeleteUser": {
    "doc": "User left the group.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "Leaving user ID"
      }
    }
  },
  "messageActionChatJoinedByLink": {
    "doc": "A user joined the chat via an invite link",
    "parameters": {
      "inviter_id": {
        "type": "long",
        "doc": "ID of the user that created the invite link"
      }
    }
  },
  "messageActionChannelCreate": {
    "doc": "The channel was created",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "Original channel/supergroup title"
      }
    }
  },
  "messageActionChatMigrateTo": {
    "doc": "Indicates the chat was [migrated](https://core.telegram.org/api/channel) to the specified supergroup",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "The supergroup it was migrated to"
      }
    }
  },
  "messageActionChannelMigrateFrom": {
    "doc": "Indicates the channel was [migrated](https://core.telegram.org/api/channel) from the specified chat",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "The old chat title"
      },
      "chat_id": {
        "type": "long",
        "doc": "The old chat ID"
      }
    }
  },
  "messageActionPinMessage": {
    "doc": "A message was pinned",
    "parameters": {}
  },
  "messageActionHistoryClear": {
    "doc": "Chat history was cleared",
    "parameters": {}
  },
  "messageActionGameScore": {
    "doc": "Someone scored in a game",
    "parameters": {
      "game_id": {
        "type": "long",
        "doc": "Game ID"
      },
      "score": {
        "type": "int",
        "doc": "Score"
      }
    }
  },
  "messageActionPaymentSentMe": {
    "doc": "A user just sent a payment to me (a bot)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "recurring_init": {
        "type": "flags.2?true",
        "doc": "Whether this is the first payment of a recurring payment we just subscribed to"
      },
      "recurring_used": {
        "type": "flags.3?true",
        "doc": "Whether this payment is part of a recurring payment"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "total_amount": {
        "type": "long",
        "doc": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "payload": {
        "type": "bytes",
        "doc": "Bot specified invoice payload"
      },
      "info": {
        "type": "flags.0?PaymentRequestedInfo",
        "doc": "Order info provided by the user"
      },
      "shipping_option_id": {
        "type": "flags.1?string",
        "doc": "Identifier of the shipping option chosen by the user"
      },
      "charge": {
        "type": "PaymentCharge",
        "doc": "Provider payment identifier"
      }
    }
  },
  "messageActionPaymentSent": {
    "doc": "A payment was sent",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "recurring_init": {
        "type": "flags.2?true",
        "doc": "Whether this is the first payment of a recurring payment we just subscribed to"
      },
      "recurring_used": {
        "type": "flags.3?true",
        "doc": "Whether this payment is part of a recurring payment"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "total_amount": {
        "type": "long",
        "doc": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "invoice_slug": {
        "type": "flags.0?string",
        "doc": "An invoice slug taken from an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or from the [`premium_invoice_slug` app config parameter »](https://core.telegram.org/api/config#premium-invoice-slug)"
      }
    }
  },
  "messageActionPhoneCall": {
    "doc": "A phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "video": {
        "type": "flags.2?true",
        "doc": "Is this a video call?"
      },
      "call_id": {
        "type": "long",
        "doc": "Call ID"
      },
      "reason": {
        "type": "flags.0?PhoneCallDiscardReason",
        "doc": "If the call has ended, the reason why it ended"
      },
      "duration": {
        "type": "flags.1?int",
        "doc": "Duration of the call in seconds"
      }
    }
  },
  "messageActionScreenshotTaken": {
    "doc": "A screenshot of the chat was taken",
    "parameters": {}
  },
  "messageActionCustomAction": {
    "doc": "Custom action (most likely not supported by the current layer, an upgrade might be needed)",
    "parameters": {
      "message": {
        "type": "string",
        "doc": "Action message"
      }
    }
  },
  "messageActionBotAllowed": {
    "doc": "We have given the bot permission to send us direct messages.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "attach_menu": {
        "type": "flags.1?true",
        "doc": "We have authorized the bot to send us messages by installing the bot's [attachment menu](https://core.telegram.org/api/bots/attach)."
      },
      "from_request": {
        "type": "flags.3?true",
        "doc": "We have allowed the bot to send us messages using [bots.allowSendMessage »](https://core.telegram.org/method/bots.allowSendMessage)."
      },
      "domain": {
        "type": "flags.0?string",
        "doc": "We have authorized the bot to send us messages by logging into a website via [Telegram Login »](https://core.telegram.org/widgets/login); this field contains the domain name of the website on which the user has logged in."
      },
      "app": {
        "type": "flags.2?BotApp",
        "doc": "We have authorized the bot to send us messages by opening the specified [bot mini app](https://core.telegram.org/api/bots/webapps)."
      }
    }
  },
  "messageActionSecureValuesSentMe": {
    "doc": "Secure [telegram passport](https://core.telegram.org/passport) values were received",
    "parameters": {
      "values": {
        "type": "Vector<SecureValue>",
        "doc": "Vector with information about documents and other Telegram Passport elements that were shared with the bot"
      },
      "credentials": {
        "type": "SecureCredentialsEncrypted",
        "doc": "Encrypted credentials required to decrypt the data"
      }
    }
  },
  "messageActionSecureValuesSent": {
    "doc": "Request for secure [telegram passport](https://core.telegram.org/passport) values was sent",
    "parameters": {
      "types": {
        "type": "Vector<SecureValueType>",
        "doc": "Secure value types"
      }
    }
  },
  "messageActionContactSignUp": {
    "doc": "A contact just signed up to telegram",
    "parameters": {}
  },
  "messageActionGeoProximityReached": {
    "doc": "A user of the chat is now in proximity of another user",
    "parameters": {
      "from_id": {
        "type": "Peer",
        "doc": "The user or chat that is now in proximity of `to_id`"
      },
      "to_id": {
        "type": "Peer",
        "doc": "The user or chat that subscribed to [live geolocation proximity alerts](https://core.telegram.org/api/live-location#proximity-alert)"
      },
      "distance": {
        "type": "int",
        "doc": "Distance, in meters (0-100000)"
      }
    }
  },
  "messageActionGroupCall": {
    "doc": "The group call has ended",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      },
      "duration": {
        "type": "flags.0?int",
        "doc": "Group call duration"
      }
    }
  },
  "messageActionInviteToGroupCall": {
    "doc": "A set of users was invited to the group call",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "users": {
        "type": "Vector<long>",
        "doc": "The invited users"
      }
    }
  },
  "messageActionSetMessagesTTL": {
    "doc": "The Time-To-Live of messages in this chat was changed.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "period": {
        "type": "int",
        "doc": "New Time-To-Live of all messages sent in this chat; if 0, autodeletion was disabled."
      },
      "auto_setting_from": {
        "type": "flags.0?long",
        "doc": "If set, the chat TTL setting was set not due to a manual change by one of participants, but automatically because one of the participants has the [default TTL settings enabled »](https://core.telegram.org/method/messages.setDefaultHistoryTTL). For example, when a user writes to us for the first time and we have set a default messages TTL of 1 week, this service message (with `auto_setting_from=our_userid`) will be emitted before our first message."
      }
    }
  },
  "messageActionGroupCallScheduled": {
    "doc": "A group call was scheduled",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call"
      },
      "schedule_date": {
        "type": "int",
        "doc": "When is this group call scheduled to start"
      }
    }
  },
  "messageActionSetChatTheme": {
    "doc": "The chat theme was changed",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "The emoji that identifies a chat theme"
      }
    }
  },
  "messageActionChatJoinedByRequest": {
    "doc": "A user was accepted into the group by an admin",
    "parameters": {}
  },
  "messageActionWebViewDataSentMe": {
    "doc": "Data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) was relayed to the bot that owns it (bot side service message).",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app."
      },
      "data": {
        "type": "string",
        "doc": "Relayed data."
      }
    }
  },
  "messageActionWebViewDataSent": {
    "doc": "Data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) was relayed to the bot that owns it (user side service message).",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app."
      }
    }
  },
  "messageActionGiftPremium": {
    "doc": "Info about a gifted Telegram Premium subscription",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Price of the gift in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "months": {
        "type": "int",
        "doc": "Duration of the gifted Telegram Premium subscription"
      },
      "crypto_currency": {
        "type": "flags.0?string",
        "doc": "If the gift was bought using a cryptocurrency, the cryptocurrency name."
      },
      "crypto_amount": {
        "type": "flags.0?long",
        "doc": "If the gift was bought using a cryptocurrency, price of the gift in the smallest units of a cryptocurrency."
      }
    }
  },
  "messageActionTopicCreate": {
    "doc": "A [forum topic](https://core.telegram.org/api/forum#forum-topics) was created.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "title": {
        "type": "string",
        "doc": "Topic name."
      },
      "icon_color": {
        "type": "int",
        "doc": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`."
      },
      "icon_emoji_id": {
        "type": "flags.0?long",
        "doc": "ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon."
      }
    }
  },
  "messageActionTopicEdit": {
    "doc": "[Forum topic](https://core.telegram.org/api/forum#forum-topics) information was edited.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "title": {
        "type": "flags.0?string",
        "doc": "New topic title."
      },
      "icon_emoji_id": {
        "type": "flags.1?long",
        "doc": "ID of the new [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon, or if it was removed."
      },
      "closed": {
        "type": "flags.2?Bool",
        "doc": "Whether the topic was opened or closed."
      },
      "hidden": {
        "type": "flags.3?Bool",
        "doc": "Whether the topic was hidden or unhidden (only valid for the \"General\" topic, `id=1`)."
      }
    }
  },
  "messageActionSuggestProfilePhoto": {
    "doc": "A new profile picture was suggested using [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto).",
    "parameters": {
      "photo": {
        "type": "Photo",
        "doc": "The photo that the user suggested we set as profile picture."
      }
    }
  },
  "messageActionRequestedPeer": {
    "doc": "Contains info about one or more peers that the user shared with the bot after clicking on a [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) button.",
    "parameters": {
      "button_id": {
        "type": "int",
        "doc": "`button_id` contained in the [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer)"
      },
      "peers": {
        "type": "Vector<Peer>",
        "doc": "The shared peers"
      }
    }
  },
  "messageActionSetChatWallPaper": {
    "doc": "The [wallpaper »](https://core.telegram.org/api/wallpapers) of the current chat was changed.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "same": {
        "type": "flags.0?true",
        "doc": "If set, indicates the user applied a [wallpaper »](https://core.telegram.org/api/wallpapers) previously sent by the other user in a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) message."
      },
      "for_both": {
        "type": "flags.1?true",
        "doc": "If set, indicates the wallpaper was forcefully applied for both sides, without explicit confirmation from the other side.  \nIf the message is incoming, and we did not like the new wallpaper the other user has chosen for us, we can re-set our previous wallpaper just on our side, by invoking [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper), providing only the `revert` flag (and obviously the `peer` parameter)."
      },
      "wallpaper": {
        "type": "WallPaper",
        "doc": "New [wallpaper](https://core.telegram.org/api/wallpapers)"
      }
    }
  },
  "messageActionGiftCode": {
    "doc": "Contains a [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "via_giveaway": {
        "type": "flags.0?true",
        "doc": "If set, this gift code was received from a [giveaway »](https://core.telegram.org/api/giveaways) started by a channel we're subscribed to."
      },
      "unclaimed": {
        "type": "flags.2?true",
        "doc": "If set, the link was not [redeemed](https://core.telegram.org/api/links#premium-giftcode-links) yet."
      },
      "boost_peer": {
        "type": "flags.1?Peer",
        "doc": "Identifier of the channel that created the gift code [either directly or through a giveaway](https://core.telegram.org/api/giveaways): if we import this giftcode link, we will also automatically [boost](https://core.telegram.org/api/boost) this channel."
      },
      "months": {
        "type": "int",
        "doc": "Duration in months of the gifted [Telegram Premium subscription](https://core.telegram.org/api/premium)."
      },
      "slug": {
        "type": "string",
        "doc": "Slug of the [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links)"
      },
      "currency": {
        "type": "flags.2?string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "flags.2?long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "crypto_currency": {
        "type": "flags.3?string",
        "doc": "If set, the gift was made using the specified cryptocurrency."
      },
      "crypto_amount": {
        "type": "flags.3?long",
        "doc": "If `crypto_currency` is set, contains the paid amount, in the smallest units of the cryptocurrency."
      }
    }
  },
  "messageActionGiveawayLaunch": {
    "doc": "A [giveaway](https://core.telegram.org/api/giveaways) was started.",
    "parameters": {}
  },
  "messageActionGiveawayResults": {
    "doc": "A [giveaway](https://core.telegram.org/api/giveaways) has ended.",
    "parameters": {
      "winners_count": {
        "type": "int",
        "doc": "Number of winners in the giveaway"
      },
      "unclaimed_count": {
        "type": "int",
        "doc": "Number of undistributed prizes"
      }
    }
  },
  "dialog": {
    "doc": "Chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.2?true",
        "doc": "Is the dialog pinned"
      },
      "unread_mark": {
        "type": "flags.3?true",
        "doc": "Whether the chat was manually marked as unread"
      },
      "view_forum_as_messages": {
        "type": "flags.6?true",
        "doc": "Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a \"View as messages\" setting in the local client.  \nThis setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of this flag."
      },
      "peer": {
        "type": "Peer",
        "doc": "The chat"
      },
      "top_message": {
        "type": "int",
        "doc": "The latest message ID"
      },
      "read_inbox_max_id": {
        "type": "int",
        "doc": "Position up to which all incoming messages are read."
      },
      "read_outbox_max_id": {
        "type": "int",
        "doc": "Position up to which all outgoing messages are read."
      },
      "unread_count": {
        "type": "int",
        "doc": "Number of unread messages"
      },
      "unread_mentions_count": {
        "type": "int",
        "doc": "Number of [unread mentions](https://core.telegram.org/api/mentions)"
      },
      "unread_reactions_count": {
        "type": "int",
        "doc": "Number of unread reactions to messages you sent"
      },
      "notify_settings": {
        "type": "PeerNotifySettings",
        "doc": "Notification settings"
      },
      "pts": {
        "type": "flags.0?int",
        "doc": "[PTS](https://core.telegram.org/api/updates)"
      },
      "draft": {
        "type": "flags.1?DraftMessage",
        "doc": "Message [draft](https://core.telegram.org/api/drafts)"
      },
      "folder_id": {
        "type": "flags.4?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "ttl_period": {
        "type": "flags.5?int",
        "doc": "Time-to-live of all messages sent in this dialog"
      }
    }
  },
  "dialogFolder": {
    "doc": "Dialog in folder",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.2?true",
        "doc": "Is this folder pinned"
      },
      "folder": {
        "type": "Folder",
        "doc": "The folder"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer in folder"
      },
      "top_message": {
        "type": "int",
        "doc": "Latest message ID of dialog"
      },
      "unread_muted_peers_count": {
        "type": "int",
        "doc": "Number of unread muted peers in folder"
      },
      "unread_unmuted_peers_count": {
        "type": "int",
        "doc": "Number of unread unmuted peers in folder"
      },
      "unread_muted_messages_count": {
        "type": "int",
        "doc": "Number of unread messages from muted peers in folder"
      },
      "unread_unmuted_messages_count": {
        "type": "int",
        "doc": "Number of unread messages from unmuted peers in folder"
      }
    }
  },
  "photoEmpty": {
    "doc": "Empty constructor, non-existent photo",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Photo identifier"
      }
    }
  },
  "photo": {
    "doc": "Photo",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_stickers": {
        "type": "flags.0?true",
        "doc": "Whether the photo has mask stickers attached to it"
      },
      "id": {
        "type": "long",
        "doc": "ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[file reference](https://core.telegram.org/api/file_reference)"
      },
      "date": {
        "type": "int",
        "doc": "Date of upload"
      },
      "sizes": {
        "type": "Vector<PhotoSize>",
        "doc": "Available sizes for download"
      },
      "video_sizes": {
        "type": "flags.1?Vector<VideoSize>",
        "doc": "[For animated profiles](https://core.telegram.org/api/files#animated-profile-pictures), the MPEG4 videos"
      },
      "dc_id": {
        "type": "int",
        "doc": "DC ID to use for download"
      }
    }
  },
  "photoSizeEmpty": {
    "doc": "Empty constructor. Image with this thumbnail is unavailable.",
    "parameters": {
      "type": {
        "type": "string",
        "doc": "[Thumbnail type »](https://core.telegram.org/api/files#image-thumbnail-types)"
      }
    }
  },
  "photoSize": {
    "doc": "Image description.",
    "parameters": {
      "type": {
        "type": "string",
        "doc": "[Thumbnail type »](https://core.telegram.org/api/files#image-thumbnail-types)"
      },
      "w": {
        "type": "int",
        "doc": "Image width"
      },
      "h": {
        "type": "int",
        "doc": "Image height"
      },
      "size": {
        "type": "int",
        "doc": "File size"
      }
    }
  },
  "photoCachedSize": {
    "doc": "Description of an image and its content.",
    "parameters": {
      "type": {
        "type": "string",
        "doc": "Thumbnail type"
      },
      "w": {
        "type": "int",
        "doc": "Image width"
      },
      "h": {
        "type": "int",
        "doc": "Image height"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Binary data, file content"
      }
    }
  },
  "photoStrippedSize": {
    "doc": "A low-resolution compressed JPG payload",
    "parameters": {
      "type": {
        "type": "string",
        "doc": "Thumbnail type"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Thumbnail data, see [here for more info on decompression »](https://core.telegram.org/api/files#stripped-thumbnails)"
      }
    }
  },
  "photoSizeProgressive": {
    "doc": "Progressively encoded photosize",
    "parameters": {
      "type": {
        "type": "string",
        "doc": "[Photosize type »](https://core.telegram.org/api/files#image-thumbnail-types)"
      },
      "w": {
        "type": "int",
        "doc": "Photo width"
      },
      "h": {
        "type": "int",
        "doc": "Photo height"
      },
      "sizes": {
        "type": "Vector<int>",
        "doc": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image."
      }
    }
  },
  "photoPathSize": {
    "doc": "Messages with animated stickers can have a compressed svg (< 300 bytes) to show the outline of the sticker before fetching the actual lottie animation.",
    "parameters": {
      "type": {
        "type": "string",
        "doc": "Always `j`"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Compressed SVG path payload, [see here for decompression instructions](https://core.telegram.org/api/files#vector-thumbnails)"
      }
    }
  },
  "geoPointEmpty": {
    "doc": "Empty constructor.",
    "parameters": {}
  },
  "geoPoint": {
    "doc": "GeoPoint.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "long": {
        "type": "double",
        "doc": "Longitude"
      },
      "lat": {
        "type": "double",
        "doc": "Latitude"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "accuracy_radius": {
        "type": "flags.0?int",
        "doc": "The estimated horizontal accuracy of the location, in meters; as defined by the sender."
      }
    }
  },
  "auth.sentCode": {
    "doc": "Contains info about a sent verification code.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "type": {
        "type": "auth.SentCodeType",
        "doc": "Phone code type"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash, to be stored and later re-used with [auth.signIn](https://core.telegram.org/method/auth.signIn)"
      },
      "next_type": {
        "type": "flags.1?auth.CodeType",
        "doc": "Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](https://core.telegram.org/method/auth.resendCode)"
      },
      "timeout": {
        "type": "flags.2?int",
        "doc": "Timeout for reception of the phone code"
      }
    }
  },
  "auth.sentCodeSuccess": {
    "doc": "The user successfully authorized using [future auth tokens](https://core.telegram.org/api/auth#future-auth-tokens)",
    "parameters": {
      "authorization": {
        "type": "auth.Authorization",
        "doc": "Authorization info"
      }
    }
  },
  "auth.authorization": {
    "doc": "Contains user authorization info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "setup_password_required": {
        "type": "flags.1?true",
        "doc": "Suggests the user to set up a 2-step verification password to be able to log in again"
      },
      "otherwise_relogin_days": {
        "type": "flags.1?int",
        "doc": "Iff setup\\_password\\_required is set and the user declines to set a 2-step verification password, they will be able to log into their account via SMS again only after this many days pass."
      },
      "tmp_sessions": {
        "type": "flags.0?int",
        "doc": "Temporary [passport](https://core.telegram.org/passport) sessions"
      },
      "future_auth_token": {
        "type": "flags.2?bytes",
        "doc": "A [future auth token](https://core.telegram.org/api/auth#future-auth-tokens)"
      },
      "user": {
        "type": "User",
        "doc": "Info on authorized user"
      }
    }
  },
  "auth.authorizationSignUpRequired": {
    "doc": "An account with this phone number doesn't exist on telegram: the user has to [enter basic information and sign up](https://core.telegram.org/api/auth)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "terms_of_service": {
        "type": "flags.0?help.TermsOfService",
        "doc": "Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram"
      }
    }
  },
  "auth.exportedAuthorization": {
    "doc": "Data for copying of authorization between data centers.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "current user identifier"
      },
      "bytes": {
        "type": "bytes",
        "doc": "authorizes key"
      }
    }
  },
  "inputNotifyPeer": {
    "doc": "Notifications generated by a certain user or group.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "User or group"
      }
    }
  },
  "inputNotifyUsers": {
    "doc": "Notifications generated by all users.",
    "parameters": {}
  },
  "inputNotifyChats": {
    "doc": "Notifications generated by all groups.",
    "parameters": {}
  },
  "inputNotifyBroadcasts": {
    "doc": "All [channels](https://core.telegram.org/api/channel)",
    "parameters": {}
  },
  "inputNotifyForumTopic": {
    "doc": "Notifications generated by a [topic](https://core.telegram.org/api/forum#forum-topics) in a [forum](https://core.telegram.org/api/forum).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Forum ID"
      },
      "top_msg_id": {
        "type": "int",
        "doc": "[Topic ID](https://core.telegram.org/api/forum#forum-topics)"
      }
    }
  },
  "inputPeerNotifySettings": {
    "doc": "Notification settings.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "show_previews": {
        "type": "flags.0?Bool",
        "doc": "If the text of the message shall be displayed in notification"
      },
      "silent": {
        "type": "flags.1?Bool",
        "doc": "Peer was muted?"
      },
      "mute_until": {
        "type": "flags.2?int",
        "doc": "Date until which all notifications shall be switched off"
      },
      "sound": {
        "type": "flags.3?NotificationSound",
        "doc": "Identifier of an audio file to play for notifications."
      },
      "stories_muted": {
        "type": "flags.6?Bool",
        "doc": "Whether story notifications should be disabled."
      },
      "stories_hide_sender": {
        "type": "flags.7?Bool",
        "doc": "Whether the sender name should be displayed in story notifications."
      },
      "stories_sound": {
        "type": "flags.8?NotificationSound",
        "doc": "Identifier of an audio file to play for story notifications."
      }
    }
  },
  "peerNotifySettings": {
    "doc": "Notification settings.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "show_previews": {
        "type": "flags.0?Bool",
        "doc": "(Ternary value) If set, indicates whether or not to display previews of messages in notifications; otherwise the default behavior should be used."
      },
      "silent": {
        "type": "flags.1?Bool",
        "doc": "(Ternary value) If set, indicates whether to mute or unmute the peer; otherwise the default behavior should be used."
      },
      "mute_until": {
        "type": "flags.2?int",
        "doc": "Mute all notifications until this date"
      },
      "ios_sound": {
        "type": "flags.3?NotificationSound",
        "doc": "Notification sound for the official iOS application"
      },
      "android_sound": {
        "type": "flags.4?NotificationSound",
        "doc": "Notification sound for the official android application"
      },
      "other_sound": {
        "type": "flags.5?NotificationSound",
        "doc": "Notification sound for other applications"
      },
      "stories_muted": {
        "type": "flags.6?Bool",
        "doc": "Whether story notifications should be disabled."
      },
      "stories_hide_sender": {
        "type": "flags.7?Bool",
        "doc": "Whether the sender name should be displayed in story notifications."
      },
      "stories_ios_sound": {
        "type": "flags.8?NotificationSound",
        "doc": "Sound for story notifications on the official iOS application"
      },
      "stories_android_sound": {
        "type": "flags.9?NotificationSound",
        "doc": "Sound for story notifications on the official Android application"
      },
      "stories_other_sound": {
        "type": "flags.10?NotificationSound",
        "doc": "Sound for story notifications on other applications"
      }
    }
  },
  "peerSettings": {
    "doc": "List of actions that are possible when interacting with this user, to be shown as suggested actions in the [chat action bar »](https://core.telegram.org/api/action-bar), see [here »](https://core.telegram.org/api/action-bar) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "report_spam": {
        "type": "flags.0?true",
        "doc": "Whether we can still report the user for spam"
      },
      "add_contact": {
        "type": "flags.1?true",
        "doc": "Whether we can add the user as contact"
      },
      "block_contact": {
        "type": "flags.2?true",
        "doc": "Whether we can block the user"
      },
      "share_contact": {
        "type": "flags.3?true",
        "doc": "Whether we can share the user's contact"
      },
      "need_contacts_exception": {
        "type": "flags.4?true",
        "doc": "Whether a special exception for contacts is needed"
      },
      "report_geo": {
        "type": "flags.5?true",
        "doc": "Whether we can report a geogroup as irrelevant for this location"
      },
      "autoarchived": {
        "type": "flags.7?true",
        "doc": "Whether this peer was automatically archived according to [privacy settings](https://core.telegram.org/constructor/globalPrivacySettings) and can be unarchived"
      },
      "invite_members": {
        "type": "flags.8?true",
        "doc": "If set, this is a recently created group chat to which new members can be invited"
      },
      "request_chat_broadcast": {
        "type": "flags.10?true",
        "doc": "This flag is set if `request_chat_title` and `request_chat_date` fields are set and the [join request »](https://core.telegram.org/api/invites#join-requests) is related to a channel (otherwise if only the request fields are set, the [join request »](https://core.telegram.org/api/invites#join-requests) is related to a chat)."
      },
      "geo_distance": {
        "type": "flags.6?int",
        "doc": "Distance in meters between us and this peer"
      },
      "request_chat_title": {
        "type": "flags.9?string",
        "doc": "If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title."
      },
      "request_chat_date": {
        "type": "flags.9?int",
        "doc": "If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the [join request »](https://core.telegram.org/api/invites#join-requests) was sent."
      }
    }
  },
  "wallPaper": {
    "doc": "Represents a [wallpaper](https://core.telegram.org/api/wallpapers) based on an image.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Identifier"
      },
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "creator": {
        "type": "flags.0?true",
        "doc": "Whether we created this wallpaper"
      },
      "default": {
        "type": "flags.1?true",
        "doc": "Whether this is the default wallpaper"
      },
      "pattern": {
        "type": "flags.3?true",
        "doc": "Whether this is a [pattern wallpaper »](https://core.telegram.org/api/wallpapers#pattern-wallpapers)"
      },
      "dark": {
        "type": "flags.4?true",
        "doc": "Whether this wallpaper should be used in dark mode."
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "slug": {
        "type": "string",
        "doc": "Unique wallpaper ID, used when generating [wallpaper links](https://core.telegram.org/api/links#wallpaper-links) or [importing wallpaper links](https://core.telegram.org/api/wallpapers)."
      },
      "document": {
        "type": "Document",
        "doc": "The actual wallpaper"
      },
      "settings": {
        "type": "flags.2?WallPaperSettings",
        "doc": "Info on how to generate the wallpaper, according to [these instructions »](https://core.telegram.org/api/wallpapers)."
      }
    }
  },
  "wallPaperNoFile": {
    "doc": "Represents a [wallpaper](https://core.telegram.org/api/wallpapers) only based on colors/gradients.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Wallpaper ID"
      },
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "default": {
        "type": "flags.1?true",
        "doc": "Whether this is the default wallpaper"
      },
      "dark": {
        "type": "flags.4?true",
        "doc": "Whether this wallpaper should be used in dark mode."
      },
      "settings": {
        "type": "flags.2?WallPaperSettings",
        "doc": "Info on how to generate the wallpaper."
      }
    }
  },
  "inputReportReasonSpam": {
    "doc": "Report for spam",
    "parameters": {}
  },
  "inputReportReasonViolence": {
    "doc": "Report for violence",
    "parameters": {}
  },
  "inputReportReasonPornography": {
    "doc": "Report for pornography",
    "parameters": {}
  },
  "inputReportReasonChildAbuse": {
    "doc": "Report for child abuse",
    "parameters": {}
  },
  "inputReportReasonOther": {
    "doc": "Other",
    "parameters": {}
  },
  "inputReportReasonCopyright": {
    "doc": "Report for copyrighted content",
    "parameters": {}
  },
  "inputReportReasonGeoIrrelevant": {
    "doc": "Report an irrelevant geogroup",
    "parameters": {}
  },
  "inputReportReasonFake": {
    "doc": "Report for impersonation",
    "parameters": {}
  },
  "inputReportReasonIllegalDrugs": {
    "doc": "Report for illegal drugs",
    "parameters": {}
  },
  "inputReportReasonPersonalDetails": {
    "doc": "Report for divulgation of personal details",
    "parameters": {}
  },
  "userFull": {
    "doc": "Extended user info",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "blocked": {
        "type": "flags.0?true",
        "doc": "Whether you have blocked this user"
      },
      "phone_calls_available": {
        "type": "flags.4?true",
        "doc": "Whether this user can make VoIP calls"
      },
      "phone_calls_private": {
        "type": "flags.5?true",
        "doc": "Whether this user's privacy settings allow you to call them"
      },
      "can_pin_message": {
        "type": "flags.7?true",
        "doc": "Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself"
      },
      "has_scheduled": {
        "type": "flags.12?true",
        "doc": "Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available"
      },
      "video_calls_available": {
        "type": "flags.13?true",
        "doc": "Whether the user can receive video calls"
      },
      "voice_messages_forbidden": {
        "type": "flags.20?true",
        "doc": "Whether this user doesn't allow sending voice messages in a private chat with them"
      },
      "translations_disabled": {
        "type": "flags.23?true",
        "doc": "Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden."
      },
      "stories_pinned_available": {
        "type": "flags.26?true",
        "doc": "Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories)."
      },
      "blocked_my_stories_from": {
        "type": "flags.27?true",
        "doc": "Whether we've [blocked this user, preventing them from seeing our stories »](https://core.telegram.org/api/block)."
      },
      "wallpaper_overridden": {
        "type": "flags.28?true",
        "doc": "Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the `for_both` flag, see [here »](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info."
      },
      "id": {
        "type": "long",
        "doc": "User ID"
      },
      "about": {
        "type": "flags.1?string",
        "doc": "Bio of the user"
      },
      "settings": {
        "type": "PeerSettings",
        "doc": "Peer settings"
      },
      "personal_photo": {
        "type": "flags.21?Photo",
        "doc": "Personal profile photo, to be shown instead of `profile_photo`."
      },
      "profile_photo": {
        "type": "flags.2?Photo",
        "doc": "Profile photo"
      },
      "fallback_photo": {
        "type": "flags.22?Photo",
        "doc": "Fallback profile photo, displayed if no photo is present in `profile_photo` or `personal_photo`, due to privacy settings."
      },
      "notify_settings": {
        "type": "PeerNotifySettings",
        "doc": "Notification settings"
      },
      "bot_info": {
        "type": "flags.3?BotInfo",
        "doc": "For bots, info about the bot (bot commands, etc)"
      },
      "pinned_msg_id": {
        "type": "flags.6?int",
        "doc": "Message ID of the last [pinned message](https://core.telegram.org/api/pin)"
      },
      "common_chats_count": {
        "type": "int",
        "doc": "Chats in common with this user"
      },
      "folder_id": {
        "type": "flags.11?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "ttl_period": {
        "type": "flags.14?int",
        "doc": "Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted."
      },
      "theme_emoticon": {
        "type": "flags.15?string",
        "doc": "Emoji associated with chat theme"
      },
      "private_forward_name": {
        "type": "flags.16?string",
        "doc": "Anonymized text to be shown instead of the user's name on forwarded messages"
      },
      "bot_group_admin_rights": {
        "type": "flags.17?ChatAdminRights",
        "doc": "A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a group, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights)."
      },
      "bot_broadcast_admin_rights": {
        "type": "flags.18?ChatAdminRights",
        "doc": "A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a channel, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights)."
      },
      "premium_gifts": {
        "type": "flags.19?Vector<PremiumGiftOption>",
        "doc": "Telegram Premium subscriptions gift options"
      },
      "wallpaper": {
        "type": "flags.24?WallPaper",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) to use in the private chat with the user."
      },
      "stories": {
        "type": "flags.25?PeerStories",
        "doc": "Active [stories »](https://core.telegram.org/api/stories)"
      }
    }
  },
  "contact": {
    "doc": "A contact of the current user that is registered in the system.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "mutual": {
        "type": "Bool",
        "doc": "Current user is in the user's contact list"
      }
    }
  },
  "importedContact": {
    "doc": "Successfully imported contact.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "client_id": {
        "type": "long",
        "doc": "The contact's client identifier (passed to one of the [InputContact](https://core.telegram.org/type/InputContact) constructors)"
      }
    }
  },
  "contactStatus": {
    "doc": "Contact status: online / offline.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "status": {
        "type": "UserStatus",
        "doc": "Online status"
      }
    }
  },
  "contacts.contactsNotModified": {
    "doc": "Contact list on the server is the same as the list on the client.",
    "parameters": {}
  },
  "contacts.contacts": {
    "doc": "The current user's contact list and info on users.",
    "parameters": {
      "contacts": {
        "type": "Vector<Contact>",
        "doc": "Contact list"
      },
      "saved_count": {
        "type": "int",
        "doc": "Number of contacts that were saved successfully"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "User list"
      }
    }
  },
  "contacts.importedContacts": {
    "doc": "Info on successfully imported contacts.",
    "parameters": {
      "imported": {
        "type": "Vector<ImportedContact>",
        "doc": "List of successfully imported contacts"
      },
      "popular_invites": {
        "type": "Vector<PopularContact>",
        "doc": "Popular contacts"
      },
      "retry_contacts": {
        "type": "Vector<long>",
        "doc": "List of contact ids that could not be imported due to system limitation and will need to be imported at a later date."
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users"
      }
    }
  },
  "contacts.blocked": {
    "doc": "Full list of blocked users.",
    "parameters": {
      "blocked": {
        "type": "Vector<PeerBlocked>",
        "doc": "List of blocked users"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Blocked chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users"
      }
    }
  },
  "contacts.blockedSlice": {
    "doc": "Incomplete list of blocked users.",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of elements in the list"
      },
      "blocked": {
        "type": "Vector<PeerBlocked>",
        "doc": "List of blocked users"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Blocked chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users"
      }
    }
  },
  "messages.dialogs": {
    "doc": "Full list of chats with messages and auxiliary data.",
    "parameters": {
      "dialogs": {
        "type": "Vector<Dialog>",
        "doc": "List of chats"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "List of last messages from each chat"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of groups mentioned in the chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in messages and groups"
      }
    }
  },
  "messages.dialogsSlice": {
    "doc": "Incomplete list of dialogs with messages and auxiliary data.",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of dialogs"
      },
      "dialogs": {
        "type": "Vector<Dialog>",
        "doc": "List of dialogs"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "List of last messages from dialogs"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in dialogs"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in messages and chats"
      }
    }
  },
  "messages.dialogsNotModified": {
    "doc": "Dialogs haven't changed",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of dialogs found server-side by the query"
      }
    }
  },
  "messages.messages": {
    "doc": "Full list of messages with auxiliary data.",
    "parameters": {
      "messages": {
        "type": "Vector<Message>",
        "doc": "List of messages"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in dialogs"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in messages and chats"
      }
    }
  },
  "messages.messagesSlice": {
    "doc": "Incomplete list of messages and auxiliary data.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inexact": {
        "type": "flags.1?true",
        "doc": "If set, indicates that the results may be inexact"
      },
      "count": {
        "type": "int",
        "doc": "Total number of messages in the list"
      },
      "next_rate": {
        "type": "flags.0?int",
        "doc": "Rate to use in the `offset_rate` parameter in the next call to [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal)"
      },
      "offset_id_offset": {
        "type": "flags.2?int",
        "doc": "Indicates the absolute position of `messages[0]` within the total result set with count `count`.  \nThis is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`."
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "List of messages"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in messages"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in messages and chats"
      }
    }
  },
  "messages.channelMessages": {
    "doc": "Channel messages",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inexact": {
        "type": "flags.1?true",
        "doc": "If set, returned results may be inexact"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of results were found server-side (may not be all included here)"
      },
      "offset_id_offset": {
        "type": "flags.2?int",
        "doc": "Indicates the absolute position of `messages[0]` within the total result set with count `count`.  \nThis is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`."
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "Found messages"
      },
      "topics": {
        "type": "Vector<ForumTopic>",
        "doc": "[Forum topic](https://core.telegram.org/api/forum#forum-topics) information"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "messages.messagesNotModified": {
    "doc": "No new messages matching the query were found",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of results found server-side by the given query"
      }
    }
  },
  "messages.chats": {
    "doc": "List of chats with auxiliary data.",
    "parameters": {
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats"
      }
    }
  },
  "messages.chatsSlice": {
    "doc": "Partial list of chats, more would have to be fetched with [pagination](https://core.telegram.org/api/offsets)",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of results that were found server-side (not all are included in `chats`)"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      }
    }
  },
  "messages.chatFull": {
    "doc": "Full info about a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups), [gigagroup](https://core.telegram.org/api/channel#gigagroups) or [basic group](https://core.telegram.org/api/channel#basic-groups).",
    "parameters": {
      "full_chat": {
        "type": "ChatFull",
        "doc": "Full info"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.affectedHistory": {
    "doc": "Affected part of communication history with the user or in a chat.",
    "parameters": {
      "pts": {
        "type": "int",
        "doc": "Number of events occurred in a text box"
      },
      "pts_count": {
        "type": "int",
        "doc": "Number of affected events"
      },
      "offset": {
        "type": "int",
        "doc": "If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease"
      }
    }
  },
  "inputMessagesFilterEmpty": {
    "doc": "Filter is absent.",
    "parameters": {}
  },
  "inputMessagesFilterPhotos": {
    "doc": "Filter for messages containing photos.",
    "parameters": {}
  },
  "inputMessagesFilterVideo": {
    "doc": "Filter for messages containing videos.",
    "parameters": {}
  },
  "inputMessagesFilterPhotoVideo": {
    "doc": "Filter for messages containing photos or videos.",
    "parameters": {}
  },
  "inputMessagesFilterDocument": {
    "doc": "Filter for messages containing documents.",
    "parameters": {}
  },
  "inputMessagesFilterUrl": {
    "doc": "Return only messages containing URLs",
    "parameters": {}
  },
  "inputMessagesFilterGif": {
    "doc": "Return only messages containing gifs",
    "parameters": {}
  },
  "inputMessagesFilterVoice": {
    "doc": "Return only messages containing voice notes",
    "parameters": {}
  },
  "inputMessagesFilterMusic": {
    "doc": "Return only messages containing audio files",
    "parameters": {}
  },
  "inputMessagesFilterChatPhotos": {
    "doc": "Return only chat photo changes",
    "parameters": {}
  },
  "inputMessagesFilterPhoneCalls": {
    "doc": "Return only phone calls",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "missed": {
        "type": "flags.0?true",
        "doc": "Return only missed phone calls"
      }
    }
  },
  "inputMessagesFilterRoundVoice": {
    "doc": "Return only round videos and voice notes",
    "parameters": {}
  },
  "inputMessagesFilterRoundVideo": {
    "doc": "Return only round videos",
    "parameters": {}
  },
  "inputMessagesFilterMyMentions": {
    "doc": "Return only messages where the current user was [mentioned](https://core.telegram.org/api/mentions).",
    "parameters": {}
  },
  "inputMessagesFilterGeo": {
    "doc": "Return only messages containing geolocations",
    "parameters": {}
  },
  "inputMessagesFilterContacts": {
    "doc": "Return only messages containing contacts",
    "parameters": {}
  },
  "inputMessagesFilterPinned": {
    "doc": "Fetch only pinned messages",
    "parameters": {}
  },
  "updateNewMessage": {
    "doc": "New message in a private chat or in a [basic group](https://core.telegram.org/api/channel#basic-groups).",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "Message"
      },
      "pts": {
        "type": "int",
        "doc": "New quantity of actions in a message box"
      },
      "pts_count": {
        "type": "int",
        "doc": "Number of generated events"
      }
    }
  },
  "updateMessageID": {
    "doc": "Sent message with **random\\_id** client identifier was assigned an identifier.",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "**id** identifier of a respective [Message](https://core.telegram.org/type/Message)"
      },
      "random_id": {
        "type": "long",
        "doc": "Previously transferred client **random\\_id** identifier"
      }
    }
  },
  "updateDeleteMessages": {
    "doc": "Messages were deleted.",
    "parameters": {
      "messages": {
        "type": "Vector<int>",
        "doc": "List of identifiers of deleted messages"
      },
      "pts": {
        "type": "int",
        "doc": "New quality of actions in a message box"
      },
      "pts_count": {
        "type": "int",
        "doc": "Number of generated [events](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateUserTyping": {
    "doc": "The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User id"
      },
      "action": {
        "type": "SendMessageAction",
        "doc": "Action type"
      }
    }
  },
  "updateChatUserTyping": {
    "doc": "The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Group id"
      },
      "from_id": {
        "type": "Peer",
        "doc": "Peer that started typing (can be the chat itself, in case of anonymous admins)."
      },
      "action": {
        "type": "SendMessageAction",
        "doc": "Type of action"
      }
    }
  },
  "updateChatParticipants": {
    "doc": "Composition of chat participants changed.",
    "parameters": {
      "participants": {
        "type": "ChatParticipants",
        "doc": "Updated chat participants"
      }
    }
  },
  "updateUserStatus": {
    "doc": "Contact status update.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "status": {
        "type": "UserStatus",
        "doc": "New status"
      }
    }
  },
  "updateUserName": {
    "doc": "Changes the user's first name, last name and username.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User identifier"
      },
      "first_name": {
        "type": "string",
        "doc": "New first name. Corresponds to the new value of **real\\_first\\_name** field of the [userFull](https://core.telegram.org/constructor/userFull) constructor."
      },
      "last_name": {
        "type": "string",
        "doc": "New last name. Corresponds to the new value of **real\\_last\\_name** field of the [userFull](https://core.telegram.org/constructor/userFull) constructor."
      },
      "usernames": {
        "type": "Vector<Username>",
        "doc": "Usernames."
      }
    }
  },
  "updateNewAuthorization": {
    "doc": "A new session logged into the current user's account through an unknown device.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "unconfirmed": {
        "type": "flags.0?true",
        "doc": "Whether the session is [unconfirmed, see here »](https://core.telegram.org/api/auth#confirming-login) for more info."
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "date": {
        "type": "flags.0?int",
        "doc": "Authorization date"
      },
      "device": {
        "type": "flags.0?string",
        "doc": "Name of device, for example _Android_"
      },
      "location": {
        "type": "flags.0?string",
        "doc": "Location, for example _USA, NY (IP=1.2.3.4)_"
      }
    }
  },
  "updateNewEncryptedMessage": {
    "doc": "New encrypted message.",
    "parameters": {
      "message": {
        "type": "EncryptedMessage",
        "doc": "Message"
      },
      "qts": {
        "type": "int",
        "doc": "New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info."
      }
    }
  },
  "updateEncryptedChatTyping": {
    "doc": "Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing.",
    "parameters": {
      "chat_id": {
        "type": "int",
        "doc": "Chat ID"
      }
    }
  },
  "updateEncryption": {
    "doc": "Change of state in an encrypted chat.",
    "parameters": {
      "chat": {
        "type": "EncryptedChat",
        "doc": "Encrypted chat"
      },
      "date": {
        "type": "int",
        "doc": "Date of change"
      }
    }
  },
  "updateEncryptedMessagesRead": {
    "doc": "Communication history in an encrypted chat was marked as read.",
    "parameters": {
      "chat_id": {
        "type": "int",
        "doc": "Chat ID"
      },
      "max_date": {
        "type": "int",
        "doc": "Maximum value of data for read messages"
      },
      "date": {
        "type": "int",
        "doc": "Time when messages were read"
      }
    }
  },
  "updateChatParticipantAdd": {
    "doc": "New group member.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Group ID"
      },
      "user_id": {
        "type": "long",
        "doc": "ID of the new member"
      },
      "inviter_id": {
        "type": "long",
        "doc": "ID of the user, who added member to the group"
      },
      "date": {
        "type": "int",
        "doc": "When was the participant added"
      },
      "version": {
        "type": "int",
        "doc": "Chat version number"
      }
    }
  },
  "updateChatParticipantDelete": {
    "doc": "A member has left the group.",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Group ID"
      },
      "user_id": {
        "type": "long",
        "doc": "ID of the user"
      },
      "version": {
        "type": "int",
        "doc": "Used in basic groups to reorder updates and make sure that all of them was received."
      }
    }
  },
  "updateDcOptions": {
    "doc": "Changes in the data center configuration options.",
    "parameters": {
      "dc_options": {
        "type": "Vector<DcOption>",
        "doc": "New connection options"
      }
    }
  },
  "updateNotifySettings": {
    "doc": "Changes in notification settings.",
    "parameters": {
      "peer": {
        "type": "NotifyPeer",
        "doc": "Notification source"
      },
      "notify_settings": {
        "type": "PeerNotifySettings",
        "doc": "New notification settings"
      }
    }
  },
  "updateServiceNotification": {
    "doc": "A service message for the user.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "popup": {
        "type": "flags.0?true",
        "doc": "If set, the message must be displayed in a popup."
      },
      "invert_media": {
        "type": "flags.2?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "inbox_date": {
        "type": "flags.1?int",
        "doc": "When was the notification received  \nThe message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications)."
      },
      "type": {
        "type": "string",
        "doc": "String, identical in format and contents to the [**type**](https://core.telegram.org/api/errors#error-type) field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same **type** within a short period of time (15 minutes)."
      },
      "message": {
        "type": "string",
        "doc": "Message text"
      },
      "media": {
        "type": "MessageMedia",
        "doc": "Media content (optional)"
      },
      "entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "updatePrivacy": {
    "doc": "Privacy rules were changed",
    "parameters": {
      "key": {
        "type": "PrivacyKey",
        "doc": "Peers to which the privacy rules apply"
      },
      "rules": {
        "type": "Vector<PrivacyRule>",
        "doc": "New privacy rules"
      }
    }
  },
  "updateUserPhone": {
    "doc": "A user's phone number was changed",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "phone": {
        "type": "string",
        "doc": "New phone number"
      }
    }
  },
  "updateReadHistoryInbox": {
    "doc": "Incoming messages were read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "folder_id": {
        "type": "flags.0?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "max_id": {
        "type": "int",
        "doc": "Maximum ID of messages read"
      },
      "still_unread_count": {
        "type": "int",
        "doc": "Number of messages that are still unread"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateReadHistoryOutbox": {
    "doc": "Outgoing messages were read",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "max_id": {
        "type": "int",
        "doc": "Maximum ID of read outgoing messages"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateWebPage": {
    "doc": "An [instant view](https://instantview.telegram.org) webpage preview was generated",
    "parameters": {
      "webpage": {
        "type": "WebPage",
        "doc": "Webpage preview"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateReadMessagesContents": {
    "doc": "Contents of messages in the common [message box](https://core.telegram.org/api/updates) were read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "IDs of read messages"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      },
      "date": {
        "type": "flags.0?int",
        "doc": "When was the last message in `messages` marked as read."
      }
    }
  },
  "updateChannelTooLong": {
    "doc": "There are new updates in the specified channel, the client must fetch them.  \nIf the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel_id": {
        "type": "long",
        "doc": "The channel"
      },
      "pts": {
        "type": "flags.0?int",
        "doc": "The [PTS](https://core.telegram.org/api/updates)."
      }
    }
  },
  "updateChannel": {
    "doc": "A new channel or supergroup is available, or info about an existing channel has changed and must be refeteched.",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      }
    }
  },
  "updateNewChannelMessage": {
    "doc": "A new message was sent in a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "New message"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateReadChannelInbox": {
    "doc": "Incoming messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "folder_id": {
        "type": "flags.0?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "channel_id": {
        "type": "long",
        "doc": "Channel/supergroup ID"
      },
      "max_id": {
        "type": "int",
        "doc": "Position up to which all incoming messages are read."
      },
      "still_unread_count": {
        "type": "int",
        "doc": "Count of messages weren't read yet"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateDeleteChannelMessages": {
    "doc": "Some messages in a [supergroup/channel](https://core.telegram.org/api/channel) were deleted",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "IDs of messages that were deleted"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateChannelMessageViews": {
    "doc": "The view counter of a message in a channel has changed",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "id": {
        "type": "int",
        "doc": "ID of the message"
      },
      "views": {
        "type": "int",
        "doc": "New view counter"
      }
    }
  },
  "updateChatParticipantAdmin": {
    "doc": "Admin permissions of a user in a [basic group](https://core.telegram.org/api/channel#basic-groups) were changed",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      },
      "user_id": {
        "type": "long",
        "doc": "ID of the (de)admined user"
      },
      "is_admin": {
        "type": "Bool",
        "doc": "Whether the user was rendered admin"
      },
      "version": {
        "type": "int",
        "doc": "Used in basic groups to reorder updates and make sure that all of them was received."
      }
    }
  },
  "updateNewStickerSet": {
    "doc": "A new stickerset was installed",
    "parameters": {
      "stickerset": {
        "type": "messages.StickerSet",
        "doc": "The installed stickerset"
      }
    }
  },
  "updateStickerSetsOrder": {
    "doc": "The order of stickersets was changed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "masks": {
        "type": "flags.0?true",
        "doc": "Whether the updated stickers are mask stickers"
      },
      "emojis": {
        "type": "flags.1?true",
        "doc": "Whether the updated stickers are custom emoji stickers"
      },
      "order": {
        "type": "Vector<long>",
        "doc": "New sticker order by sticker ID"
      }
    }
  },
  "updateStickerSets": {
    "doc": "Installed stickersets have changed, the client should refetch them as [described in the docs](https://core.telegram.org/api/stickers#installing-stickersets).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "masks": {
        "type": "flags.0?true",
        "doc": "Whether mask stickersets have changed"
      },
      "emojis": {
        "type": "flags.1?true",
        "doc": "Whether the list of installed [custom emoji stickersets](https://core.telegram.org/api/custom-emoji) has changed"
      }
    }
  },
  "updateSavedGifs": {
    "doc": "The saved gif list has changed, the client should refetch it using [messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs)",
    "parameters": {}
  },
  "updateBotInlineQuery": {
    "doc": "An incoming inline query",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "query_id": {
        "type": "long",
        "doc": "Query ID"
      },
      "user_id": {
        "type": "long",
        "doc": "User that sent the query"
      },
      "query": {
        "type": "string",
        "doc": "Text of query"
      },
      "geo": {
        "type": "flags.0?GeoPoint",
        "doc": "Attached geolocation"
      },
      "peer_type": {
        "type": "flags.1?InlineQueryPeerType",
        "doc": "Type of the chat from which the inline query was sent."
      },
      "offset": {
        "type": "string",
        "doc": "Offset to navigate through results"
      }
    }
  },
  "updateBotInlineSend": {
    "doc": "The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the [feedback collecting](https://core.telegram.org/bots/inline#collecting-feedback) for details on how to enable these updates for your bot.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "user_id": {
        "type": "long",
        "doc": "The user that chose the result"
      },
      "query": {
        "type": "string",
        "doc": "The query that was used to obtain the result"
      },
      "geo": {
        "type": "flags.0?GeoPoint",
        "doc": "Optional. Sender location, only for bots that require user location"
      },
      "id": {
        "type": "string",
        "doc": "The unique identifier for the result that was chosen"
      },
      "msg_id": {
        "type": "flags.1?InputBotInlineMessageID",
        "doc": "Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message."
      }
    }
  },
  "updateEditChannelMessage": {
    "doc": "A message was edited in a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The new message"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateBotCallbackQuery": {
    "doc": "A callback button was pressed, and the button data was sent to the bot that created the button",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "query_id": {
        "type": "long",
        "doc": "Query ID"
      },
      "user_id": {
        "type": "long",
        "doc": "ID of the user that pressed the button"
      },
      "peer": {
        "type": "Peer",
        "doc": "Chat where the inline keyboard was sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "chat_instance": {
        "type": "long",
        "doc": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games."
      },
      "data": {
        "type": "flags.0?bytes",
        "doc": "Callback data"
      },
      "game_short_name": {
        "type": "flags.1?string",
        "doc": "Short name of a Game to be returned, serves as the unique identifier for the game"
      }
    }
  },
  "updateEditMessage": {
    "doc": "A message was edited",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The new edited message"
      },
      "pts": {
        "type": "int",
        "doc": "[PTS](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[PTS count](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateInlineBotCallbackQuery": {
    "doc": "This notification is received by bots when a button is pressed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "query_id": {
        "type": "long",
        "doc": "Query ID"
      },
      "user_id": {
        "type": "long",
        "doc": "ID of the user that pressed the button"
      },
      "msg_id": {
        "type": "InputBotInlineMessageID",
        "doc": "ID of the inline message with the button"
      },
      "chat_instance": {
        "type": "long",
        "doc": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games."
      },
      "data": {
        "type": "flags.0?bytes",
        "doc": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field."
      },
      "game_short_name": {
        "type": "flags.1?string",
        "doc": "Short name of a Game to be returned, serves as the unique identifier for the game"
      }
    }
  },
  "updateReadChannelOutbox": {
    "doc": "Outgoing messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel/supergroup ID"
      },
      "max_id": {
        "type": "int",
        "doc": "Position up to which all outgoing messages are read."
      }
    }
  },
  "updateDraftMessage": {
    "doc": "Notifies a change of a message [draft](https://core.telegram.org/api/drafts).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "Peer",
        "doc": "The peer to which the draft is associated"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "ID of the [forum topic](https://core.telegram.org/api/forum#forum-topics) to which the draft is associated"
      },
      "draft": {
        "type": "DraftMessage",
        "doc": "The draft"
      }
    }
  },
  "updateReadFeaturedStickers": {
    "doc": "Some featured stickers were marked as read",
    "parameters": {}
  },
  "updateRecentStickers": {
    "doc": "The recent sticker list was updated",
    "parameters": {}
  },
  "updateConfig": {
    "doc": "The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](https://core.telegram.org/method/help.getConfig)",
    "parameters": {}
  },
  "updatePtsChanged": {
    "doc": "[Common message box sequence PTS](https://core.telegram.org/api/updates) has changed, [state has to be refetched using updates.getState](https://core.telegram.org/api/updates#fetching-state)",
    "parameters": {}
  },
  "updateChannelWebPage": {
    "doc": "A webpage preview of a link in a [channel/supergroup](https://core.telegram.org/api/channel) message was generated",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel) ID"
      },
      "webpage": {
        "type": "WebPage",
        "doc": "Generated webpage preview"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateDialogPinned": {
    "doc": "A dialog was pinned/unpinned",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether the dialog was pinned"
      },
      "folder_id": {
        "type": "flags.1?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "peer": {
        "type": "DialogPeer",
        "doc": "The dialog"
      }
    }
  },
  "updatePinnedDialogs": {
    "doc": "Pinned dialogs were updated",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "folder_id": {
        "type": "flags.1?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "order": {
        "type": "flags.0?Vector<DialogPeer>",
        "doc": "New order of pinned dialogs"
      }
    }
  },
  "updateBotWebhookJSON": {
    "doc": "A new incoming event; for bots only",
    "parameters": {
      "data": {
        "type": "DataJSON",
        "doc": "The event"
      }
    }
  },
  "updateBotWebhookJSONQuery": {
    "doc": "A new incoming query; for bots only",
    "parameters": {
      "query_id": {
        "type": "long",
        "doc": "Query identifier"
      },
      "data": {
        "type": "DataJSON",
        "doc": "Query data"
      },
      "timeout": {
        "type": "int",
        "doc": "Query timeout"
      }
    }
  },
  "updateBotShippingQuery": {
    "doc": "This object contains information about an incoming shipping query.",
    "parameters": {
      "query_id": {
        "type": "long",
        "doc": "Unique query identifier"
      },
      "user_id": {
        "type": "long",
        "doc": "User who sent the query"
      },
      "payload": {
        "type": "bytes",
        "doc": "Bot specified invoice payload"
      },
      "shipping_address": {
        "type": "PostAddress",
        "doc": "User specified shipping address"
      }
    }
  },
  "updateBotPrecheckoutQuery": {
    "doc": "This object contains information about an incoming pre-checkout query.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "query_id": {
        "type": "long",
        "doc": "Unique query identifier"
      },
      "user_id": {
        "type": "long",
        "doc": "User who sent the query"
      },
      "payload": {
        "type": "bytes",
        "doc": "Bot specified invoice payload"
      },
      "info": {
        "type": "flags.0?PaymentRequestedInfo",
        "doc": "Order info provided by the user"
      },
      "shipping_option_id": {
        "type": "flags.1?string",
        "doc": "Identifier of the shipping option chosen by the user"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "total_amount": {
        "type": "long",
        "doc": "Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "updatePhoneCall": {
    "doc": "An incoming phone call",
    "parameters": {
      "phone_call": {
        "type": "PhoneCall",
        "doc": "Phone call"
      }
    }
  },
  "updateLangPackTooLong": {
    "doc": "A language pack has changed, the client should manually fetch the changed strings using [langpack.getDifference](https://core.telegram.org/method/langpack.getDifference)",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "updateLangPack": {
    "doc": "Language pack updated",
    "parameters": {
      "difference": {
        "type": "LangPackDifference",
        "doc": "Changed strings"
      }
    }
  },
  "updateFavedStickers": {
    "doc": "The list of favorited stickers was changed, the client should call [messages.getFavedStickers](https://core.telegram.org/method/messages.getFavedStickers) to refetch the new list",
    "parameters": {}
  },
  "updateChannelReadMessagesContents": {
    "doc": "The specified [channel/supergroup](https://core.telegram.org/api/channel) messages were read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel_id": {
        "type": "long",
        "doc": "[Channel/supergroup](https://core.telegram.org/api/channel) ID"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "[Forum topic ID](https://core.telegram.org/api/forum#forum-topics)."
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "IDs of messages that were read"
      }
    }
  },
  "updateContactsReset": {
    "doc": "All contacts were deleted",
    "parameters": {}
  },
  "updateChannelAvailableMessages": {
    "doc": "The history of a [channel/supergroup](https://core.telegram.org/api/channel) was hidden.",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel/supergroup ID"
      },
      "available_min_id": {
        "type": "int",
        "doc": "Identifier of a maximum unavailable message in a channel due to hidden history."
      }
    }
  },
  "updateDialogUnreadMark": {
    "doc": "The manual unread mark of a chat was changed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "unread": {
        "type": "flags.0?true",
        "doc": "Was the chat marked or unmarked as read"
      },
      "peer": {
        "type": "DialogPeer",
        "doc": "The dialog"
      }
    }
  },
  "updateMessagePoll": {
    "doc": "The results of a poll have changed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "poll_id": {
        "type": "long",
        "doc": "Poll ID"
      },
      "poll": {
        "type": "flags.0?Poll",
        "doc": "If the server knows the client hasn't cached this poll yet, the poll itself"
      },
      "results": {
        "type": "PollResults",
        "doc": "New poll results"
      }
    }
  },
  "updateChatDefaultBannedRights": {
    "doc": "Default banned rights in a [normal chat](https://core.telegram.org/api/channel) were updated",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The chat"
      },
      "default_banned_rights": {
        "type": "ChatBannedRights",
        "doc": "New default banned rights"
      },
      "version": {
        "type": "int",
        "doc": "Version"
      }
    }
  },
  "updateFolderPeers": {
    "doc": "The peer list of a [peer folder](https://core.telegram.org/api/folders#peer-folders) was updated",
    "parameters": {
      "folder_peers": {
        "type": "Vector<FolderPeer>",
        "doc": "New peer list"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updatePeerSettings": {
    "doc": "Settings of a certain peer have changed",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer"
      },
      "settings": {
        "type": "PeerSettings",
        "doc": "Associated peer settings"
      }
    }
  },
  "updatePeerLocated": {
    "doc": "List of peers near you was updated",
    "parameters": {
      "peers": {
        "type": "Vector<PeerLocated>",
        "doc": "Geolocated peer list update"
      }
    }
  },
  "updateNewScheduledMessage": {
    "doc": "A message was added to the [schedule queue of a chat](https://core.telegram.org/api/scheduled-messages)",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "Message"
      }
    }
  },
  "updateDeleteScheduledMessages": {
    "doc": "Some [scheduled messages](https://core.telegram.org/api/scheduled-messages) were deleted from the schedule queue of a chat",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "Deleted scheduled messages"
      }
    }
  },
  "updateTheme": {
    "doc": "A cloud theme was updated",
    "parameters": {
      "theme": {
        "type": "Theme",
        "doc": "Theme"
      }
    }
  },
  "updateGeoLiveViewed": {
    "doc": "Live geoposition message was viewed",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The user that viewed the live geoposition"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID of geoposition message"
      }
    }
  },
  "updateLoginToken": {
    "doc": "A login token (for login via QR code) was accepted.",
    "parameters": {}
  },
  "updateMessagePollVote": {
    "doc": "A specific peer has voted in a poll",
    "parameters": {
      "poll_id": {
        "type": "long",
        "doc": "Poll ID"
      },
      "peer": {
        "type": "Peer",
        "doc": "The peer that voted in the poll"
      },
      "options": {
        "type": "Vector<bytes>",
        "doc": "Chosen option(s)"
      },
      "qts": {
        "type": "int",
        "doc": "New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info."
      }
    }
  },
  "updateDialogFilter": {
    "doc": "A new [folder](https://core.telegram.org/api/folders) was added",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "int",
        "doc": "[Folder](https://core.telegram.org/api/folders) ID"
      },
      "filter": {
        "type": "flags.0?DialogFilter",
        "doc": "[Folder](https://core.telegram.org/api/folders) info"
      }
    }
  },
  "updateDialogFilterOrder": {
    "doc": "New [folder](https://core.telegram.org/api/folders) order",
    "parameters": {
      "order": {
        "type": "Vector<int>",
        "doc": "Ordered [folder IDs](https://core.telegram.org/api/folders)"
      }
    }
  },
  "updateDialogFilters": {
    "doc": "Clients should update [folder](https://core.telegram.org/api/folders) info",
    "parameters": {}
  },
  "updatePhoneCallSignalingData": {
    "doc": "Incoming phone call signaling payload",
    "parameters": {
      "phone_call_id": {
        "type": "long",
        "doc": "Phone call ID"
      },
      "data": {
        "type": "bytes",
        "doc": "Signaling payload"
      }
    }
  },
  "updateChannelMessageForwards": {
    "doc": "The forward counter of a message in a channel has changed",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "id": {
        "type": "int",
        "doc": "ID of the message"
      },
      "forwards": {
        "type": "int",
        "doc": "New forward counter"
      }
    }
  },
  "updateReadChannelDiscussionInbox": {
    "doc": "Incoming comments in a [discussion thread](https://core.telegram.org/api/threads) were marked as read",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel_id": {
        "type": "long",
        "doc": "[Discussion group ID](https://core.telegram.org/api/channel)"
      },
      "top_msg_id": {
        "type": "int",
        "doc": "ID of the group message that started the [thread](https://core.telegram.org/api/threads) (message in linked discussion group)"
      },
      "read_max_id": {
        "type": "int",
        "doc": "Message ID of latest read incoming message for this [thread](https://core.telegram.org/api/threads)"
      },
      "broadcast_id": {
        "type": "flags.0?long",
        "doc": "If set, contains the ID of the [channel](https://core.telegram.org/api/channel) that contains the post that started the [comment thread](https://core.telegram.org/api/threads) in the discussion group (`channel_id`)"
      },
      "broadcast_post": {
        "type": "flags.0?int",
        "doc": "If set, contains the ID of the channel post that started the [comment thread](https://core.telegram.org/api/threads)"
      }
    }
  },
  "updateReadChannelDiscussionOutbox": {
    "doc": "Outgoing comments in a [discussion thread](https://core.telegram.org/api/threads) were marked as read",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "[Supergroup ID](https://core.telegram.org/api/channel)"
      },
      "top_msg_id": {
        "type": "int",
        "doc": "ID of the group message that started the [thread](https://core.telegram.org/api/threads)"
      },
      "read_max_id": {
        "type": "int",
        "doc": "Message ID of latest read outgoing message for this [thread](https://core.telegram.org/api/threads)"
      }
    }
  },
  "updatePeerBlocked": {
    "doc": "We blocked a peer, see [here »](https://core.telegram.org/api/block) for more info on blocklists.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "blocked": {
        "type": "flags.0?true",
        "doc": "Whether the peer was blocked or unblocked"
      },
      "blocked_my_stories_from": {
        "type": "flags.1?true",
        "doc": "Whether the peer was added/removed to/from the story blocklist; if not set, this update affects the main blocklist, see [here »](https://core.telegram.org/api/block) for more info."
      },
      "peer_id": {
        "type": "Peer",
        "doc": "The (un)blocked peer"
      }
    }
  },
  "updateChannelUserTyping": {
    "doc": "A user is typing in a [supergroup, channel](https://core.telegram.org/api/channel) or [message thread](https://core.telegram.org/api/threads)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "[Thread ID](https://core.telegram.org/api/threads)"
      },
      "from_id": {
        "type": "Peer",
        "doc": "The peer that is typing"
      },
      "action": {
        "type": "SendMessageAction",
        "doc": "Whether the user is typing, sending a media or doing something else"
      }
    }
  },
  "updatePinnedMessages": {
    "doc": "Some messages were pinned in a chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether the messages were pinned or unpinned"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "Message IDs"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updatePinnedChannelMessages": {
    "doc": "Messages were pinned/unpinned in a [channel/supergroup](https://core.telegram.org/api/channel)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether the messages were pinned or unpinned"
      },
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "Messages"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "updateChat": {
    "doc": "A new chat is available",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      }
    }
  },
  "updateGroupCallParticipants": {
    "doc": "The participant list of a certain group call has changed",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      },
      "participants": {
        "type": "Vector<GroupCallParticipant>",
        "doc": "New participant list"
      },
      "version": {
        "type": "int",
        "doc": "Version"
      }
    }
  },
  "updateGroupCall": {
    "doc": "A new groupcall was started",
    "parameters": {
      "chat_id": {
        "type": "long",
        "doc": "The [channel/supergroup](https://core.telegram.org/api/channel) where this group call or livestream takes place"
      },
      "call": {
        "type": "GroupCall",
        "doc": "Info about the group call or livestream"
      }
    }
  },
  "updatePeerHistoryTTL": {
    "doc": "The Time-To-Live for messages sent by the current user in a specific chat has changed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "Peer",
        "doc": "The chat"
      },
      "ttl_period": {
        "type": "flags.0?int",
        "doc": "The new Time-To-Live"
      }
    }
  },
  "updateChatParticipant": {
    "doc": "A user has joined or left a specific chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "chat_id": {
        "type": "long",
        "doc": "[Chat](https://core.telegram.org/api/channel) ID"
      },
      "date": {
        "type": "int",
        "doc": "When did this event occur"
      },
      "actor_id": {
        "type": "long",
        "doc": "User that triggered the change (inviter, admin that kicked the user, or the even the **user\\_id** itself)"
      },
      "user_id": {
        "type": "long",
        "doc": "User that was affected by the change"
      },
      "prev_participant": {
        "type": "flags.0?ChatParticipant",
        "doc": "Previous participant info (empty if this participant just joined)"
      },
      "new_participant": {
        "type": "flags.1?ChatParticipant",
        "doc": "New participant info (empty if this participant just left)"
      },
      "invite": {
        "type": "flags.2?ExportedChatInvite",
        "doc": "The invite that was used to join the group"
      },
      "qts": {
        "type": "int",
        "doc": "New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info."
      }
    }
  },
  "updateChannelParticipant": {
    "doc": "A participant has left, joined, was banned or admined in a [channel or supergroup](https://core.telegram.org/api/channel).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "via_chatlist": {
        "type": "flags.3?true",
        "doc": "Whether the participant joined using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "date": {
        "type": "int",
        "doc": "Date of the event"
      },
      "actor_id": {
        "type": "long",
        "doc": "User that triggered the change (inviter, admin that kicked the user, or the even the **user\\_id** itself)"
      },
      "user_id": {
        "type": "long",
        "doc": "User that was affected by the change"
      },
      "prev_participant": {
        "type": "flags.0?ChannelParticipant",
        "doc": "Previous participant status"
      },
      "new_participant": {
        "type": "flags.1?ChannelParticipant",
        "doc": "New participant status"
      },
      "invite": {
        "type": "flags.2?ExportedChatInvite",
        "doc": "Chat invite used to join the [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "qts": {
        "type": "int",
        "doc": "New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info."
      }
    }
  },
  "updateBotStopped": {
    "doc": "A bot was stopped or re-started.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "The user ID"
      },
      "date": {
        "type": "int",
        "doc": "When did this action occur"
      },
      "stopped": {
        "type": "Bool",
        "doc": "Whether the bot was stopped or started"
      },
      "qts": {
        "type": "int",
        "doc": "New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info."
      }
    }
  },
  "updateGroupCallConnection": {
    "doc": "New WebRTC parameters",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "presentation": {
        "type": "flags.0?true",
        "doc": "Are these parameters related to the screen capture session currently in progress?"
      },
      "params": {
        "type": "DataJSON",
        "doc": "WebRTC parameters"
      }
    }
  },
  "updateBotCommands": {
    "doc": "The [command set](https://core.telegram.org/api/bots/commands) of a certain bot in a certain chat has changed.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The affected chat"
      },
      "bot_id": {
        "type": "long",
        "doc": "ID of the bot that changed its command set"
      },
      "commands": {
        "type": "Vector<BotCommand>",
        "doc": "New bot commands"
      }
    }
  },
  "updatePendingJoinRequests": {
    "doc": "Someone has requested to join a chat or channel",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Chat or channel"
      },
      "requests_pending": {
        "type": "int",
        "doc": "Number of pending [join requests »](https://core.telegram.org/api/invites#join-requests) for the chat or channel"
      },
      "recent_requesters": {
        "type": "Vector<long>",
        "doc": "IDs of users that have recently requested to join"
      }
    }
  },
  "updateBotChatInviteRequester": {
    "doc": "Someone has requested to join a chat or channel (bots only, users will receive an [updatePendingJoinRequests](https://core.telegram.org/constructor/updatePendingJoinRequests), instead)",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The chat or channel in question"
      },
      "date": {
        "type": "int",
        "doc": "When was the [join request »](https://core.telegram.org/api/invites#join-requests) made"
      },
      "user_id": {
        "type": "long",
        "doc": "The user ID that is asking to join the chat or channel"
      },
      "about": {
        "type": "string",
        "doc": "Bio of the user"
      },
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "Chat invite link that was used by the user to send the [join request »](https://core.telegram.org/api/invites#join-requests)"
      },
      "qts": {
        "type": "int",
        "doc": "[QTS](https://core.telegram.org/api/updates) event sequence identifier"
      }
    }
  },
  "updateMessageReactions": {
    "doc": "New [message reactions »](https://core.telegram.org/api/reactions) are available",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "[Forum topic ID](https://core.telegram.org/api/forum#forum-topics)"
      },
      "reactions": {
        "type": "MessageReactions",
        "doc": "Reactions"
      }
    }
  },
  "updateAttachMenuBots": {
    "doc": "The list of installed [attachment menu entries »](https://core.telegram.org/api/bots/attach) has changed, use [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots) to fetch the updated list.",
    "parameters": {}
  },
  "updateWebViewResultSent": {
    "doc": "Indicates to a bot that a webview was closed and an inline message was sent on behalf of the user using [messages.sendWebViewResultMessage](https://core.telegram.org/method/messages.sendWebViewResultMessage)",
    "parameters": {
      "query_id": {
        "type": "long",
        "doc": "Web app interaction ID"
      }
    }
  },
  "updateBotMenuButton": {
    "doc": "The menu button behavior for the specified bot has changed",
    "parameters": {
      "bot_id": {
        "type": "long",
        "doc": "Bot ID"
      },
      "button": {
        "type": "BotMenuButton",
        "doc": "New menu button"
      }
    }
  },
  "updateSavedRingtones": {
    "doc": "The list of saved notification sounds has changed, use [account.getSavedRingtones](https://core.telegram.org/method/account.getSavedRingtones) to fetch the new list.",
    "parameters": {}
  },
  "updateTranscribedAudio": {
    "doc": "A pending [voice message transcription »](https://core.telegram.org/api/transcribe) initiated with [messages.transcribeAudio](https://core.telegram.org/method/messages.transcribeAudio) was updated.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pending": {
        "type": "flags.0?true",
        "doc": "Whether this transcription is still pending and further [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) about it will be sent in the future."
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer of the transcribed message"
      },
      "msg_id": {
        "type": "int",
        "doc": "Transcribed message ID"
      },
      "transcription_id": {
        "type": "long",
        "doc": "Transcription ID"
      },
      "text": {
        "type": "string",
        "doc": "Transcribed text"
      }
    }
  },
  "updateReadFeaturedEmojiStickers": {
    "doc": "Some featured [custom emoji stickers](https://core.telegram.org/api/custom-emoji) were marked as read",
    "parameters": {}
  },
  "updateUserEmojiStatus": {
    "doc": "The [emoji status](https://core.telegram.org/api/emoji-status) of a certain user has changed",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "emoji_status": {
        "type": "EmojiStatus",
        "doc": "New [emoji status](https://core.telegram.org/api/emoji-status)"
      }
    }
  },
  "updateRecentEmojiStatuses": {
    "doc": "The list of recent [emoji statuses](https://core.telegram.org/api/emoji-status) has changed",
    "parameters": {}
  },
  "updateRecentReactions": {
    "doc": "The list of recent [message reactions](https://core.telegram.org/api/reactions) has changed",
    "parameters": {}
  },
  "updateMoveStickerSetToTop": {
    "doc": "A stickerset was just moved to top, [see here for more info »](https://core.telegram.org/api/stickers#recent-stickersets)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "masks": {
        "type": "flags.0?true",
        "doc": "This update is referring to a [mask stickerset](https://core.telegram.org/api/stickers#mask-stickers)"
      },
      "emojis": {
        "type": "flags.1?true",
        "doc": "This update is referring to a [custom emoji stickerset](https://core.telegram.org/api/custom-emoji)"
      },
      "stickerset": {
        "type": "long",
        "doc": "[Stickerset](https://core.telegram.org/api/stickers) ID"
      }
    }
  },
  "updateMessageExtendedMedia": {
    "doc": "Extended media update",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "extended_media": {
        "type": "MessageExtendedMedia",
        "doc": "Extended media"
      }
    }
  },
  "updateChannelPinnedTopic": {
    "doc": "A [forum topic »](https://core.telegram.org/api/forum#forum-topics) was pinned or unpinned.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether the topic was pinned or unpinned"
      },
      "channel_id": {
        "type": "long",
        "doc": "The forum ID"
      },
      "topic_id": {
        "type": "int",
        "doc": "The topic ID"
      }
    }
  },
  "updateChannelPinnedTopics": {
    "doc": "The [pinned topics](https://core.telegram.org/api/forum#forum-topics) of a forum have changed.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel_id": {
        "type": "long",
        "doc": "Forum ID."
      },
      "order": {
        "type": "flags.0?Vector<int>",
        "doc": "Ordered list containing the IDs of all pinned topics."
      }
    }
  },
  "updateUser": {
    "doc": "User information was updated, it must be refetched using [users.getFullUser](https://core.telegram.org/method/users.getFullUser).",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      }
    }
  },
  "updateAutoSaveSettings": {
    "doc": "Media autosave settings have changed and must be refetched using [account.getAutoSaveSettings](https://core.telegram.org/method/account.getAutoSaveSettings).",
    "parameters": {}
  },
  "updateGroupInvitePrivacyForbidden": {
    "doc": "0-N updates of this type may be returned only when invoking [messages.addChatUser](https://core.telegram.org/method/messages.addChatUser), [channels.inviteToChannel](https://core.telegram.org/method/channels.inviteToChannel) or [messages.createChat](https://core.telegram.org/method/messages.createChat): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https://core.telegram.org/api/invites) can be shared with the user, instead.",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "ID of the user we couldn't add."
      }
    }
  },
  "updateStory": {
    "doc": "A new story was posted.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "ID of the poster."
      },
      "story": {
        "type": "StoryItem",
        "doc": "The story that was posted."
      }
    }
  },
  "updateReadStories": {
    "doc": "Stories of a specific peer were marked as read.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer"
      },
      "max_id": {
        "type": "int",
        "doc": "ID of the last story that was marked as read"
      }
    }
  },
  "updateStoryID": {
    "doc": "A story was successfully uploaded.",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "The `id` that was attributed to the story."
      },
      "random_id": {
        "type": "long",
        "doc": "The `random_id` that was passed to [stories.sendStory](https://core.telegram.org/method/stories.sendStory)."
      }
    }
  },
  "updateStoriesStealthMode": {
    "doc": "Indicates that [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode) was activated.",
    "parameters": {
      "stealth_mode": {
        "type": "StoriesStealthMode",
        "doc": "Information about the current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) session."
      }
    }
  },
  "updateSentStoryReaction": {
    "doc": "Indicates we [reacted to a story »](https://core.telegram.org/api/stories#reactions).",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer that sent the story"
      },
      "story_id": {
        "type": "int",
        "doc": "ID of the story we reacted to"
      },
      "reaction": {
        "type": "Reaction",
        "doc": "The reaction that was sent"
      }
    }
  },
  "updateBotChatBoost": {
    "doc": "A [channel boost](https://core.telegram.org/api/boost) has changed (bots only)",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Channel"
      },
      "boost": {
        "type": "Boost",
        "doc": "New boost information"
      },
      "qts": {
        "type": "int",
        "doc": "[QTS](https://core.telegram.org/api/updates) event sequence identifier"
      }
    }
  },
  "updateChannelViewForumAsMessages": {
    "doc": "Users may also choose to display messages from all topics as if they were sent to a normal group, using a \"View as messages\" setting in the local client.  \nThis setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of the `view_forum_as_messages` flag of [channelFull](https://core.telegram.org/constructor/channelFull) or [dialog](https://core.telegram.org/constructor/dialog) and emit an [updateChannelViewForumAsMessages](https://core.telegram.org/constructor/updateChannelViewForumAsMessages).",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "The forum ID"
      },
      "enabled": {
        "type": "Bool",
        "doc": "The new value of the toggle."
      }
    }
  },
  "updatePeerWallpaper": {
    "doc": "The [wallpaper »](https://core.telegram.org/api/wallpapers) of a given peer has changed.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "wallpaper_overridden": {
        "type": "flags.1?true",
        "doc": "Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the `for_both` flag, see [here »](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info."
      },
      "peer": {
        "type": "Peer",
        "doc": "The peer where the wallpaper has changed."
      },
      "wallpaper": {
        "type": "flags.0?WallPaper",
        "doc": "The new wallpaper, if none the wallpaper was removed and the default wallpaper should be used."
      }
    }
  },
  "updateBotMessageReaction": {
    "doc": "Bots only: a user has changed their reactions on a message with public reactions.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer of the reacted-to message."
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the reacted-to message."
      },
      "date": {
        "type": "int",
        "doc": "Date of the change."
      },
      "actor": {
        "type": "Peer",
        "doc": "The user that (un)reacted to the message."
      },
      "old_reactions": {
        "type": "Vector<Reaction>",
        "doc": "Old reactions"
      },
      "new_reactions": {
        "type": "Vector<Reaction>",
        "doc": "New reactions"
      },
      "qts": {
        "type": "int",
        "doc": "[QTS](https://core.telegram.org/api/updates) event sequence identifier"
      }
    }
  },
  "updateBotMessageReactions": {
    "doc": "Bots only: the number of reactions on a message with anonymous reactions has changed.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer of the reacted-to message."
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the reacted-to message."
      },
      "date": {
        "type": "int",
        "doc": "Date of the change."
      },
      "reactions": {
        "type": "Vector<ReactionCount>",
        "doc": "New reaction counters."
      },
      "qts": {
        "type": "int",
        "doc": "[QTS](https://core.telegram.org/api/updates) event sequence identifier"
      }
    }
  },
  "updateSavedDialogPinned": {
    "doc": "A [saved message dialog](https://core.telegram.org/api/saved-messages) was pinned/unpinned",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.0?true",
        "doc": "Whether the dialog was pinned"
      },
      "peer": {
        "type": "DialogPeer",
        "doc": "The dialog"
      }
    }
  },
  "updatePinnedSavedDialogs": {
    "doc": "[Pinned saved dialogs »](https://core.telegram.org/api/saved-messages) were updated",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "order": {
        "type": "flags.0?Vector<DialogPeer>",
        "doc": "New order of pinned saved dialogs"
      }
    }
  },
  "updates.state": {
    "doc": "Updates state.",
    "parameters": {
      "pts": {
        "type": "int",
        "doc": "Number of events occurred in a text box"
      },
      "qts": {
        "type": "int",
        "doc": "Position in a sequence of updates in secret chats. For further details refer to article [secret chats](https://core.telegram.org/api/end-to-end)"
      },
      "date": {
        "type": "int",
        "doc": "Date of condition"
      },
      "seq": {
        "type": "int",
        "doc": "Number of sent updates"
      },
      "unread_count": {
        "type": "int",
        "doc": "Number of unread messages"
      }
    }
  },
  "updates.differenceEmpty": {
    "doc": "No events.",
    "parameters": {
      "date": {
        "type": "int",
        "doc": "Current date"
      },
      "seq": {
        "type": "int",
        "doc": "Number of sent updates"
      }
    }
  },
  "updates.difference": {
    "doc": "Full list of occurred events.",
    "parameters": {
      "new_messages": {
        "type": "Vector<Message>",
        "doc": "List of new messages"
      },
      "new_encrypted_messages": {
        "type": "Vector<EncryptedMessage>",
        "doc": "List of new encrypted secret chat messages"
      },
      "other_updates": {
        "type": "Vector<Update>",
        "doc": "List of updates"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in events"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in events"
      },
      "state": {
        "type": "updates.State",
        "doc": "Current state"
      }
    }
  },
  "updates.differenceSlice": {
    "doc": "Incomplete list of occurred events.",
    "parameters": {
      "new_messages": {
        "type": "Vector<Message>",
        "doc": "List of new messages"
      },
      "new_encrypted_messages": {
        "type": "Vector<EncryptedMessage>",
        "doc": "New messages from the [encrypted event sequence](https://core.telegram.org/api/updates)"
      },
      "other_updates": {
        "type": "Vector<Update>",
        "doc": "List of updates"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in events"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in events"
      },
      "intermediate_state": {
        "type": "updates.State",
        "doc": "Intermediary state"
      }
    }
  },
  "updates.differenceTooLong": {
    "doc": "The difference is [too long](https://core.telegram.org/api/updates#recovering-gaps), and the specified state must be used to refetch updates.",
    "parameters": {
      "pts": {
        "type": "int",
        "doc": "The new state to use."
      }
    }
  },
  "updatesTooLong": {
    "doc": "Too many updates, it is necessary to execute [updates.getDifference](https://core.telegram.org/method/updates.getDifference).",
    "parameters": {}
  },
  "updateShortMessage": {
    "doc": "Info about a message sent to (received from) another user",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "out": {
        "type": "flags.1?true",
        "doc": "Whether the message is outgoing"
      },
      "mentioned": {
        "type": "flags.4?true",
        "doc": "Whether we were mentioned in the message"
      },
      "media_unread": {
        "type": "flags.5?true",
        "doc": "Whether there are some **unread** mentions in this message"
      },
      "silent": {
        "type": "flags.13?true",
        "doc": "If true, the message is a silent message, no notifications should be triggered"
      },
      "id": {
        "type": "int",
        "doc": "The message ID"
      },
      "user_id": {
        "type": "long",
        "doc": "The ID of the sender (if `outgoing` will be the ID of the destination) of the message"
      },
      "message": {
        "type": "string",
        "doc": "The message"
      },
      "pts": {
        "type": "int",
        "doc": "[PTS](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[PTS count](https://core.telegram.org/api/updates)"
      },
      "date": {
        "type": "int",
        "doc": "[date](https://core.telegram.org/api/updates)"
      },
      "fwd_from": {
        "type": "flags.2?MessageFwdHeader",
        "doc": "Info about a forwarded message"
      },
      "via_bot_id": {
        "type": "flags.11?long",
        "doc": "Info about the inline bot used to generate this message"
      },
      "reply_to": {
        "type": "flags.3?MessageReplyHeader",
        "doc": "Reply and [thread](https://core.telegram.org/api/threads) information"
      },
      "entities": {
        "type": "flags.7?Vector<MessageEntity>",
        "doc": "[Entities](https://core.telegram.org/api/entities) for styled text"
      },
      "ttl_period": {
        "type": "flags.25?int",
        "doc": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    }
  },
  "updateShortChatMessage": {
    "doc": "Shortened constructor containing info on one new incoming text message from a chat",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "out": {
        "type": "flags.1?true",
        "doc": "Whether the message is outgoing"
      },
      "mentioned": {
        "type": "flags.4?true",
        "doc": "Whether we were mentioned in this message"
      },
      "media_unread": {
        "type": "flags.5?true",
        "doc": "Whether the message contains some **unread** mentions"
      },
      "silent": {
        "type": "flags.13?true",
        "doc": "If true, the message is a silent message, no notifications should be triggered"
      },
      "id": {
        "type": "int",
        "doc": "ID of the message"
      },
      "from_id": {
        "type": "long",
        "doc": "ID of the sender of the message"
      },
      "chat_id": {
        "type": "long",
        "doc": "ID of the chat where the message was sent"
      },
      "message": {
        "type": "string",
        "doc": "Message"
      },
      "pts": {
        "type": "int",
        "doc": "[PTS](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[PTS count](https://core.telegram.org/api/updates)"
      },
      "date": {
        "type": "int",
        "doc": "[date](https://core.telegram.org/api/updates)"
      },
      "fwd_from": {
        "type": "flags.2?MessageFwdHeader",
        "doc": "Info about a forwarded message"
      },
      "via_bot_id": {
        "type": "flags.11?long",
        "doc": "Info about the inline bot used to generate this message"
      },
      "reply_to": {
        "type": "flags.3?MessageReplyHeader",
        "doc": "Reply (thread) information"
      },
      "entities": {
        "type": "flags.7?Vector<MessageEntity>",
        "doc": "[Entities](https://core.telegram.org/api/entities) for styled text"
      },
      "ttl_period": {
        "type": "flags.25?int",
        "doc": "Time To Live of the message, once updateShortChatMessage.date+updateShortChatMessage.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    }
  },
  "updateShort": {
    "doc": "Shortened constructor containing info on one update not requiring auxiliary data",
    "parameters": {
      "update": {
        "type": "Update",
        "doc": "Update"
      },
      "date": {
        "type": "int",
        "doc": "Date of event"
      }
    }
  },
  "updatesCombined": {
    "doc": "Constructor for a group of updates.",
    "parameters": {
      "updates": {
        "type": "Vector<Update>",
        "doc": "List of updates"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in updates"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in updates"
      },
      "date": {
        "type": "int",
        "doc": "Current date"
      },
      "seq_start": {
        "type": "int",
        "doc": "Value **seq** for the earliest update in a group"
      },
      "seq": {
        "type": "int",
        "doc": "Value **seq** for the latest update in a group"
      }
    }
  },
  "updates": {
    "doc": "Full constructor of updates",
    "parameters": {
      "updates": {
        "type": "Vector<Update>",
        "doc": "List of updates"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users mentioned in updates"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "List of chats mentioned in updates"
      },
      "date": {
        "type": "int",
        "doc": "Current date"
      },
      "seq": {
        "type": "int",
        "doc": "Total number of sent updates"
      }
    }
  },
  "updateShortSentMessage": {
    "doc": "Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "out": {
        "type": "flags.1?true",
        "doc": "Whether the message is outgoing"
      },
      "id": {
        "type": "int",
        "doc": "ID of the sent message"
      },
      "pts": {
        "type": "int",
        "doc": "[PTS](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[PTS count](https://core.telegram.org/api/updates)"
      },
      "date": {
        "type": "int",
        "doc": "[date](https://core.telegram.org/api/updates)"
      },
      "media": {
        "type": "flags.9?MessageMedia",
        "doc": "Attached media"
      },
      "entities": {
        "type": "flags.7?Vector<MessageEntity>",
        "doc": "[Entities](https://core.telegram.org/api/entities) for styled text"
      },
      "ttl_period": {
        "type": "flags.25?int",
        "doc": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well."
      }
    }
  },
  "photos.photos": {
    "doc": "Full list of photos with auxiliary data.",
    "parameters": {
      "photos": {
        "type": "Vector<Photo>",
        "doc": "List of photos"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of mentioned users"
      }
    }
  },
  "photos.photosSlice": {
    "doc": "Incomplete list of photos with auxiliary data.",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of photos"
      },
      "photos": {
        "type": "Vector<Photo>",
        "doc": "List of photos"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of mentioned users"
      }
    }
  },
  "photos.photo": {
    "doc": "Photo with auxiliary data.",
    "parameters": {
      "photo": {
        "type": "Photo",
        "doc": "Photo"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "upload.file": {
    "doc": "File content.",
    "parameters": {
      "type": {
        "type": "storage.FileType",
        "doc": "File type"
      },
      "mtime": {
        "type": "int",
        "doc": "Modification time"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Binary data, file content"
      }
    }
  },
  "upload.fileCdnRedirect": {
    "doc": "The file must be downloaded from a [CDN DC](https://core.telegram.org/cdn).",
    "parameters": {
      "dc_id": {
        "type": "int",
        "doc": "[CDN DC](https://core.telegram.org/cdn) ID"
      },
      "file_token": {
        "type": "bytes",
        "doc": "File token (see [CDN files](https://core.telegram.org/cdn))"
      },
      "encryption_key": {
        "type": "bytes",
        "doc": "Encryption key (see [CDN files](https://core.telegram.org/cdn))"
      },
      "encryption_iv": {
        "type": "bytes",
        "doc": "Encryption IV (see [CDN files](https://core.telegram.org/cdn))"
      },
      "file_hashes": {
        "type": "Vector<FileHash>",
        "doc": "File hashes (see [CDN files](https://core.telegram.org/cdn))"
      }
    }
  },
  "dcOption": {
    "doc": "Data center",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "ipv6": {
        "type": "flags.0?true",
        "doc": "Whether the specified IP is an IPv6 address"
      },
      "media_only": {
        "type": "flags.1?true",
        "doc": "Whether this DC should only be used to [download or upload files](https://core.telegram.org/api/files)"
      },
      "tcpo_only": {
        "type": "flags.2?true",
        "doc": "Whether this DC only supports connection with [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)"
      },
      "cdn": {
        "type": "flags.3?true",
        "doc": "Whether this is a [CDN DC](https://core.telegram.org/cdn)."
      },
      "static": {
        "type": "flags.4?true",
        "doc": "If set, this IP should be used when connecting through a proxy"
      },
      "this_port_only": {
        "type": "flags.5?true",
        "doc": "If set, clients must connect using only the specified port, without trying any other port."
      },
      "id": {
        "type": "int",
        "doc": "DC ID"
      },
      "ip_address": {
        "type": "string",
        "doc": "IP address of DC"
      },
      "port": {
        "type": "int",
        "doc": "Port"
      },
      "secret": {
        "type": "flags.10?bytes",
        "doc": "If the `tcpo_only` flag is set, specifies the secret to use when connecting using [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation)"
      }
    }
  },
  "config": {
    "doc": "Current configuration",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "default_p2p_contacts": {
        "type": "flags.3?true",
        "doc": "Whether the client should use P2P by default for phone calls with contacts"
      },
      "preload_featured_stickers": {
        "type": "flags.4?true",
        "doc": "Whether the client should preload featured stickers"
      },
      "revoke_pm_inbox": {
        "type": "flags.6?true",
        "doc": "Whether incoming private messages can be deleted for both participants"
      },
      "blocked_mode": {
        "type": "flags.8?true",
        "doc": "Indicates that telegram is _probably_ censored by governments/ISPs in the current region"
      },
      "force_try_ipv6": {
        "type": "flags.14?true",
        "doc": "Whether to forcefully connect using IPv6 [dcOptions](https://core.telegram.org/type/DcOption), even if the client knows that IPv4 is available."
      },
      "date": {
        "type": "int",
        "doc": "Current date at the server"
      },
      "expires": {
        "type": "int",
        "doc": "Expiration date of this config: when it expires it'll have to be refetched using [help.getConfig](https://core.telegram.org/method/help.getConfig)"
      },
      "test_mode": {
        "type": "Bool",
        "doc": "Whether we're connected to the test DCs"
      },
      "this_dc": {
        "type": "int",
        "doc": "ID of the DC that returned the reply"
      },
      "dc_options": {
        "type": "Vector<DcOption>",
        "doc": "DC IP list"
      },
      "dc_txt_domain_name": {
        "type": "string",
        "doc": "Domain name for fetching encrypted DC list from DNS TXT record"
      },
      "chat_size_max": {
        "type": "int",
        "doc": "Maximum member count for normal [groups](https://core.telegram.org/api/channel)"
      },
      "megagroup_size_max": {
        "type": "int",
        "doc": "Maximum member count for [supergroups](https://core.telegram.org/api/channel)"
      },
      "forwarded_count_max": {
        "type": "int",
        "doc": "Maximum number of messages that can be forwarded at once using [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages)."
      },
      "online_update_period_ms": {
        "type": "int",
        "doc": "The client should [update its online status](https://core.telegram.org/method/account.updateStatus) every N milliseconds"
      },
      "offline_blur_timeout_ms": {
        "type": "int",
        "doc": "Delay before offline status needs to be sent to the server"
      },
      "offline_idle_timeout_ms": {
        "type": "int",
        "doc": "Time without any user activity after which it should be treated offline"
      },
      "online_cloud_timeout_ms": {
        "type": "int",
        "doc": "If we are offline, but were online from some other client in last `online_cloud_timeout_ms` milliseconds after we had gone offline, then delay offline notification for `notify_cloud_delay_ms` milliseconds."
      },
      "notify_cloud_delay_ms": {
        "type": "int",
        "doc": "If we are offline, but online from some other client then delay sending the offline notification for `notify_cloud_delay_ms` milliseconds."
      },
      "notify_default_delay_ms": {
        "type": "int",
        "doc": "If some other client is online, then delay notification for `notification_default_delay_ms` milliseconds"
      },
      "push_chat_period_ms": {
        "type": "int",
        "doc": "Not for client use"
      },
      "push_chat_limit": {
        "type": "int",
        "doc": "Not for client use"
      },
      "edit_time_limit": {
        "type": "int",
        "doc": "Only messages with age smaller than the one specified can be edited"
      },
      "revoke_time_limit": {
        "type": "int",
        "doc": "Only channel/supergroup messages with age smaller than the specified can be deleted"
      },
      "revoke_pm_time_limit": {
        "type": "int",
        "doc": "Only private messages with age smaller than the specified can be deleted"
      },
      "rating_e_decay": {
        "type": "int",
        "doc": "Exponential decay rate for computing [top peer rating](https://core.telegram.org/api/top-rating)"
      },
      "stickers_recent_limit": {
        "type": "int",
        "doc": "Maximum number of recent stickers"
      },
      "channels_read_media_period": {
        "type": "int",
        "doc": "Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read"
      },
      "tmp_sessions": {
        "type": "flags.0?int",
        "doc": "Temporary [passport](https://core.telegram.org/passport) sessions"
      },
      "call_receive_timeout_ms": {
        "type": "int",
        "doc": "Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call"
      },
      "call_ring_timeout_ms": {
        "type": "int",
        "doc": "Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused"
      },
      "call_connect_timeout_ms": {
        "type": "int",
        "doc": "VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted"
      },
      "call_packet_timeout_ms": {
        "type": "int",
        "doc": "If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted"
      },
      "me_url_prefix": {
        "type": "string",
        "doc": "The domain to use to parse [deep links »](https://core.telegram.org/api/links)."
      },
      "autoupdate_url_prefix": {
        "type": "flags.7?string",
        "doc": "URL to use to auto-update the current app"
      },
      "gif_search_username": {
        "type": "flags.9?string",
        "doc": "Username of the bot to use to search for GIFs"
      },
      "venue_search_username": {
        "type": "flags.10?string",
        "doc": "Username of the bot to use to search for venues"
      },
      "img_search_username": {
        "type": "flags.11?string",
        "doc": "Username of the bot to use for image search"
      },
      "static_maps_provider": {
        "type": "flags.12?string",
        "doc": "ID of the map provider to use for venues"
      },
      "caption_length_max": {
        "type": "int",
        "doc": "Maximum length of caption (length in utf8 codepoints)"
      },
      "message_length_max": {
        "type": "int",
        "doc": "Maximum length of messages (length in utf8 codepoints)"
      },
      "webfile_dc_id": {
        "type": "int",
        "doc": "DC ID to use to download [webfiles](https://core.telegram.org/api/files#downloading-webfiles)"
      },
      "suggested_lang_code": {
        "type": "flags.2?string",
        "doc": "Suggested language code"
      },
      "lang_pack_version": {
        "type": "flags.2?int",
        "doc": "Language pack version"
      },
      "base_lang_pack_version": {
        "type": "flags.2?int",
        "doc": "Basic language pack version"
      },
      "reactions_default": {
        "type": "flags.15?Reaction",
        "doc": "Default [message reaction](https://core.telegram.org/api/reactions)"
      },
      "autologin_token": {
        "type": "flags.16?string",
        "doc": "Autologin token, [click here for more info on URL authorization »](https://core.telegram.org/api/url-authorization#link-url-authorization)."
      }
    }
  },
  "nearestDc": {
    "doc": "Nearest data center, according to geo-ip.",
    "parameters": {
      "country": {
        "type": "string",
        "doc": "Country code determined by geo-ip"
      },
      "this_dc": {
        "type": "int",
        "doc": "Number of current data center"
      },
      "nearest_dc": {
        "type": "int",
        "doc": "Number of nearest data center"
      }
    }
  },
  "help.appUpdate": {
    "doc": "An update is available for the application.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_not_skip": {
        "type": "flags.0?true",
        "doc": "Unskippable, the new info must be shown to the user (with a popup or something else)"
      },
      "id": {
        "type": "int",
        "doc": "Update ID"
      },
      "version": {
        "type": "string",
        "doc": "New version name"
      },
      "text": {
        "type": "string",
        "doc": "Text description of the update"
      },
      "entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "document": {
        "type": "flags.1?Document",
        "doc": "Application binary"
      },
      "url": {
        "type": "flags.2?string",
        "doc": "Application download URL"
      },
      "sticker": {
        "type": "flags.3?Document",
        "doc": "Associated sticker"
      }
    }
  },
  "help.noAppUpdate": {
    "doc": "No updates are available for the application.",
    "parameters": {}
  },
  "help.inviteText": {
    "doc": "Text of a text message with an invitation to install Telegram.",
    "parameters": {
      "message": {
        "type": "string",
        "doc": "Text of the message"
      }
    }
  },
  "encryptedChatEmpty": {
    "doc": "Empty constructor.",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Chat ID"
      }
    }
  },
  "encryptedChatWaiting": {
    "doc": "Chat waiting for approval of second participant.",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Chat ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Checking sum depending on user ID"
      },
      "date": {
        "type": "int",
        "doc": "Date of chat creation"
      },
      "admin_id": {
        "type": "long",
        "doc": "Chat creator ID"
      },
      "participant_id": {
        "type": "long",
        "doc": "ID of second chat participant"
      }
    }
  },
  "encryptedChatRequested": {
    "doc": "Request to create an encrypted chat.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "folder_id": {
        "type": "flags.0?int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      },
      "id": {
        "type": "int",
        "doc": "Chat ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Check sum depending on user ID"
      },
      "date": {
        "type": "int",
        "doc": "Chat creation date"
      },
      "admin_id": {
        "type": "long",
        "doc": "Chat creator ID"
      },
      "participant_id": {
        "type": "long",
        "doc": "ID of second chat participant"
      },
      "g_a": {
        "type": "bytes",
        "doc": "`A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)"
      }
    }
  },
  "encryptedChat": {
    "doc": "Encrypted chat",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Chat ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Check sum dependent on the user ID"
      },
      "date": {
        "type": "int",
        "doc": "Date chat was created"
      },
      "admin_id": {
        "type": "long",
        "doc": "Chat creator ID"
      },
      "participant_id": {
        "type": "long",
        "doc": "ID of the second chat participant"
      },
      "g_a_or_b": {
        "type": "bytes",
        "doc": "`B = g ^ b mod p`, if the currently authorized user is the chat's creator,  \nor `A = g ^ a mod p` otherwise  \nSee [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) for more info"
      },
      "key_fingerprint": {
        "type": "long",
        "doc": "64-bit fingerprint of received key"
      }
    }
  },
  "encryptedChatDiscarded": {
    "doc": "Discarded or deleted chat.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "history_deleted": {
        "type": "flags.0?true",
        "doc": "Whether both users of this secret chat should also remove all of its messages"
      },
      "id": {
        "type": "int",
        "doc": "Chat ID"
      }
    }
  },
  "inputEncryptedChat": {
    "doc": "Creates an encrypted chat.",
    "parameters": {
      "chat_id": {
        "type": "int",
        "doc": "Chat ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Checking sum from constructor [encryptedChat](https://core.telegram.org/constructor/encryptedChat), [encryptedChatWaiting](https://core.telegram.org/constructor/encryptedChatWaiting) or [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested)"
      }
    }
  },
  "encryptedFileEmpty": {
    "doc": "Empty constructor, non-existing file.",
    "parameters": {}
  },
  "encryptedFile": {
    "doc": "Encrypted file.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "File ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Checking sum depending on user ID"
      },
      "size": {
        "type": "long",
        "doc": "File size in bytes"
      },
      "dc_id": {
        "type": "int",
        "doc": "Number of data center"
      },
      "key_fingerprint": {
        "type": "int",
        "doc": "32-bit fingerprint of key used for file encryption"
      }
    }
  },
  "inputEncryptedFileEmpty": {
    "doc": "Empty constructor.",
    "parameters": {}
  },
  "inputEncryptedFileUploaded": {
    "doc": "Sets new encrypted file saved by parts using upload.saveFilePart method.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Random file ID created by client"
      },
      "parts": {
        "type": "int",
        "doc": "Number of saved parts"
      },
      "md5_checksum": {
        "type": "string",
        "doc": "In case [md5-HASH](https://en.wikipedia.org/wiki/MD5) of the (already encrypted) file was transmitted, file content will be checked prior to use"
      },
      "key_fingerprint": {
        "type": "int",
        "doc": "32-bit fingerprint of the key used to encrypt a file"
      }
    }
  },
  "inputEncryptedFile": {
    "doc": "Sets forwarded encrypted file for attachment.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "File ID, value of **id** parameter from [encryptedFile](https://core.telegram.org/constructor/encryptedFile)"
      },
      "access_hash": {
        "type": "long",
        "doc": "Checking sum, value of **access\\_hash** parameter from [encryptedFile](https://core.telegram.org/constructor/encryptedFile)"
      }
    }
  },
  "inputEncryptedFileBigUploaded": {
    "doc": "Assigns a new big encrypted file (over 10 MB in size), saved in parts using the method [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart).",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Random file id, created by the client"
      },
      "parts": {
        "type": "int",
        "doc": "Number of saved parts"
      },
      "key_fingerprint": {
        "type": "int",
        "doc": "32-bit imprint of the key used to encrypt the file"
      }
    }
  },
  "encryptedMessage": {
    "doc": "Encrypted message.",
    "parameters": {
      "random_id": {
        "type": "long",
        "doc": "Random message ID, assigned by the author of message"
      },
      "chat_id": {
        "type": "int",
        "doc": "ID of encrypted chat"
      },
      "date": {
        "type": "int",
        "doc": "Date of sending"
      },
      "bytes": {
        "type": "bytes",
        "doc": "TL-serialization of [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with the key created at chat initialization"
      },
      "file": {
        "type": "EncryptedFile",
        "doc": "Attached encrypted file"
      }
    }
  },
  "encryptedMessageService": {
    "doc": "Encrypted service message",
    "parameters": {
      "random_id": {
        "type": "long",
        "doc": "Random message ID, assigned by the author of message"
      },
      "chat_id": {
        "type": "int",
        "doc": "ID of encrypted chat"
      },
      "date": {
        "type": "int",
        "doc": "Date of sending"
      },
      "bytes": {
        "type": "bytes",
        "doc": "TL-serialization of the [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with the key created at chat initialization"
      }
    }
  },
  "messages.dhConfigNotModified": {
    "doc": "Configuring parameters did not change.",
    "parameters": {
      "random": {
        "type": "bytes",
        "doc": "Random sequence of bytes of assigned length"
      }
    }
  },
  "messages.dhConfig": {
    "doc": "New set of configuring parameters.",
    "parameters": {
      "g": {
        "type": "int",
        "doc": "New value **prime**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)"
      },
      "p": {
        "type": "bytes",
        "doc": "New value **primitive root**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)"
      },
      "version": {
        "type": "int",
        "doc": "Version of set of parameters"
      },
      "random": {
        "type": "bytes",
        "doc": "Random sequence of bytes of assigned length"
      }
    }
  },
  "messages.sentEncryptedMessage": {
    "doc": "Message without file attachments sent to an encrypted file.",
    "parameters": {
      "date": {
        "type": "int",
        "doc": "Date of sending"
      }
    }
  },
  "messages.sentEncryptedFile": {
    "doc": "Message with a file enclosure sent to a protected chat",
    "parameters": {
      "date": {
        "type": "int",
        "doc": "Sending date"
      },
      "file": {
        "type": "EncryptedFile",
        "doc": "Attached file"
      }
    }
  },
  "inputDocumentEmpty": {
    "doc": "Empty constructor.",
    "parameters": {}
  },
  "inputDocument": {
    "doc": "Defines a document for subsequent interaction.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Document ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "**access\\_hash** parameter from the [document](https://core.telegram.org/constructor/document) constructor"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[File reference](https://core.telegram.org/api/file_reference)"
      }
    }
  },
  "documentEmpty": {
    "doc": "Empty constructor, document doesn't exist.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Document ID or `0`"
      }
    }
  },
  "document": {
    "doc": "Document",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "long",
        "doc": "Document ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Check sum, dependent on document ID"
      },
      "file_reference": {
        "type": "bytes",
        "doc": "[File reference](https://core.telegram.org/api/file_reference)"
      },
      "date": {
        "type": "int",
        "doc": "Creation date"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type"
      },
      "size": {
        "type": "long",
        "doc": "Size"
      },
      "thumbs": {
        "type": "flags.0?Vector<PhotoSize>",
        "doc": "Thumbnails"
      },
      "video_thumbs": {
        "type": "flags.1?Vector<VideoSize>",
        "doc": "Video thumbnails"
      },
      "dc_id": {
        "type": "int",
        "doc": "DC ID"
      },
      "attributes": {
        "type": "Vector<DocumentAttribute>",
        "doc": "Attributes"
      }
    }
  },
  "help.support": {
    "doc": "Info on support user.",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "user": {
        "type": "User",
        "doc": "User"
      }
    }
  },
  "notifyPeer": {
    "doc": "Notifications generated by a certain user or group.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "user or group"
      }
    }
  },
  "notifyUsers": {
    "doc": "Notifications generated by all users.",
    "parameters": {}
  },
  "notifyChats": {
    "doc": "Notifications generated by all groups.",
    "parameters": {}
  },
  "notifyBroadcasts": {
    "doc": "Channel notification settings",
    "parameters": {}
  },
  "notifyForumTopic": {
    "doc": "Notifications generated by a [topic](https://core.telegram.org/api/forum#forum-topics) in a [forum](https://core.telegram.org/api/forum).",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Forum ID"
      },
      "top_msg_id": {
        "type": "int",
        "doc": "[Topic ID](https://core.telegram.org/api/forum#forum-topics)"
      }
    }
  },
  "sendMessageTypingAction": {
    "doc": "User is typing.",
    "parameters": {}
  },
  "sendMessageCancelAction": {
    "doc": "Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload.",
    "parameters": {}
  },
  "sendMessageRecordVideoAction": {
    "doc": "User is recording a video.",
    "parameters": {}
  },
  "sendMessageUploadVideoAction": {
    "doc": "User is uploading a video.",
    "parameters": {
      "progress": {
        "type": "int",
        "doc": "Progress percentage"
      }
    }
  },
  "sendMessageRecordAudioAction": {
    "doc": "User is recording a voice message.",
    "parameters": {}
  },
  "sendMessageUploadAudioAction": {
    "doc": "User is uploading a voice message.",
    "parameters": {
      "progress": {
        "type": "int",
        "doc": "Progress percentage"
      }
    }
  },
  "sendMessageUploadPhotoAction": {
    "doc": "User is uploading a photo.",
    "parameters": {
      "progress": {
        "type": "int",
        "doc": "Progress percentage"
      }
    }
  },
  "sendMessageUploadDocumentAction": {
    "doc": "User is uploading a file.",
    "parameters": {
      "progress": {
        "type": "int",
        "doc": "Progress percentage"
      }
    }
  },
  "sendMessageGeoLocationAction": {
    "doc": "User is selecting a location to share.",
    "parameters": {}
  },
  "sendMessageChooseContactAction": {
    "doc": "User is selecting a contact to share.",
    "parameters": {}
  },
  "sendMessageGamePlayAction": {
    "doc": "User is playing a game",
    "parameters": {}
  },
  "sendMessageRecordRoundAction": {
    "doc": "User is recording a round video to share",
    "parameters": {}
  },
  "sendMessageUploadRoundAction": {
    "doc": "User is uploading a round video",
    "parameters": {
      "progress": {
        "type": "int",
        "doc": "Progress percentage"
      }
    }
  },
  "speakingInGroupCallAction": {
    "doc": "User is currently speaking in the group call",
    "parameters": {}
  },
  "sendMessageHistoryImportAction": {
    "doc": "Chat history is being imported",
    "parameters": {
      "progress": {
        "type": "int",
        "doc": "Progress percentage"
      }
    }
  },
  "sendMessageChooseStickerAction": {
    "doc": "User is choosing a sticker",
    "parameters": {}
  },
  "sendMessageEmojiInteraction": {
    "doc": "User has clicked on an animated emoji triggering a [reaction, click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions).",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "Emoji"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID of the animated emoji that was clicked"
      },
      "interaction": {
        "type": "DataJSON",
        "doc": "A JSON object with interaction info, [click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions)"
      }
    }
  },
  "sendMessageEmojiInteractionSeen": {
    "doc": "User is watching an animated emoji reaction triggered by another user, [click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions).",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "Emoji"
      }
    }
  },
  "contacts.found": {
    "doc": "Users found by name substring and auxiliary data.",
    "parameters": {
      "my_results": {
        "type": "Vector<Peer>",
        "doc": "Personalized results"
      },
      "results": {
        "type": "Vector<Peer>",
        "doc": "List of found user identifiers"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Found chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "List of users"
      }
    }
  },
  "inputPrivacyKeyStatusTimestamp": {
    "doc": "Whether people will be able to see your exact last online timestamp",
    "parameters": {}
  },
  "inputPrivacyKeyChatInvite": {
    "doc": "Whether people will be able to invite you to chats",
    "parameters": {}
  },
  "inputPrivacyKeyPhoneCall": {
    "doc": "Whether you will accept phone calls",
    "parameters": {}
  },
  "inputPrivacyKeyPhoneP2P": {
    "doc": "Whether to allow P2P communication during VoIP calls",
    "parameters": {}
  },
  "inputPrivacyKeyForwards": {
    "doc": "Whether messages forwarded from you will be [anonymous](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)",
    "parameters": {}
  },
  "inputPrivacyKeyProfilePhoto": {
    "doc": "Whether people will be able to see your profile picture",
    "parameters": {}
  },
  "inputPrivacyKeyPhoneNumber": {
    "doc": "Whether people will be able to see your phone number",
    "parameters": {}
  },
  "inputPrivacyKeyAddedByPhone": {
    "doc": "Whether people can add you to their contact list by your phone number",
    "parameters": {}
  },
  "inputPrivacyKeyVoiceMessages": {
    "doc": "Whether people can send you voice messages",
    "parameters": {}
  },
  "inputPrivacyKeyAbout": {
    "doc": "Whether people can see your bio",
    "parameters": {}
  },
  "privacyKeyStatusTimestamp": {
    "doc": "Whether we can see the last online timestamp of this user",
    "parameters": {}
  },
  "privacyKeyChatInvite": {
    "doc": "Whether the user can be invited to chats",
    "parameters": {}
  },
  "privacyKeyPhoneCall": {
    "doc": "Whether the user accepts phone calls",
    "parameters": {}
  },
  "privacyKeyPhoneP2P": {
    "doc": "Whether P2P connections in phone calls with this user are allowed",
    "parameters": {}
  },
  "privacyKeyForwards": {
    "doc": "Whether messages forwarded from the user will be [anonymously forwarded](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)",
    "parameters": {}
  },
  "privacyKeyProfilePhoto": {
    "doc": "Whether the profile picture of the user is visible",
    "parameters": {}
  },
  "privacyKeyPhoneNumber": {
    "doc": "Whether the user allows us to see his phone number",
    "parameters": {}
  },
  "privacyKeyAddedByPhone": {
    "doc": "Whether this user can be added to our contact list by their phone number",
    "parameters": {}
  },
  "privacyKeyVoiceMessages": {
    "doc": "Whether the user accepts voice messages",
    "parameters": {}
  },
  "privacyKeyAbout": {
    "doc": "Whether people can see your bio",
    "parameters": {}
  },
  "inputPrivacyValueAllowContacts": {
    "doc": "Allow only contacts",
    "parameters": {}
  },
  "inputPrivacyValueAllowAll": {
    "doc": "Allow all users",
    "parameters": {}
  },
  "inputPrivacyValueAllowUsers": {
    "doc": "Allow only certain users",
    "parameters": {
      "users": {
        "type": "Vector<InputUser>",
        "doc": "Allowed users"
      }
    }
  },
  "inputPrivacyValueDisallowContacts": {
    "doc": "Disallow only contacts",
    "parameters": {}
  },
  "inputPrivacyValueDisallowAll": {
    "doc": "Disallow all",
    "parameters": {}
  },
  "inputPrivacyValueDisallowUsers": {
    "doc": "Disallow only certain users",
    "parameters": {
      "users": {
        "type": "Vector<InputUser>",
        "doc": "Users to disallow"
      }
    }
  },
  "inputPrivacyValueAllowChatParticipants": {
    "doc": "Allow only participants of certain chats",
    "parameters": {
      "chats": {
        "type": "Vector<long>",
        "doc": "Allowed chat IDs"
      }
    }
  },
  "inputPrivacyValueDisallowChatParticipants": {
    "doc": "Disallow only participants of certain chats",
    "parameters": {
      "chats": {
        "type": "Vector<long>",
        "doc": "Disallowed chat IDs"
      }
    }
  },
  "inputPrivacyValueAllowCloseFriends": {
    "doc": "Allow only [close friends »](https://core.telegram.org/api/privacy)",
    "parameters": {}
  },
  "privacyValueAllowContacts": {
    "doc": "Allow all contacts",
    "parameters": {}
  },
  "privacyValueAllowAll": {
    "doc": "Allow all users",
    "parameters": {}
  },
  "privacyValueAllowUsers": {
    "doc": "Allow only certain users",
    "parameters": {
      "users": {
        "type": "Vector<long>",
        "doc": "Allowed users"
      }
    }
  },
  "privacyValueDisallowContacts": {
    "doc": "Disallow only contacts",
    "parameters": {}
  },
  "privacyValueDisallowAll": {
    "doc": "Disallow all users",
    "parameters": {}
  },
  "privacyValueDisallowUsers": {
    "doc": "Disallow only certain users",
    "parameters": {
      "users": {
        "type": "Vector<long>",
        "doc": "Disallowed users"
      }
    }
  },
  "privacyValueAllowChatParticipants": {
    "doc": "Allow all participants of certain chats",
    "parameters": {
      "chats": {
        "type": "Vector<long>",
        "doc": "Allowed chats"
      }
    }
  },
  "privacyValueDisallowChatParticipants": {
    "doc": "Disallow only participants of certain chats",
    "parameters": {
      "chats": {
        "type": "Vector<long>",
        "doc": "Disallowed chats"
      }
    }
  },
  "privacyValueAllowCloseFriends": {
    "doc": "Allow only [close friends »](https://core.telegram.org/api/privacy)",
    "parameters": {}
  },
  "account.privacyRules": {
    "doc": "Privacy rules",
    "parameters": {
      "rules": {
        "type": "Vector<PrivacyRule>",
        "doc": "Privacy rules"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats to which the rules apply"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users to which the rules apply"
      }
    }
  },
  "accountDaysTTL": {
    "doc": "Time to live in days of the current account",
    "parameters": {
      "days": {
        "type": "int",
        "doc": "This account will self-destruct in the specified number of days"
      }
    }
  },
  "documentAttributeImageSize": {
    "doc": "Defines the width and height of an image uploaded as document",
    "parameters": {
      "w": {
        "type": "int",
        "doc": "Width of image"
      },
      "h": {
        "type": "int",
        "doc": "Height of image"
      }
    }
  },
  "documentAttributeAnimated": {
    "doc": "Defines an animated GIF",
    "parameters": {}
  },
  "documentAttributeSticker": {
    "doc": "Defines a sticker",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "mask": {
        "type": "flags.1?true",
        "doc": "Whether this is a mask sticker"
      },
      "alt": {
        "type": "string",
        "doc": "Alternative emoji representation of sticker"
      },
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Associated stickerset"
      },
      "mask_coords": {
        "type": "flags.0?MaskCoords",
        "doc": "Mask coordinates (if this is a mask sticker, attached to a photo)"
      }
    }
  },
  "documentAttributeVideo": {
    "doc": "Defines a video",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "round_message": {
        "type": "flags.0?true",
        "doc": "Whether this is a round video"
      },
      "supports_streaming": {
        "type": "flags.1?true",
        "doc": "Whether the video supports streaming"
      },
      "nosound": {
        "type": "flags.3?true",
        "doc": "Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)"
      },
      "duration": {
        "type": "double",
        "doc": "Duration in seconds"
      },
      "w": {
        "type": "int",
        "doc": "Video width"
      },
      "h": {
        "type": "int",
        "doc": "Video height"
      },
      "preload_prefix_size": {
        "type": "flags.2?int",
        "doc": "Number of bytes to preload when preloading videos (particularly [video stories](https://core.telegram.org/api/stories))."
      }
    }
  },
  "documentAttributeAudio": {
    "doc": "Represents an audio file",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "voice": {
        "type": "flags.10?true",
        "doc": "Whether this is a voice message"
      },
      "duration": {
        "type": "int",
        "doc": "Duration in seconds"
      },
      "title": {
        "type": "flags.0?string",
        "doc": "Name of song"
      },
      "performer": {
        "type": "flags.1?string",
        "doc": "Performer"
      },
      "waveform": {
        "type": "flags.2?bytes",
        "doc": "Waveform: consists in a series of bitpacked 5-bit values.  \nExample implementation: [android](https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/jni/audio.c#L546)."
      }
    }
  },
  "documentAttributeFilename": {
    "doc": "A simple document with a file name",
    "parameters": {
      "file_name": {
        "type": "string",
        "doc": "The file name"
      }
    }
  },
  "documentAttributeHasStickers": {
    "doc": "Whether the current document has stickers attached",
    "parameters": {}
  },
  "documentAttributeCustomEmoji": {
    "doc": "Info about a custom emoji",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "free": {
        "type": "flags.0?true",
        "doc": "Whether this custom emoji can be sent by non-Premium users"
      },
      "text_color": {
        "type": "flags.1?true",
        "doc": "Whether the color of this TGS custom emoji should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context."
      },
      "alt": {
        "type": "string",
        "doc": "The actual emoji"
      },
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "The emoji stickerset to which this emoji belongs."
      }
    }
  },
  "messages.stickersNotModified": {
    "doc": "No new stickers were found for the given query",
    "parameters": {}
  },
  "messages.stickers": {
    "doc": "Found stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "stickers": {
        "type": "Vector<Document>",
        "doc": "Stickers"
      }
    }
  },
  "stickerPack": {
    "doc": "A stickerpack is a group of stickers associated to the same emoji.  \nIt is **not** a sticker pack the way it is usually intended, you may be looking for a [StickerSet](https://core.telegram.org/type/StickerSet).",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "Emoji"
      },
      "documents": {
        "type": "Vector<long>",
        "doc": "Stickers"
      }
    }
  },
  "messages.allStickersNotModified": {
    "doc": "Info about all installed stickers hasn't changed",
    "parameters": {}
  },
  "messages.allStickers": {
    "doc": "Info about all installed stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "sets": {
        "type": "Vector<StickerSet>",
        "doc": "All stickersets"
      }
    }
  },
  "messages.affectedMessages": {
    "doc": "Events affected by operation",
    "parameters": {
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      }
    }
  },
  "webPageEmpty": {
    "doc": "No preview is available for the webpage",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "long",
        "doc": "Preview ID"
      },
      "url": {
        "type": "flags.0?string",
        "doc": "URL of the webpage."
      }
    }
  },
  "webPagePending": {
    "doc": "A preview of the webpage is currently being generated",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "long",
        "doc": "ID of preview"
      },
      "url": {
        "type": "flags.0?string",
        "doc": "URL of the webpage"
      },
      "date": {
        "type": "int",
        "doc": "When was the processing started"
      }
    }
  },
  "webPage": {
    "doc": "Webpage preview",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_large_media": {
        "type": "flags.13?true",
        "doc": "Whether the size of the media in the preview can be changed."
      },
      "id": {
        "type": "long",
        "doc": "Preview ID"
      },
      "url": {
        "type": "string",
        "doc": "URL of previewed webpage"
      },
      "display_url": {
        "type": "string",
        "doc": "Webpage URL to be displayed to the user"
      },
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "type": {
        "type": "flags.0?string",
        "doc": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else"
      },
      "site_name": {
        "type": "flags.1?string",
        "doc": "Short name of the site (e.g., Google Docs, App Store)"
      },
      "title": {
        "type": "flags.2?string",
        "doc": "Title of the content"
      },
      "description": {
        "type": "flags.3?string",
        "doc": "Content description"
      },
      "photo": {
        "type": "flags.4?Photo",
        "doc": "Image representing the content"
      },
      "embed_url": {
        "type": "flags.5?string",
        "doc": "URL to show in the embedded preview"
      },
      "embed_type": {
        "type": "flags.5?string",
        "doc": "MIME type of the embedded preview, (e.g., text/html or video/mp4)"
      },
      "embed_width": {
        "type": "flags.6?int",
        "doc": "Width of the embedded preview"
      },
      "embed_height": {
        "type": "flags.6?int",
        "doc": "Height of the embedded preview"
      },
      "duration": {
        "type": "flags.7?int",
        "doc": "Duration of the content, in seconds"
      },
      "author": {
        "type": "flags.8?string",
        "doc": "Author of the content"
      },
      "document": {
        "type": "flags.9?Document",
        "doc": "Preview of the content as a media file"
      },
      "cached_page": {
        "type": "flags.10?Page",
        "doc": "Page contents in [instant view](https://instantview.telegram.org) format"
      },
      "attributes": {
        "type": "flags.12?Vector<WebPageAttribute>",
        "doc": "Webpage attributes"
      }
    }
  },
  "webPageNotModified": {
    "doc": "The preview of the webpage hasn't changed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "cached_page_views": {
        "type": "flags.0?int",
        "doc": "Page view count"
      }
    }
  },
  "authorization": {
    "doc": "Logged-in session",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "current": {
        "type": "flags.0?true",
        "doc": "Whether this is the current session"
      },
      "official_app": {
        "type": "flags.1?true",
        "doc": "Whether the session is from an official app"
      },
      "password_pending": {
        "type": "flags.2?true",
        "doc": "Whether the session is still waiting for a 2FA password"
      },
      "encrypted_requests_disabled": {
        "type": "flags.3?true",
        "doc": "Whether this session will accept encrypted chats"
      },
      "call_requests_disabled": {
        "type": "flags.4?true",
        "doc": "Whether this session will accept phone calls"
      },
      "unconfirmed": {
        "type": "flags.5?true",
        "doc": "Whether the session is [unconfirmed, see here »](https://core.telegram.org/api/auth#confirming-login) for more info."
      },
      "hash": {
        "type": "long",
        "doc": "Identifier"
      },
      "device_model": {
        "type": "string",
        "doc": "Device model"
      },
      "platform": {
        "type": "string",
        "doc": "Platform"
      },
      "system_version": {
        "type": "string",
        "doc": "System version"
      },
      "api_id": {
        "type": "int",
        "doc": "[API ID](https://core.telegram.org/api/obtaining_api_id)"
      },
      "app_name": {
        "type": "string",
        "doc": "App name"
      },
      "app_version": {
        "type": "string",
        "doc": "App version"
      },
      "date_created": {
        "type": "int",
        "doc": "When was the session created"
      },
      "date_active": {
        "type": "int",
        "doc": "When was the session last active"
      },
      "ip": {
        "type": "string",
        "doc": "Last known IP"
      },
      "country": {
        "type": "string",
        "doc": "Country determined from IP"
      },
      "region": {
        "type": "string",
        "doc": "Region determined from IP"
      }
    }
  },
  "account.authorizations": {
    "doc": "Logged-in sessions",
    "parameters": {
      "authorization_ttl_days": {
        "type": "int",
        "doc": "Time-to-live of session"
      },
      "authorizations": {
        "type": "Vector<Authorization>",
        "doc": "Logged-in sessions"
      }
    }
  },
  "account.password": {
    "doc": "Configuration for two-factor authorization",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_recovery": {
        "type": "flags.0?true",
        "doc": "Whether the user has a recovery method configured"
      },
      "has_secure_values": {
        "type": "flags.1?true",
        "doc": "Whether telegram [passport](https://core.telegram.org/passport) is enabled"
      },
      "has_password": {
        "type": "flags.2?true",
        "doc": "Whether the user has a password"
      },
      "current_algo": {
        "type": "flags.2?PasswordKdfAlgo",
        "doc": "The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) of the current password"
      },
      "srp_B": {
        "type": "flags.2?bytes",
        "doc": "Srp B param for [SRP authorization](https://core.telegram.org/api/srp)"
      },
      "srp_id": {
        "type": "flags.2?long",
        "doc": "Srp ID param for [SRP authorization](https://core.telegram.org/api/srp)"
      },
      "hint": {
        "type": "flags.3?string",
        "doc": "Text hint for the password"
      },
      "email_unconfirmed_pattern": {
        "type": "flags.4?string",
        "doc": "A [password recovery email](https://core.telegram.org/api/srp#email-verification) with the specified [pattern](https://core.telegram.org/api/pattern) is still awaiting verification"
      },
      "new_algo": {
        "type": "PasswordKdfAlgo",
        "doc": "The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) to use when creating new passwords"
      },
      "new_secure_algo": {
        "type": "SecurePasswordKdfAlgo",
        "doc": "The KDF algorithm for telegram [passport](https://core.telegram.org/passport)"
      },
      "secure_random": {
        "type": "bytes",
        "doc": "Secure random string"
      },
      "pending_reset_date": {
        "type": "flags.5?int",
        "doc": "The 2FA password will be automatically removed at this date, unless the user cancels the operation"
      },
      "login_email_pattern": {
        "type": "flags.6?string",
        "doc": "A verified login email with the specified [pattern](https://core.telegram.org/api/pattern) is configured"
      }
    }
  },
  "account.passwordSettings": {
    "doc": "Private info associated to the password info (recovery email, telegram [passport](https://core.telegram.org/passport) info & so on)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "email": {
        "type": "flags.0?string",
        "doc": "[2FA Recovery email](https://core.telegram.org/api/srp#email-verification)"
      },
      "secure_settings": {
        "type": "flags.1?SecureSecretSettings",
        "doc": "Telegram [passport](https://core.telegram.org/passport) settings"
      }
    }
  },
  "account.passwordInputSettings": {
    "doc": "Settings for setting up a new password",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "new_algo": {
        "type": "flags.0?PasswordKdfAlgo",
        "doc": "The [SRP algorithm](https://core.telegram.org/api/srp) to use"
      },
      "new_password_hash": {
        "type": "flags.0?bytes",
        "doc": "The [computed password hash](https://core.telegram.org/api/srp)"
      },
      "hint": {
        "type": "flags.0?string",
        "doc": "Text hint for the password"
      },
      "email": {
        "type": "flags.1?string",
        "doc": "Password recovery email"
      },
      "new_secure_settings": {
        "type": "flags.2?SecureSecretSettings",
        "doc": "Telegram [passport](https://core.telegram.org/passport) settings"
      }
    }
  },
  "auth.passwordRecovery": {
    "doc": "Recovery info of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).",
    "parameters": {
      "email_pattern": {
        "type": "string",
        "doc": "The email to which the recovery code was sent must match this [pattern](https://core.telegram.org/api/pattern)."
      }
    }
  },
  "receivedNotifyMessage": {
    "doc": "Message ID, for which PUSH-notifications were cancelled.",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Message ID, for which PUSH-notifications were canceled"
      },
      "flags": {
        "type": "int",
        "doc": "Reserved for future use"
      }
    }
  },
  "chatInviteExported": {
    "doc": "Exported chat invite",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "revoked": {
        "type": "flags.0?true",
        "doc": "Whether this chat invite was revoked"
      },
      "permanent": {
        "type": "flags.5?true",
        "doc": "Whether this chat invite has no expiration"
      },
      "request_needed": {
        "type": "flags.6?true",
        "doc": "Whether users importing this invite link will have to be approved to join the channel or group"
      },
      "link": {
        "type": "string",
        "doc": "Chat invitation link"
      },
      "admin_id": {
        "type": "long",
        "doc": "ID of the admin that created this chat invite"
      },
      "date": {
        "type": "int",
        "doc": "When was this chat invite created"
      },
      "start_date": {
        "type": "flags.4?int",
        "doc": "When was this chat invite last modified"
      },
      "expire_date": {
        "type": "flags.1?int",
        "doc": "When does this chat invite expire"
      },
      "usage_limit": {
        "type": "flags.2?int",
        "doc": "Maximum number of users that can join using this link"
      },
      "usage": {
        "type": "flags.3?int",
        "doc": "How many users joined using this link"
      },
      "requested": {
        "type": "flags.7?int",
        "doc": "Number of users that have already used this link to join"
      },
      "title": {
        "type": "flags.8?string",
        "doc": "Custom description for the invite link, visible only to admins"
      }
    }
  },
  "chatInvitePublicJoinRequests": {
    "doc": "Used in updates and in the channel log to indicate when a user is requesting to join or has joined a [discussion group](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group)",
    "parameters": {}
  },
  "chatInviteAlready": {
    "doc": "The user has already joined this chat",
    "parameters": {
      "chat": {
        "type": "Chat",
        "doc": "The chat connected to the invite"
      }
    }
  },
  "chatInvite": {
    "doc": "Chat invite info",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "channel": {
        "type": "flags.0?true",
        "doc": "Whether this is a [channel/supergroup](https://core.telegram.org/api/channel) or a [normal group](https://core.telegram.org/api/channel)"
      },
      "broadcast": {
        "type": "flags.1?true",
        "doc": "Whether this is a [channel](https://core.telegram.org/api/channel)"
      },
      "public": {
        "type": "flags.2?true",
        "doc": "Whether this is a public [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "megagroup": {
        "type": "flags.3?true",
        "doc": "Whether this is a [supergroup](https://core.telegram.org/api/channel)"
      },
      "request_needed": {
        "type": "flags.6?true",
        "doc": "Whether the [join request »](https://core.telegram.org/api/invites#join-requests) must be first approved by an administrator"
      },
      "verified": {
        "type": "flags.7?true",
        "doc": "Is this chat or channel verified by Telegram?"
      },
      "scam": {
        "type": "flags.8?true",
        "doc": "This chat is probably a scam"
      },
      "fake": {
        "type": "flags.9?true",
        "doc": "If set, this chat was reported by many users as a fake or scam: be careful when interacting with it."
      },
      "title": {
        "type": "string",
        "doc": "Chat/supergroup/channel title"
      },
      "about": {
        "type": "flags.5?string",
        "doc": "Description of the group of channel"
      },
      "photo": {
        "type": "Photo",
        "doc": "Chat/supergroup/channel photo"
      },
      "participants_count": {
        "type": "int",
        "doc": "Participant count"
      },
      "participants": {
        "type": "flags.4?Vector<User>",
        "doc": "A few of the participants that are in the group"
      },
      "color": {
        "type": "int",
        "doc": "[Profile color palette ID](https://core.telegram.org/api/colors)"
      }
    }
  },
  "chatInvitePeek": {
    "doc": "A chat invitation that also allows peeking into the group to read messages without joining it.",
    "parameters": {
      "chat": {
        "type": "Chat",
        "doc": "Chat information"
      },
      "expires": {
        "type": "int",
        "doc": "Read-only anonymous access to this group will be revoked at this date"
      }
    }
  },
  "inputStickerSetEmpty": {
    "doc": "Empty constructor",
    "parameters": {}
  },
  "inputStickerSetID": {
    "doc": "Stickerset by ID",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      }
    }
  },
  "inputStickerSetShortName": {
    "doc": "Stickerset by short name, from a [stickerset deep link »](https://core.telegram.org/api/links#stickerset-links)",
    "parameters": {
      "short_name": {
        "type": "string",
        "doc": "Short name from a [stickerset deep link »](https://core.telegram.org/api/links#stickerset-links)"
      }
    }
  },
  "inputStickerSetAnimatedEmoji": {
    "doc": "Animated emojis stickerset",
    "parameters": {}
  },
  "inputStickerSetDice": {
    "doc": "Used for fetching [animated dice stickers](https://core.telegram.org/api/dice)",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported"
      }
    }
  },
  "inputStickerSetAnimatedEmojiAnimations": {
    "doc": "Animated emoji reaction stickerset (contains animations to play when a user clicks on a given animated emoji)",
    "parameters": {}
  },
  "inputStickerSetPremiumGifts": {
    "doc": "Stickers to show when receiving a gifted Telegram Premium subscription",
    "parameters": {}
  },
  "inputStickerSetEmojiGenericAnimations": {
    "doc": "Generic animation stickerset containing animations to play when [reacting to messages using a normal emoji without a custom animation](https://core.telegram.org/api/reactions)",
    "parameters": {}
  },
  "inputStickerSetEmojiDefaultStatuses": {
    "doc": "Default [custom emoji status](https://core.telegram.org/api/emoji-status) stickerset",
    "parameters": {}
  },
  "inputStickerSetEmojiDefaultTopicIcons": {
    "doc": "Default [custom emoji](https://core.telegram.org/api/custom-emoji) stickerset for [forum topic icons](https://core.telegram.org/api/forum#forum-topics)",
    "parameters": {}
  },
  "inputStickerSetEmojiChannelDefaultStatuses": {
    "doc": "Default [custom emoji status](https://core.telegram.org/api/emoji-status) stickerset for channel statuses",
    "parameters": {}
  },
  "stickerSet": {
    "doc": "Represents a stickerset (stickerpack)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "archived": {
        "type": "flags.1?true",
        "doc": "Whether this stickerset was archived (due to too many saved stickers in the current account)"
      },
      "official": {
        "type": "flags.2?true",
        "doc": "Is this stickerset official"
      },
      "masks": {
        "type": "flags.3?true",
        "doc": "Is this a mask stickerset"
      },
      "animated": {
        "type": "flags.5?true",
        "doc": "Is this an animated stickerpack"
      },
      "videos": {
        "type": "flags.6?true",
        "doc": "Is this a video stickerpack"
      },
      "emojis": {
        "type": "flags.7?true",
        "doc": "This is a custom emoji stickerset"
      },
      "text_color": {
        "type": "flags.9?true",
        "doc": "Whether the color of this TGS custom emoji stickerset should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context."
      },
      "channel_emoji_status": {
        "type": "flags.10?true",
        "doc": "If set, this custom emoji stickerset can be used in [channel emoji statuses](https://core.telegram.org/api/emoji-status)."
      },
      "installed_date": {
        "type": "flags.0?int",
        "doc": "When was this stickerset installed"
      },
      "id": {
        "type": "long",
        "doc": "ID of the stickerset"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash of stickerset"
      },
      "title": {
        "type": "string",
        "doc": "Title of stickerset"
      },
      "short_name": {
        "type": "string",
        "doc": "Short name of stickerset, used when sharing stickerset using [stickerset deep links](https://core.telegram.org/api/links#stickerset-links)."
      },
      "thumbs": {
        "type": "flags.4?Vector<PhotoSize>",
        "doc": "Stickerset thumbnail"
      },
      "thumb_dc_id": {
        "type": "flags.4?int",
        "doc": "DC ID of thumbnail"
      },
      "thumb_version": {
        "type": "flags.4?int",
        "doc": "Thumbnail version"
      },
      "thumb_document_id": {
        "type": "flags.8?long",
        "doc": "Document ID of custom emoji thumbnail, fetch the document using [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments)"
      },
      "count": {
        "type": "int",
        "doc": "Number of stickers in pack"
      },
      "hash": {
        "type": "int",
        "doc": "Hash"
      }
    }
  },
  "messages.stickerSet": {
    "doc": "Stickerset and stickers inside it",
    "parameters": {
      "set": {
        "type": "StickerSet",
        "doc": "The stickerset"
      },
      "packs": {
        "type": "Vector<StickerPack>",
        "doc": "Emoji info for stickers"
      },
      "keywords": {
        "type": "Vector<StickerKeyword>",
        "doc": "Keywords for some or every sticker in the stickerset."
      },
      "documents": {
        "type": "Vector<Document>",
        "doc": "Stickers in stickerset"
      }
    }
  },
  "messages.stickerSetNotModified": {
    "doc": "The stickerset hasn't changed",
    "parameters": {}
  },
  "botCommand": {
    "doc": "Describes a bot command that can be used in a chat",
    "parameters": {
      "command": {
        "type": "string",
        "doc": "`/command` name"
      },
      "description": {
        "type": "string",
        "doc": "Description of the command"
      }
    }
  },
  "botInfo": {
    "doc": "Info about bots (available bot commands, etc)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "user_id": {
        "type": "flags.0?long",
        "doc": "ID of the bot"
      },
      "description": {
        "type": "flags.1?string",
        "doc": "Description of the bot"
      },
      "description_photo": {
        "type": "flags.4?Photo",
        "doc": "Description photo"
      },
      "description_document": {
        "type": "flags.5?Document",
        "doc": "Description animation in MPEG4 format"
      },
      "commands": {
        "type": "flags.2?Vector<BotCommand>",
        "doc": "Bot commands that can be used in the chat"
      },
      "menu_button": {
        "type": "flags.3?BotMenuButton",
        "doc": "Indicates the action to execute when pressing the in-UI menu button for bots"
      }
    }
  },
  "keyboardButton": {
    "doc": "Bot keyboard button",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      }
    }
  },
  "keyboardButtonUrl": {
    "doc": "URL button",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button label"
      },
      "url": {
        "type": "string",
        "doc": "URL"
      }
    }
  },
  "keyboardButtonCallback": {
    "doc": "Callback button",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "requires_password": {
        "type": "flags.0?true",
        "doc": "Whether the user should verify his identity by entering his [2FA SRP parameters](https://core.telegram.org/api/srp) to the [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer) method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to [SRP](https://core.telegram.org/api/srp). This button is mainly used by the official [@botfather](https://t.me/botfather) bot, for verifying the user's identity before transferring ownership of a bot to another user."
      },
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "data": {
        "type": "bytes",
        "doc": "Callback data"
      }
    }
  },
  "keyboardButtonRequestPhone": {
    "doc": "Button to request a user's phone number",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      }
    }
  },
  "keyboardButtonRequestGeoLocation": {
    "doc": "Button to request a user's geolocation",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      }
    }
  },
  "keyboardButtonSwitchInline": {
    "doc": "Button to force a user to switch to inline mode: pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "same_peer": {
        "type": "flags.0?true",
        "doc": "If set, pressing the button will insert the bot's username and the specified inline `query` in the current chat's input field."
      },
      "text": {
        "type": "string",
        "doc": "Button label"
      },
      "query": {
        "type": "string",
        "doc": "The inline query to use"
      },
      "peer_types": {
        "type": "flags.1?Vector<InlineQueryPeerType>",
        "doc": "Filter to use when selecting chats."
      }
    }
  },
  "keyboardButtonGame": {
    "doc": "Button to start a game",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      }
    }
  },
  "keyboardButtonBuy": {
    "doc": "Button to buy a product",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      }
    }
  },
  "keyboardButtonUrlAuth": {
    "doc": "Button to request a user to authorize via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). When the user clicks on such a button, [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) should be called, providing the `button_id` and the ID of the container message. The returned [urlAuthResultRequest](https://core.telegram.org/constructor/urlAuthResultRequest) object will contain more details about the authorization request (`request_write_access` if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call [messages.acceptUrlAuth](https://core.telegram.org/method/messages.acceptUrlAuth) to get a [urlAuthResultAccepted](https://core.telegram.org/constructor/urlAuthResultAccepted) with the URL to open instead of the `url` of this constructor, or a [urlAuthResultDefault](https://core.telegram.org/constructor/urlAuthResultDefault), in which case the `url` of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the `url` of this constructor must be used.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "text": {
        "type": "string",
        "doc": "Button label"
      },
      "fwd_text": {
        "type": "flags.0?string",
        "doc": "New text of the button in forwarded messages."
      },
      "url": {
        "type": "string",
        "doc": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  \n  \n**NOTE**: Services must **always** check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization)."
      },
      "button_id": {
        "type": "int",
        "doc": "ID of the button to pass to [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth)"
      }
    }
  },
  "inputKeyboardButtonUrlAuth": {
    "doc": "Button to request a user to [authorize](https://core.telegram.org/method/messages.acceptUrlAuth) via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "request_write_access": {
        "type": "flags.0?true",
        "doc": "Set this flag to request the permission for your bot to send messages to the user."
      },
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "fwd_text": {
        "type": "flags.1?string",
        "doc": "New text of the button in forwarded messages."
      },
      "url": {
        "type": "string",
        "doc": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  \nNOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization)."
      },
      "bot": {
        "type": "InputUser",
        "doc": "Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details."
      }
    }
  },
  "keyboardButtonRequestPoll": {
    "doc": "A button that allows the user to create and send a poll when pressed; available only in private",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "quiz": {
        "type": "flags.0?Bool",
        "doc": "If set, only quiz polls can be sent"
      },
      "text": {
        "type": "string",
        "doc": "Button text"
      }
    }
  },
  "inputKeyboardButtonUserProfile": {
    "doc": "Button that links directly to a user profile",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "User ID"
      }
    }
  },
  "keyboardButtonUserProfile": {
    "doc": "Button that links directly to a user profile",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "user_id": {
        "type": "long",
        "doc": "User ID"
      }
    }
  },
  "keyboardButtonWebView": {
    "doc": "Button to open a [bot mini app](https://core.telegram.org/api/bots/webapps) using [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), sending over user information after user confirmation.",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "url": {
        "type": "string",
        "doc": "[Web app url](https://core.telegram.org/api/bots/webapps)"
      }
    }
  },
  "keyboardButtonSimpleWebView": {
    "doc": "Button to open a [bot mini app](https://core.telegram.org/api/bots/webapps) using [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), without sending user information to the web app.",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "url": {
        "type": "string",
        "doc": "[Web app URL](https://core.telegram.org/api/bots/webapps)"
      }
    }
  },
  "keyboardButtonRequestPeer": {
    "doc": "Prompts the user to select and share one or more peers with the bot using [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer)",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Button text"
      },
      "button_id": {
        "type": "int",
        "doc": "Button ID, to be passed to [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer)."
      },
      "peer_type": {
        "type": "RequestPeerType",
        "doc": "Filtering criteria to use for the peer selection list shown to the user.  \nThe list should display all existing peers of the specified type, and should also offer an option for the user to create and immediately use one or more (up to `max_quantity`) peers of the specified type, if needed."
      },
      "max_quantity": {
        "type": "int",
        "doc": "Maximum number of peers that can be chosne."
      }
    }
  },
  "keyboardButtonRow": {
    "doc": "Inline keyboard row",
    "parameters": {
      "buttons": {
        "type": "Vector<KeyboardButton>",
        "doc": "Bot or inline keyboard buttons"
      }
    }
  },
  "replyKeyboardHide": {
    "doc": "Hide sent bot keyboard",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "selective": {
        "type": "flags.2?true",
        "doc": "Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\\_to\\_message\\_id), sender of the original message.  \n  \nExample: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet"
      }
    }
  },
  "replyKeyboardForceReply": {
    "doc": "Force the user to send a reply",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "single_use": {
        "type": "flags.1?true",
        "doc": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again."
      },
      "selective": {
        "type": "flags.2?true",
        "doc": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\\_to\\_message\\_id), sender of the original message.  \nExample: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard."
      },
      "placeholder": {
        "type": "flags.3?string",
        "doc": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters."
      }
    }
  },
  "replyKeyboardMarkup": {
    "doc": "Bot keyboard",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "resize": {
        "type": "flags.0?true",
        "doc": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard."
      },
      "single_use": {
        "type": "flags.1?true",
        "doc": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again."
      },
      "selective": {
        "type": "flags.2?true",
        "doc": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\\_to\\_message\\_id), sender of the original message.  \n  \nExample: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard."
      },
      "persistent": {
        "type": "flags.4?true",
        "doc": "Requests clients to always show the keyboard when the regular keyboard is hidden."
      },
      "rows": {
        "type": "Vector<KeyboardButtonRow>",
        "doc": "Button row"
      },
      "placeholder": {
        "type": "flags.3?string",
        "doc": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters."
      }
    }
  },
  "replyInlineMarkup": {
    "doc": "Bot or inline keyboard",
    "parameters": {
      "rows": {
        "type": "Vector<KeyboardButtonRow>",
        "doc": "Bot or inline keyboard rows"
      }
    }
  },
  "messageEntityUnknown": {
    "doc": "Unknown message entity",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityMention": {
    "doc": "Message entity [mentioning](https://core.telegram.org/api/mentions) a user by `@username`; [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) can also be used to mention users by their ID.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityHashtag": {
    "doc": "**#hashtag** message entity",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityBotCommand": {
    "doc": "Message entity representing a bot /command",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityUrl": {
    "doc": "Message entity representing an in-text url: [https://google.com](https://google.com); for [text urls](https://google.com), use [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl).",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityEmail": {
    "doc": "Message entity representing an [email@example.com](mailto:email@example.com).",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityBold": {
    "doc": "Message entity representing **bold text**.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityItalic": {
    "doc": "Message entity representing _italic text_.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityCode": {
    "doc": "Message entity representing a `codeblock`.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityPre": {
    "doc": "Message entity representing a preformatted `codeblock`, allowing the user to specify a programming language for the codeblock.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "language": {
        "type": "string",
        "doc": "Programming language of the code"
      }
    }
  },
  "messageEntityTextUrl": {
    "doc": "Message entity representing a [text url](https://google.com): for in-text urls like [https://google.com](https://google.com) use [messageEntityUrl](https://core.telegram.org/constructor/messageEntityUrl).",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "url": {
        "type": "string",
        "doc": "The actual URL"
      }
    }
  },
  "messageEntityMentionName": {
    "doc": "Message entity representing a [user mention](https://core.telegram.org/api/mentions): for _creating_ a mention use [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName).",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "user_id": {
        "type": "long",
        "doc": "Identifier of the user that was mentioned"
      }
    }
  },
  "inputMessageEntityMentionName": {
    "doc": "Message entity that can be used to create a user [user mention](https://core.telegram.org/api/mentions): received mentions use the [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) constructor, instead.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "Identifier of the user that was mentioned"
      }
    }
  },
  "messageEntityPhone": {
    "doc": "Message entity representing a phone number.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityCashtag": {
    "doc": "Message entity representing a **$cashtag**.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityUnderline": {
    "doc": "Message entity representing underlined text.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityStrike": {
    "doc": "Message entity representing strikethrough text.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityBankCard": {
    "doc": "Indicates a credit card number",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntitySpoiler": {
    "doc": "Message entity representing a spoiler",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "messageEntityCustomEmoji": {
    "doc": "Represents a custom emoji.  \nNote that this entity must wrap exactly one regular emoji (the one contained in [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji).`alt`) in the related text, otherwise the server will ignore it.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "document_id": {
        "type": "long",
        "doc": "Document ID of the [custom emoji](https://core.telegram.org/api/custom-emoji), use [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments) to fetch the emoji animation and the actual emoji it represents."
      }
    }
  },
  "messageEntityBlockquote": {
    "doc": "Message entity representing a block quote.",
    "parameters": {
      "offset": {
        "type": "int",
        "doc": "Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      },
      "length": {
        "type": "int",
        "doc": "Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))"
      }
    }
  },
  "inputChannelEmpty": {
    "doc": "Represents the absence of a channel",
    "parameters": {}
  },
  "inputChannel": {
    "doc": "Represents a channel",
    "parameters": {
      "channel_id": {
        "type": "long",
        "doc": "Channel ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash taken from the [channel](https://core.telegram.org/constructor/channel) constructor"
      }
    }
  },
  "inputChannelFromMessage": {
    "doc": "Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat where the channel was seen"
      },
      "msg_id": {
        "type": "int",
        "doc": "The message ID in the chat where the channel was seen"
      },
      "channel_id": {
        "type": "long",
        "doc": "The channel ID"
      }
    }
  },
  "contacts.resolvedPeer": {
    "doc": "Resolved peer",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "messageRange": {
    "doc": "Indicates a range of chat messages",
    "parameters": {
      "min_id": {
        "type": "int",
        "doc": "Start of range (message ID)"
      },
      "max_id": {
        "type": "int",
        "doc": "End of range (message ID)"
      }
    }
  },
  "updates.channelDifferenceEmpty": {
    "doc": "There are no new updates",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "final": {
        "type": "flags.0?true",
        "doc": "Whether there are more updates that must be fetched (always false)"
      },
      "pts": {
        "type": "int",
        "doc": "The latest [PTS](https://core.telegram.org/api/updates)"
      },
      "timeout": {
        "type": "flags.1?int",
        "doc": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed"
      }
    }
  },
  "updates.channelDifferenceTooLong": {
    "doc": "The provided `pts + limit < remote pts`. Simply, there are too many updates to be fetched (more than `limit`), the client has to resolve the update gap in one of the following ways (assuming the existence of a persistent database to locally store messages):",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "final": {
        "type": "flags.0?true",
        "doc": "Whether there are more updates that must be fetched (always false)"
      },
      "timeout": {
        "type": "flags.1?int",
        "doc": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed"
      },
      "dialog": {
        "type": "Dialog",
        "doc": "Dialog containing the latest [PTS](https://core.telegram.org/api/updates) that can be used to reset the channel state"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "The latest messages"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats from messages"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users from messages"
      }
    }
  },
  "updates.channelDifference": {
    "doc": "The new updates",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "final": {
        "type": "flags.0?true",
        "doc": "Whether there are more updates to be fetched using getDifference, starting from the provided `pts`"
      },
      "pts": {
        "type": "int",
        "doc": "The [PTS](https://core.telegram.org/api/updates) from which to start getting updates the next time"
      },
      "timeout": {
        "type": "flags.1?int",
        "doc": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed"
      },
      "new_messages": {
        "type": "Vector<Message>",
        "doc": "New messages"
      },
      "other_updates": {
        "type": "Vector<Update>",
        "doc": "Other updates"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "channelMessagesFilterEmpty": {
    "doc": "No filter",
    "parameters": {}
  },
  "channelMessagesFilter": {
    "doc": "Filter for getting only certain types of channel messages",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "exclude_new_messages": {
        "type": "flags.1?true",
        "doc": "Whether to exclude new messages from the search"
      },
      "ranges": {
        "type": "Vector<MessageRange>",
        "doc": "A range of messages to fetch"
      }
    }
  },
  "channelParticipant": {
    "doc": "Channel/supergroup participant",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "Participant user ID"
      },
      "date": {
        "type": "int",
        "doc": "Date joined"
      }
    }
  },
  "channelParticipantSelf": {
    "doc": "Myself",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "via_request": {
        "type": "flags.0?true",
        "doc": "Whether I joined upon specific approval of an admin"
      },
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "inviter_id": {
        "type": "long",
        "doc": "User that invited me to the channel/supergroup"
      },
      "date": {
        "type": "int",
        "doc": "When did I join the channel/supergroup"
      }
    }
  },
  "channelParticipantCreator": {
    "doc": "Channel/supergroup creator",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "admin_rights": {
        "type": "ChatAdminRights",
        "doc": "Creator admin rights"
      },
      "rank": {
        "type": "flags.0?string",
        "doc": "The role (rank) of the group creator in the group: just an arbitrary string, `admin` by default"
      }
    }
  },
  "channelParticipantAdmin": {
    "doc": "Admin",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_edit": {
        "type": "flags.0?true",
        "doc": "Can this admin promote other admins with the same permissions?"
      },
      "self": {
        "type": "flags.1?true",
        "doc": "Is this the current user"
      },
      "user_id": {
        "type": "long",
        "doc": "Admin user ID"
      },
      "inviter_id": {
        "type": "flags.1?long",
        "doc": "User that invited the admin to the channel/group"
      },
      "promoted_by": {
        "type": "long",
        "doc": "User that promoted the user to admin"
      },
      "date": {
        "type": "int",
        "doc": "When did the user join"
      },
      "admin_rights": {
        "type": "ChatAdminRights",
        "doc": "Admin [rights](https://core.telegram.org/api/rights)"
      },
      "rank": {
        "type": "flags.2?string",
        "doc": "The role (rank) of the admin in the group: just an arbitrary string, `admin` by default"
      }
    }
  },
  "channelParticipantBanned": {
    "doc": "Banned/kicked user",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "left": {
        "type": "flags.0?true",
        "doc": "Whether the user has left the group"
      },
      "peer": {
        "type": "Peer",
        "doc": "The banned peer"
      },
      "kicked_by": {
        "type": "long",
        "doc": "User was kicked by the specified admin"
      },
      "date": {
        "type": "int",
        "doc": "When did the user join the group"
      },
      "banned_rights": {
        "type": "ChatBannedRights",
        "doc": "Banned [rights](https://core.telegram.org/api/rights)"
      }
    }
  },
  "channelParticipantLeft": {
    "doc": "A participant that left the channel/supergroup",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer that left"
      }
    }
  },
  "channelParticipantsRecent": {
    "doc": "Fetch only recent participants",
    "parameters": {}
  },
  "channelParticipantsAdmins": {
    "doc": "Fetch only admin participants",
    "parameters": {}
  },
  "channelParticipantsKicked": {
    "doc": "Fetch only kicked participants",
    "parameters": {
      "q": {
        "type": "string",
        "doc": "Optional filter for searching kicked participants by name (otherwise empty)"
      }
    }
  },
  "channelParticipantsBots": {
    "doc": "Fetch only bot participants",
    "parameters": {}
  },
  "channelParticipantsBanned": {
    "doc": "Fetch only banned participants",
    "parameters": {
      "q": {
        "type": "string",
        "doc": "Optional filter for searching banned participants by name (otherwise empty)"
      }
    }
  },
  "channelParticipantsSearch": {
    "doc": "Query participants by name",
    "parameters": {
      "q": {
        "type": "string",
        "doc": "Search query"
      }
    }
  },
  "channelParticipantsContacts": {
    "doc": "Fetch only participants that are also contacts",
    "parameters": {
      "q": {
        "type": "string",
        "doc": "Optional search query for searching contact participants by name"
      }
    }
  },
  "channelParticipantsMentions": {
    "doc": "This filter is used when looking for supergroup members to mention.  \nThis filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific [thread](https://core.telegram.org/api/threads) through the [comment section](https://core.telegram.org/api/threads#channel-comments) of a channel.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "q": {
        "type": "flags.0?string",
        "doc": "Filter by user name or username"
      },
      "top_msg_id": {
        "type": "flags.1?int",
        "doc": "Look only for users that posted in this [thread](https://core.telegram.org/api/threads)"
      }
    }
  },
  "channels.channelParticipants": {
    "doc": "Represents multiple channel participants",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of participants that correspond to the given query"
      },
      "participants": {
        "type": "Vector<ChannelParticipant>",
        "doc": "Participants"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in participant info"
      }
    }
  },
  "channels.channelParticipantsNotModified": {
    "doc": "No new participant info could be found",
    "parameters": {}
  },
  "channels.channelParticipant": {
    "doc": "Represents a channel participant",
    "parameters": {
      "participant": {
        "type": "ChannelParticipant",
        "doc": "The channel participant"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "help.termsOfService": {
    "doc": "Info about the latest telegram Terms Of Service",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "popup": {
        "type": "flags.0?true",
        "doc": "Whether a prompt must be showed to the user, in order to accept the new terms."
      },
      "id": {
        "type": "DataJSON",
        "doc": "ID of the new terms"
      },
      "text": {
        "type": "string",
        "doc": "Text of the new terms"
      },
      "entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "min_age_confirm": {
        "type": "flags.1?int",
        "doc": "Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age."
      }
    }
  },
  "messages.savedGifsNotModified": {
    "doc": "No new saved gifs were found",
    "parameters": {}
  },
  "messages.savedGifs": {
    "doc": "Saved gifs",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "gifs": {
        "type": "Vector<Document>",
        "doc": "List of saved gifs"
      }
    }
  },
  "inputBotInlineMessageMediaAuto": {
    "doc": "A media",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "invert_media": {
        "type": "flags.3?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "message": {
        "type": "string",
        "doc": "Caption"
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineMessageText": {
    "doc": "Simple text message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.0?true",
        "doc": "Disable webpage preview"
      },
      "invert_media": {
        "type": "flags.3?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "message": {
        "type": "string",
        "doc": "Message"
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineMessageMediaGeo": {
    "doc": "Geolocation",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "Geolocation"
      },
      "heading": {
        "type": "flags.0?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360"
      },
      "period": {
        "type": "flags.1?int",
        "doc": "Validity period"
      },
      "proximity_notification_radius": {
        "type": "flags.3?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000)"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Reply markup for bot/inline keyboards"
      }
    }
  },
  "inputBotInlineMessageMediaVenue": {
    "doc": "Venue",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "Geolocation"
      },
      "title": {
        "type": "string",
        "doc": "Venue name"
      },
      "address": {
        "type": "string",
        "doc": "Address"
      },
      "provider": {
        "type": "string",
        "doc": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported"
      },
      "venue_id": {
        "type": "string",
        "doc": "Venue ID in the provider's database"
      },
      "venue_type": {
        "type": "string",
        "doc": "Venue type in the provider's database"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineMessageMediaContact": {
    "doc": "A contact",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "first_name": {
        "type": "string",
        "doc": "First name"
      },
      "last_name": {
        "type": "string",
        "doc": "Last name"
      },
      "vcard": {
        "type": "string",
        "doc": "VCard info"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineMessageGame": {
    "doc": "A game",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineMessageMediaInvoice": {
    "doc": "An invoice",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "title": {
        "type": "string",
        "doc": "Product name, 1-32 characters"
      },
      "description": {
        "type": "string",
        "doc": "Product description, 1-255 characters"
      },
      "photo": {
        "type": "flags.0?InputWebDocument",
        "doc": "Invoice photo"
      },
      "invoice": {
        "type": "Invoice",
        "doc": "The invoice"
      },
      "payload": {
        "type": "bytes",
        "doc": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
      },
      "provider": {
        "type": "string",
        "doc": "Payments provider token, obtained via [Botfather](https://t.me/botfather)"
      },
      "provider_data": {
        "type": "DataJSON",
        "doc": "A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider."
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineMessageMediaWebPage": {
    "doc": "Specifies options that will be used to generate the link preview for the message, or even a standalone link preview without an attached message.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "invert_media": {
        "type": "flags.3?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "force_large_media": {
        "type": "flags.4?true",
        "doc": "If set, specifies that a large media preview should be used."
      },
      "force_small_media": {
        "type": "flags.5?true",
        "doc": "If set, specifies that a small media preview should be used."
      },
      "optional": {
        "type": "flags.6?true",
        "doc": "If **not** set, a `WEBPAGE_NOT_FOUND` RPC error will be emitted if a webpage preview cannot be generated for the specified `url`; otherwise, no error will be emitted (unless the provided message is also empty, in which case a `MESSAGE_EMPTY` will be emitted, instead)."
      },
      "message": {
        "type": "string",
        "doc": "The message, can be empty."
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "url": {
        "type": "string",
        "doc": "The URL to use for the link preview."
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "inputBotInlineResult": {
    "doc": "An inline bot result",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "string",
        "doc": "ID of result"
      },
      "type": {
        "type": "string",
        "doc": "Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))"
      },
      "title": {
        "type": "flags.1?string",
        "doc": "Result title"
      },
      "description": {
        "type": "flags.2?string",
        "doc": "Result description"
      },
      "url": {
        "type": "flags.3?string",
        "doc": "URL of result"
      },
      "thumb": {
        "type": "flags.4?InputWebDocument",
        "doc": "Thumbnail for result"
      },
      "content": {
        "type": "flags.5?InputWebDocument",
        "doc": "Result contents"
      },
      "send_message": {
        "type": "InputBotInlineMessage",
        "doc": "Message to send when the result is selected"
      }
    }
  },
  "inputBotInlineResultPhoto": {
    "doc": "Photo",
    "parameters": {
      "id": {
        "type": "string",
        "doc": "Result ID"
      },
      "type": {
        "type": "string",
        "doc": "Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))"
      },
      "photo": {
        "type": "InputPhoto",
        "doc": "Photo to send"
      },
      "send_message": {
        "type": "InputBotInlineMessage",
        "doc": "Message to send when the result is selected"
      }
    }
  },
  "inputBotInlineResultDocument": {
    "doc": "Document (media of any type except for photos)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "string",
        "doc": "Result ID"
      },
      "type": {
        "type": "string",
        "doc": "Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))"
      },
      "title": {
        "type": "flags.1?string",
        "doc": "Result title"
      },
      "description": {
        "type": "flags.2?string",
        "doc": "Result description"
      },
      "document": {
        "type": "InputDocument",
        "doc": "Document to send"
      },
      "send_message": {
        "type": "InputBotInlineMessage",
        "doc": "Message to send when the result is selected"
      }
    }
  },
  "inputBotInlineResultGame": {
    "doc": "Game",
    "parameters": {
      "id": {
        "type": "string",
        "doc": "Result ID"
      },
      "short_name": {
        "type": "string",
        "doc": "Game short name"
      },
      "send_message": {
        "type": "InputBotInlineMessage",
        "doc": "Message to send when the result is selected"
      }
    }
  },
  "botInlineMessageMediaAuto": {
    "doc": "Send whatever media is attached to the [botInlineMediaResult](https://core.telegram.org/constructor/botInlineMediaResult)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "invert_media": {
        "type": "flags.3?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "message": {
        "type": "string",
        "doc": "Caption"
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "botInlineMessageText": {
    "doc": "Send a simple text message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.0?true",
        "doc": "Disable webpage preview"
      },
      "invert_media": {
        "type": "flags.3?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "message": {
        "type": "string",
        "doc": "The message"
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "botInlineMessageMediaGeo": {
    "doc": "Send a geolocation",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "geo": {
        "type": "GeoPoint",
        "doc": "Geolocation"
      },
      "heading": {
        "type": "flags.0?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360."
      },
      "period": {
        "type": "flags.1?int",
        "doc": "Validity period"
      },
      "proximity_notification_radius": {
        "type": "flags.3?int",
        "doc": "For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000)."
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "botInlineMessageMediaVenue": {
    "doc": "Send a venue",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "geo": {
        "type": "GeoPoint",
        "doc": "Geolocation of venue"
      },
      "title": {
        "type": "string",
        "doc": "Venue name"
      },
      "address": {
        "type": "string",
        "doc": "Address"
      },
      "provider": {
        "type": "string",
        "doc": "Venue provider: currently only \"foursquare\" and \"gplaces\" (Google Places) need to be supported"
      },
      "venue_id": {
        "type": "string",
        "doc": "Venue ID in the provider's database"
      },
      "venue_type": {
        "type": "string",
        "doc": "Venue type in the provider's database"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "botInlineMessageMediaContact": {
    "doc": "Send a contact",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "first_name": {
        "type": "string",
        "doc": "First name"
      },
      "last_name": {
        "type": "string",
        "doc": "Last name"
      },
      "vcard": {
        "type": "string",
        "doc": "VCard info"
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "botInlineMessageMediaInvoice": {
    "doc": "Send an invoice",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "shipping_address_requested": {
        "type": "flags.1?true",
        "doc": "Set this flag if you require the user's shipping address to complete the order"
      },
      "test": {
        "type": "flags.3?true",
        "doc": "Test invoice"
      },
      "title": {
        "type": "string",
        "doc": "Product name, 1-32 characters"
      },
      "description": {
        "type": "string",
        "doc": "Product description, 1-255 characters"
      },
      "photo": {
        "type": "flags.0?WebDocument",
        "doc": "Product photo"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "total_amount": {
        "type": "long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Inline keyboard"
      }
    }
  },
  "botInlineMessageMediaWebPage": {
    "doc": "Specifies options that must be used to generate the link preview for the message, or even a standalone link preview without an attached message.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "invert_media": {
        "type": "flags.3?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "force_large_media": {
        "type": "flags.4?true",
        "doc": "If set, specifies that a large media preview should be used."
      },
      "force_small_media": {
        "type": "flags.5?true",
        "doc": "If set, specifies that a small media preview should be used."
      },
      "manual": {
        "type": "flags.7?true",
        "doc": "If set, indicates that the URL used for the webpage preview was specified manually using [inputMediaWebPage](https://core.telegram.org/constructor/inputMediaWebPage), and may not be related to any of the URLs specified in the message."
      },
      "safe": {
        "type": "flags.8?true",
        "doc": "If set, the link can be opened directly without user confirmation."
      },
      "message": {
        "type": "string",
        "doc": "The message, can be empty."
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "url": {
        "type": "string",
        "doc": "The URL to use for the link preview."
      },
      "reply_markup": {
        "type": "flags.2?ReplyMarkup",
        "doc": "Reply markup for sending bot buttons"
      }
    }
  },
  "botInlineResult": {
    "doc": "Generic result",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "string",
        "doc": "Result ID"
      },
      "type": {
        "type": "string",
        "doc": "Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))"
      },
      "title": {
        "type": "flags.1?string",
        "doc": "Result title"
      },
      "description": {
        "type": "flags.2?string",
        "doc": "Result description"
      },
      "url": {
        "type": "flags.3?string",
        "doc": "URL of article or webpage"
      },
      "thumb": {
        "type": "flags.4?WebDocument",
        "doc": "Thumbnail for the result"
      },
      "content": {
        "type": "flags.5?WebDocument",
        "doc": "Content of the result"
      },
      "send_message": {
        "type": "BotInlineMessage",
        "doc": "Message to send"
      }
    }
  },
  "botInlineMediaResult": {
    "doc": "Media result",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "string",
        "doc": "Result ID"
      },
      "type": {
        "type": "string",
        "doc": "Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult))"
      },
      "photo": {
        "type": "flags.0?Photo",
        "doc": "If type is `photo`, the photo to send"
      },
      "document": {
        "type": "flags.1?Document",
        "doc": "If type is `document`, the document to send"
      },
      "title": {
        "type": "flags.2?string",
        "doc": "Result title"
      },
      "description": {
        "type": "flags.3?string",
        "doc": "Description"
      },
      "send_message": {
        "type": "BotInlineMessage",
        "doc": "Depending on the `type` and on the [constructor](https://core.telegram.org/type/BotInlineMessage), contains the caption of the media or the content of the message to be sent **instead** of the media"
      }
    }
  },
  "messages.botResults": {
    "doc": "Result of a query to an inline bot",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "gallery": {
        "type": "flags.0?true",
        "doc": "Whether the result is a picture gallery"
      },
      "query_id": {
        "type": "long",
        "doc": "Query ID"
      },
      "next_offset": {
        "type": "flags.1?string",
        "doc": "The next offset to use when navigating through results"
      },
      "switch_pm": {
        "type": "flags.2?InlineBotSwitchPM",
        "doc": "Shown as a button on top of the remaining inline result list; if clicked, redirects the user to a private chat with the bot with the specified start parameter."
      },
      "switch_webview": {
        "type": "flags.3?InlineBotWebView",
        "doc": "Shown as a button on top of the remaining inline result list; if clicked, opens the specified [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps)."
      },
      "results": {
        "type": "Vector<BotInlineResult>",
        "doc": "The results"
      },
      "cache_time": {
        "type": "int",
        "doc": "Caching validity of the results"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the results"
      }
    }
  },
  "exportedMessageLink": {
    "doc": "Link to a message in a supergroup/channel",
    "parameters": {
      "link": {
        "type": "string",
        "doc": "URL"
      },
      "html": {
        "type": "string",
        "doc": "Embed code"
      }
    }
  },
  "messageFwdHeader": {
    "doc": "Info about a forwarded message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "imported": {
        "type": "flags.7?true",
        "doc": "Whether this message was [imported from a foreign chat service, click here for more info »](https://core.telegram.org/api/import)"
      },
      "saved_out": {
        "type": "flags.11?true",
        "doc": "Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), set if the original message was outgoing (though the message may have been originally outgoing even if this flag is not set, if `from_id` points to the current user)."
      },
      "from_id": {
        "type": "flags.0?Peer",
        "doc": "The ID of the user that originally sent the message"
      },
      "from_name": {
        "type": "flags.5?string",
        "doc": "The name of the user that originally sent the message"
      },
      "date": {
        "type": "int",
        "doc": "When was the message originally sent"
      },
      "channel_post": {
        "type": "flags.2?int",
        "doc": "ID of the channel message that was forwarded"
      },
      "post_author": {
        "type": "flags.3?string",
        "doc": "For channels and if signatures are enabled, author of the channel message"
      },
      "saved_from_peer": {
        "type": "flags.4?Peer",
        "doc": "Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the dialog where the message was originally sent."
      },
      "saved_from_msg_id": {
        "type": "flags.4?int",
        "doc": "Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the original ID of the message in `saved_from_peer`."
      },
      "saved_from_id": {
        "type": "flags.8?Peer",
        "doc": "Only for forwarded messages reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the sender of the original message (i.e. if user A sends a message, then user B forwards it somewhere, then user C saves it to saved messages, this field will contain the ID of user B and `from_id` will contain the ID of user A)."
      },
      "saved_from_name": {
        "type": "flags.9?string",
        "doc": "Only for forwarded messages from users with forward privacy enabled, sent by users with forward privacy enabled, reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the sender of the original message (i.e. if user A (fwd privacy enabled) sends a message, then user B (fwd privacy enabled) forwards it somewhere, then user C saves it to saved messages, this field will contain the name of user B and `from_name` will contain the name of user A)."
      },
      "saved_date": {
        "type": "flags.10?int",
        "doc": "Only for forwarded messages reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), indicates when was the original message sent (i.e. if user A sends a message @ unixtime 1, then user B forwards it somewhere @ unixtime 2, then user C saves it to saved messages @ unixtime 3, this field will contain 2, `date` will contain 1 and the `date` of the containing [message](https://core.telegram.org/constructor/message) will contain 3)."
      },
      "psa_type": {
        "type": "flags.6?string",
        "doc": "PSA type"
      }
    }
  },
  "auth.codeTypeSms": {
    "doc": "The next time, the authentication code will be delivered via an immediately canceled incoming call.",
    "parameters": {}
  },
  "auth.codeTypeCall": {
    "doc": "The next time, the authentication code is to be delivered via an outgoing phone call.",
    "parameters": {}
  },
  "auth.codeTypeFlashCall": {
    "doc": "The next time, the authentication code will be delivered via an immediately canceled incoming call.",
    "parameters": {}
  },
  "auth.codeTypeMissedCall": {
    "doc": "The next time, the authentication code will be delivered via an immediately canceled incoming call, handled manually by the user.",
    "parameters": {}
  },
  "auth.codeTypeFragmentSms": {
    "doc": "The next time, the authentication code will be delivered via [fragment.com](https://fragment.com)",
    "parameters": {}
  },
  "auth.sentCodeTypeApp": {
    "doc": "The code was sent through the telegram app",
    "parameters": {
      "length": {
        "type": "int",
        "doc": "Length of the code in bytes"
      }
    }
  },
  "auth.sentCodeTypeSms": {
    "doc": "The code was sent via SMS",
    "parameters": {
      "length": {
        "type": "int",
        "doc": "Length of the code in bytes"
      }
    }
  },
  "auth.sentCodeTypeCall": {
    "doc": "The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input.",
    "parameters": {
      "length": {
        "type": "int",
        "doc": "Length of the verification code"
      }
    }
  },
  "auth.sentCodeTypeFlashCall": {
    "doc": "The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern.",
    "parameters": {
      "pattern": {
        "type": "string",
        "doc": "[pattern](https://core.telegram.org/api/pattern) to match"
      }
    }
  },
  "auth.sentCodeTypeMissedCall": {
    "doc": "The code will be sent via a flash phone call, that will be closed immediately. The last digits of the phone number that calls are the code that must be entered manually by the user.",
    "parameters": {
      "prefix": {
        "type": "string",
        "doc": "Prefix of the phone number from which the call will be made"
      },
      "length": {
        "type": "int",
        "doc": "Length of the verification code"
      }
    }
  },
  "auth.sentCodeTypeEmailCode": {
    "doc": "The code was sent via the [previously configured login email »](https://core.telegram.org/api/auth#email-verification)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "apple_signin_allowed": {
        "type": "flags.0?true",
        "doc": "Whether authorization through Apple ID is allowed"
      },
      "google_signin_allowed": {
        "type": "flags.1?true",
        "doc": "Whether authorization through Google ID is allowed"
      },
      "email_pattern": {
        "type": "string",
        "doc": "[Pattern](https://core.telegram.org/api/pattern) of the email"
      },
      "length": {
        "type": "int",
        "doc": "Length of the sent verification code"
      },
      "reset_available_period": {
        "type": "flags.3?int",
        "doc": "Clients should wait for the specified amount of seconds before allowing the user to invoke [auth.resetLoginEmail](https://core.telegram.org/method/auth.resetLoginEmail) (will be 0 for [Premium](https://core.telegram.org/api/premium) users)."
      },
      "reset_pending_date": {
        "type": "flags.4?int",
        "doc": "An email reset was already requested, and will occur at the specified date."
      }
    }
  },
  "auth.sentCodeTypeSetUpEmailRequired": {
    "doc": "The user should add and verify an email address in order to login as described [here »](https://core.telegram.org/api/auth#email-verification).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "apple_signin_allowed": {
        "type": "flags.0?true",
        "doc": "Whether authorization through Apple ID is allowed"
      },
      "google_signin_allowed": {
        "type": "flags.1?true",
        "doc": "Whether authorization through Google ID is allowed"
      }
    }
  },
  "auth.sentCodeTypeFragmentSms": {
    "doc": "The code was delivered via [fragment.com](https://fragment.com).",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Open the specified URL to log into [fragment.com](https://fragment.com) with the wallet that owns the specified phone number and view the code."
      },
      "length": {
        "type": "int",
        "doc": "Length of the delivered code."
      }
    }
  },
  "auth.sentCodeTypeFirebaseSms": {
    "doc": "An authentication code should be delivered via SMS after Firebase attestation, as described in the [auth documentation »](https://core.telegram.org/api/auth).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "nonce": {
        "type": "flags.0?bytes",
        "doc": "On Android, the nonce to be used as described in the [auth documentation »](https://core.telegram.org/api/auth)"
      },
      "receipt": {
        "type": "flags.1?string",
        "doc": "On iOS, must be compared with the `receipt` extracted from the received push notification."
      },
      "push_timeout": {
        "type": "flags.1?int",
        "doc": "On iOS: if a push notification with the `ios_push_secret` isn't received within `push_timeout` seconds, the `next_type` authentication method must be used, with [auth.resendCode](https://core.telegram.org/method/auth.resendCode)."
      },
      "length": {
        "type": "int",
        "doc": "Length of the code that will be delivered."
      }
    }
  },
  "messages.botCallbackAnswer": {
    "doc": "Callback answer sent by the bot in response to a button press",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "alert": {
        "type": "flags.1?true",
        "doc": "Whether an alert should be shown to the user instead of a toast notification"
      },
      "has_url": {
        "type": "flags.3?true",
        "doc": "Whether an URL is present"
      },
      "native_ui": {
        "type": "flags.4?true",
        "doc": "Whether to show games in WebView or in native UI."
      },
      "message": {
        "type": "flags.0?string",
        "doc": "Alert to show"
      },
      "url": {
        "type": "flags.2?string",
        "doc": "URL to open"
      },
      "cache_time": {
        "type": "int",
        "doc": "For how long should this answer be cached"
      }
    }
  },
  "messages.messageEditData": {
    "doc": "Message edit data for media",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "caption": {
        "type": "flags.0?true",
        "doc": "Media caption, if the specified media's caption can be edited"
      }
    }
  },
  "inputBotInlineMessageID": {
    "doc": "Represents a sent inline message from the perspective of a bot (legacy constructor)",
    "parameters": {
      "dc_id": {
        "type": "int",
        "doc": "DC ID to use when working with this inline message"
      },
      "id": {
        "type": "long",
        "doc": "ID of message, contains both the (32-bit, legacy) owner ID and the message ID, used only for Bot API backwards compatibility with 32-bit user ID."
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash of message"
      }
    }
  },
  "inputBotInlineMessageID64": {
    "doc": "Represents a sent inline message from the perspective of a bot",
    "parameters": {
      "dc_id": {
        "type": "int",
        "doc": "DC ID to use when working with this inline message"
      },
      "owner_id": {
        "type": "long",
        "doc": "ID of the owner of this message"
      },
      "id": {
        "type": "int",
        "doc": "ID of message"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash of message"
      }
    }
  },
  "inlineBotSwitchPM": {
    "doc": "The bot requested the user to message them in private",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter `start_parameter` (can be empty)"
      },
      "start_param": {
        "type": "string",
        "doc": "The parameter for the `/start parameter`"
      }
    }
  },
  "messages.peerDialogs": {
    "doc": "Dialog info of multiple peers",
    "parameters": {
      "dialogs": {
        "type": "Vector<Dialog>",
        "doc": "Dialog info"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "Messages mentioned in dialog info"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      },
      "state": {
        "type": "updates.State",
        "doc": "Current [update state of dialog](https://core.telegram.org/api/updates)"
      }
    }
  },
  "topPeer": {
    "doc": "Top peer",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "rating": {
        "type": "double",
        "doc": "Rating as computed in [top peer rating »](https://core.telegram.org/api/top-rating)"
      }
    }
  },
  "topPeerCategoryBotsPM": {
    "doc": "Most used bots",
    "parameters": {}
  },
  "topPeerCategoryBotsInline": {
    "doc": "Most used inline bots",
    "parameters": {}
  },
  "topPeerCategoryCorrespondents": {
    "doc": "Users we've chatted most frequently with",
    "parameters": {}
  },
  "topPeerCategoryGroups": {
    "doc": "Often-opened groups and supergroups",
    "parameters": {}
  },
  "topPeerCategoryChannels": {
    "doc": "Most frequently visited channels",
    "parameters": {}
  },
  "topPeerCategoryPhoneCalls": {
    "doc": "Most frequently called users",
    "parameters": {}
  },
  "topPeerCategoryForwardUsers": {
    "doc": "Users to which the users often forwards messages to",
    "parameters": {}
  },
  "topPeerCategoryForwardChats": {
    "doc": "Chats to which the users often forwards messages to",
    "parameters": {}
  },
  "topPeerCategoryPeers": {
    "doc": "Top peer category",
    "parameters": {
      "category": {
        "type": "TopPeerCategory",
        "doc": "Top peer category of peers"
      },
      "count": {
        "type": "int",
        "doc": "Count of peers"
      },
      "peers": {
        "type": "Vector<TopPeer>",
        "doc": "Peers"
      }
    }
  },
  "contacts.topPeersNotModified": {
    "doc": "Top peer info hasn't changed",
    "parameters": {}
  },
  "contacts.topPeers": {
    "doc": "Top peers",
    "parameters": {
      "categories": {
        "type": "Vector<TopPeerCategoryPeers>",
        "doc": "Top peers by top peer category"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "contacts.topPeersDisabled": {
    "doc": "Top peers disabled",
    "parameters": {}
  },
  "draftMessageEmpty": {
    "doc": "Empty draft",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "date": {
        "type": "flags.0?int",
        "doc": "When was the draft last updated"
      }
    }
  },
  "draftMessage": {
    "doc": "Represents a message [draft](https://core.telegram.org/api/drafts).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "no_webpage": {
        "type": "flags.1?true",
        "doc": "Whether no webpage preview will be generated"
      },
      "invert_media": {
        "type": "flags.6?true",
        "doc": "If set, any eventual webpage preview will be shown on top of the message instead of at the bottom."
      },
      "reply_to": {
        "type": "flags.4?InputReplyTo",
        "doc": "If set, indicates that the message should be sent in reply to the specified message or story."
      },
      "message": {
        "type": "string",
        "doc": "The draft"
      },
      "entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "Message [entities](https://core.telegram.org/api/entities) for styled text."
      },
      "media": {
        "type": "flags.5?InputMedia",
        "doc": "Media."
      },
      "date": {
        "type": "int",
        "doc": "Date of last update of the draft."
      }
    }
  },
  "messages.featuredStickersNotModified": {
    "doc": "Featured stickers haven't changed",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of featured stickers"
      }
    }
  },
  "messages.featuredStickers": {
    "doc": "Featured stickersets",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "premium": {
        "type": "flags.0?true",
        "doc": "Whether this is a premium stickerset"
      },
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of featured stickers"
      },
      "sets": {
        "type": "Vector<StickerSetCovered>",
        "doc": "Featured stickersets"
      },
      "unread": {
        "type": "Vector<long>",
        "doc": "IDs of new featured stickersets"
      }
    }
  },
  "messages.recentStickersNotModified": {
    "doc": "No new recent sticker was found",
    "parameters": {}
  },
  "messages.recentStickers": {
    "doc": "Recently used stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "packs": {
        "type": "Vector<StickerPack>",
        "doc": "Emojis associated to stickers"
      },
      "stickers": {
        "type": "Vector<Document>",
        "doc": "Recent stickers"
      },
      "dates": {
        "type": "Vector<int>",
        "doc": "When was each sticker last used"
      }
    }
  },
  "messages.archivedStickers": {
    "doc": "Archived stickersets",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of archived stickers"
      },
      "sets": {
        "type": "Vector<StickerSetCovered>",
        "doc": "Archived stickersets"
      }
    }
  },
  "messages.stickerSetInstallResultSuccess": {
    "doc": "The stickerset was installed successfully",
    "parameters": {}
  },
  "messages.stickerSetInstallResultArchive": {
    "doc": "The stickerset was installed, but since there are too many stickersets some were archived",
    "parameters": {
      "sets": {
        "type": "Vector<StickerSetCovered>",
        "doc": "Archived stickersets"
      }
    }
  },
  "stickerSetCovered": {
    "doc": "Stickerset with a single sticker as preview",
    "parameters": {
      "set": {
        "type": "StickerSet",
        "doc": "Stickerset"
      },
      "cover": {
        "type": "Document",
        "doc": "Preview"
      }
    }
  },
  "stickerSetMultiCovered": {
    "doc": "Stickerset, with multiple stickers as preview",
    "parameters": {
      "set": {
        "type": "StickerSet",
        "doc": "Stickerset"
      },
      "covers": {
        "type": "Vector<Document>",
        "doc": "Preview stickers"
      }
    }
  },
  "stickerSetFullCovered": {
    "doc": "Stickerset preview with all stickers of the stickerset included.  \nCurrently used only for [custom emoji stickersets](https://core.telegram.org/api/custom-emoji), to avoid a further call to [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet).",
    "parameters": {
      "set": {
        "type": "StickerSet",
        "doc": "Stickerset"
      },
      "packs": {
        "type": "Vector<StickerPack>",
        "doc": "Emoji information about every sticker in the stickerset"
      },
      "keywords": {
        "type": "Vector<StickerKeyword>",
        "doc": "Keywords for some or every sticker in the stickerset."
      },
      "documents": {
        "type": "Vector<Document>",
        "doc": "Stickers"
      }
    }
  },
  "stickerSetNoCovered": {
    "doc": "Just the stickerset information, with no previews.",
    "parameters": {
      "set": {
        "type": "StickerSet",
        "doc": "Stickerset information."
      }
    }
  },
  "maskCoords": {
    "doc": "Position on a photo where a mask should be placed when [attaching stickers to media »](https://core.telegram.org/api/stickers#attached-stickers)",
    "parameters": {
      "n": {
        "type": "int",
        "doc": "Part of the face, relative to which the mask should be placed"
      },
      "x": {
        "type": "double",
        "doc": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)"
      },
      "y": {
        "type": "double",
        "doc": "Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just below the default mask position)"
      },
      "zoom": {
        "type": "double",
        "doc": "Mask scaling coefficient. (For example, 2.0 means a doubled size)"
      }
    }
  },
  "inputStickeredMediaPhoto": {
    "doc": "A photo with stickers attached",
    "parameters": {
      "id": {
        "type": "InputPhoto",
        "doc": "The photo"
      }
    }
  },
  "inputStickeredMediaDocument": {
    "doc": "A document with stickers attached",
    "parameters": {
      "id": {
        "type": "InputDocument",
        "doc": "The document"
      }
    }
  },
  "game": {
    "doc": "Indicates an already sent game",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "long",
        "doc": "ID of the game"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash of the game"
      },
      "short_name": {
        "type": "string",
        "doc": "Short name for the game"
      },
      "title": {
        "type": "string",
        "doc": "Title of the game"
      },
      "description": {
        "type": "string",
        "doc": "Game description"
      },
      "photo": {
        "type": "Photo",
        "doc": "Game preview"
      },
      "document": {
        "type": "flags.0?Document",
        "doc": "Optional attached document"
      }
    }
  },
  "inputGameID": {
    "doc": "Indicates an already sent game",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "game ID from [Game](https://core.telegram.org/type/Game) constructor"
      },
      "access_hash": {
        "type": "long",
        "doc": "access hash from [Game](https://core.telegram.org/type/Game) constructor"
      }
    }
  },
  "inputGameShortName": {
    "doc": "Game by short name",
    "parameters": {
      "bot_id": {
        "type": "InputUser",
        "doc": "The bot that provides the game"
      },
      "short_name": {
        "type": "string",
        "doc": "The game's short name, usually obtained from a [game link »](https://core.telegram.org/api/links#game-links)"
      }
    }
  },
  "highScore": {
    "doc": "Game highscore",
    "parameters": {
      "pos": {
        "type": "int",
        "doc": "Position in highscore list"
      },
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "score": {
        "type": "int",
        "doc": "Score"
      }
    }
  },
  "messages.highScores": {
    "doc": "Highscores in a game",
    "parameters": {
      "scores": {
        "type": "Vector<HighScore>",
        "doc": "Highscores"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users, associated to the highscores"
      }
    }
  },
  "textEmpty": {
    "doc": "Empty rich text element",
    "parameters": {}
  },
  "textPlain": {
    "doc": "Plain text",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Text"
      }
    }
  },
  "textBold": {
    "doc": "**Bold** text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textItalic": {
    "doc": "_Italic_ text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textUnderline": {
    "doc": "Underlined text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textStrike": {
    "doc": "Strikethrough text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textFixed": {
    "doc": "`fixed-width` rich text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textUrl": {
    "doc": "Link",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text of link"
      },
      "url": {
        "type": "string",
        "doc": "Webpage HTTP URL"
      },
      "webpage_id": {
        "type": "long",
        "doc": "If a preview was already generated for the page, the page ID"
      }
    }
  },
  "textEmail": {
    "doc": "Rich text email link",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Link text"
      },
      "email": {
        "type": "string",
        "doc": "Email address"
      }
    }
  },
  "textConcat": {
    "doc": "Concatenation of rich texts",
    "parameters": {
      "texts": {
        "type": "Vector<RichText>",
        "doc": "Concatenated rich texts"
      }
    }
  },
  "textSubscript": {
    "doc": "Subscript text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textSuperscript": {
    "doc": "Superscript text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textMarked": {
    "doc": "Highlighted text",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "textPhone": {
    "doc": "Rich text linked to a phone number",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      },
      "phone": {
        "type": "string",
        "doc": "Phone number"
      }
    }
  },
  "textImage": {
    "doc": "Inline image",
    "parameters": {
      "document_id": {
        "type": "long",
        "doc": "Document ID"
      },
      "w": {
        "type": "int",
        "doc": "Width"
      },
      "h": {
        "type": "int",
        "doc": "Height"
      }
    }
  },
  "textAnchor": {
    "doc": "Text linking to another section of the page",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      },
      "name": {
        "type": "string",
        "doc": "Section name"
      }
    }
  },
  "pageBlockUnsupported": {
    "doc": "Unsupported IV element",
    "parameters": {}
  },
  "pageBlockTitle": {
    "doc": "Title",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Title"
      }
    }
  },
  "pageBlockSubtitle": {
    "doc": "Subtitle",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "pageBlockAuthorDate": {
    "doc": "Author and date of creation of article",
    "parameters": {
      "author": {
        "type": "RichText",
        "doc": "Author name"
      },
      "published_date": {
        "type": "int",
        "doc": "Date of publication"
      }
    }
  },
  "pageBlockHeader": {
    "doc": "Page header",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Contents"
      }
    }
  },
  "pageBlockSubheader": {
    "doc": "Subheader",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Subheader"
      }
    }
  },
  "pageBlockParagraph": {
    "doc": "A paragraph",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "pageBlockPreformatted": {
    "doc": "Preformatted (`<pre>` text)",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      },
      "language": {
        "type": "string",
        "doc": "Programming language of preformatted text"
      }
    }
  },
  "pageBlockFooter": {
    "doc": "Page footer",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Contents"
      }
    }
  },
  "pageBlockDivider": {
    "doc": "An empty block separating a page",
    "parameters": {}
  },
  "pageBlockAnchor": {
    "doc": "Link to section within the page itself (like `<a href=\"#target\">anchor</a>`)",
    "parameters": {
      "name": {
        "type": "string",
        "doc": "Name of target section"
      }
    }
  },
  "pageBlockList": {
    "doc": "Unordered list of IV blocks",
    "parameters": {
      "items": {
        "type": "Vector<PageListItem>",
        "doc": "List of blocks in an IV page"
      }
    }
  },
  "pageBlockBlockquote": {
    "doc": "Quote (equivalent to the HTML `<blockquote>`)",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Quote contents"
      },
      "caption": {
        "type": "RichText",
        "doc": "Caption"
      }
    }
  },
  "pageBlockPullquote": {
    "doc": "Pullquote",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      },
      "caption": {
        "type": "RichText",
        "doc": "Caption"
      }
    }
  },
  "pageBlockPhoto": {
    "doc": "A photo",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "photo_id": {
        "type": "long",
        "doc": "Photo ID"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      },
      "url": {
        "type": "flags.0?string",
        "doc": "HTTP URL of page the photo leads to when clicked"
      },
      "webpage_id": {
        "type": "flags.0?long",
        "doc": "ID of preview of the page the photo leads to when clicked"
      }
    }
  },
  "pageBlockVideo": {
    "doc": "Video",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "autoplay": {
        "type": "flags.0?true",
        "doc": "Whether the video is set to autoplay"
      },
      "loop": {
        "type": "flags.1?true",
        "doc": "Whether the video is set to loop"
      },
      "video_id": {
        "type": "long",
        "doc": "Video ID"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      }
    }
  },
  "pageBlockCover": {
    "doc": "A page cover",
    "parameters": {
      "cover": {
        "type": "PageBlock",
        "doc": "Cover"
      }
    }
  },
  "pageBlockEmbed": {
    "doc": "An embedded webpage",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "full_width": {
        "type": "flags.0?true",
        "doc": "Whether the block should be full width"
      },
      "allow_scrolling": {
        "type": "flags.3?true",
        "doc": "Whether scrolling should be allowed"
      },
      "url": {
        "type": "flags.1?string",
        "doc": "Web page URL, if available"
      },
      "html": {
        "type": "flags.2?string",
        "doc": "HTML-markup of the embedded page"
      },
      "poster_photo_id": {
        "type": "flags.4?long",
        "doc": "Poster photo, if available"
      },
      "w": {
        "type": "flags.5?int",
        "doc": "Block width, if known"
      },
      "h": {
        "type": "flags.5?int",
        "doc": "Block height, if known"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      }
    }
  },
  "pageBlockEmbedPost": {
    "doc": "An embedded post",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Web page URL"
      },
      "webpage_id": {
        "type": "long",
        "doc": "ID of generated webpage preview"
      },
      "author_photo_id": {
        "type": "long",
        "doc": "ID of the author's photo"
      },
      "author": {
        "type": "string",
        "doc": "Author name"
      },
      "date": {
        "type": "int",
        "doc": "Creation date"
      },
      "blocks": {
        "type": "Vector<PageBlock>",
        "doc": "Post contents"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      }
    }
  },
  "pageBlockCollage": {
    "doc": "Collage of media",
    "parameters": {
      "items": {
        "type": "Vector<PageBlock>",
        "doc": "Media elements"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      }
    }
  },
  "pageBlockSlideshow": {
    "doc": "Slideshow",
    "parameters": {
      "items": {
        "type": "Vector<PageBlock>",
        "doc": "Slideshow items"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      }
    }
  },
  "pageBlockChannel": {
    "doc": "Reference to a telegram channel",
    "parameters": {
      "channel": {
        "type": "Chat",
        "doc": "The channel/supergroup/chat"
      }
    }
  },
  "pageBlockAudio": {
    "doc": "Audio",
    "parameters": {
      "audio_id": {
        "type": "long",
        "doc": "Audio ID (to be fetched from the container [page](https://core.telegram.org/constructor/page) constructor"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Audio caption"
      }
    }
  },
  "pageBlockKicker": {
    "doc": "Kicker",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Contents"
      }
    }
  },
  "pageBlockTable": {
    "doc": "Table",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "bordered": {
        "type": "flags.0?true",
        "doc": "Does the table have a visible border?"
      },
      "striped": {
        "type": "flags.1?true",
        "doc": "Is the table striped?"
      },
      "title": {
        "type": "RichText",
        "doc": "Title"
      },
      "rows": {
        "type": "Vector<PageTableRow>",
        "doc": "Table rows"
      }
    }
  },
  "pageBlockOrderedList": {
    "doc": "Ordered list of IV blocks",
    "parameters": {
      "items": {
        "type": "Vector<PageListOrderedItem>",
        "doc": "List items"
      }
    }
  },
  "pageBlockDetails": {
    "doc": "A collapsible details block",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "open": {
        "type": "flags.0?true",
        "doc": "Whether the block is open by default"
      },
      "blocks": {
        "type": "Vector<PageBlock>",
        "doc": "Block contents"
      },
      "title": {
        "type": "RichText",
        "doc": "Always visible heading for the block"
      }
    }
  },
  "pageBlockRelatedArticles": {
    "doc": "Related articles",
    "parameters": {
      "title": {
        "type": "RichText",
        "doc": "Title"
      },
      "articles": {
        "type": "Vector<PageRelatedArticle>",
        "doc": "Related articles"
      }
    }
  },
  "pageBlockMap": {
    "doc": "A map",
    "parameters": {
      "geo": {
        "type": "GeoPoint",
        "doc": "Location of the map center"
      },
      "zoom": {
        "type": "int",
        "doc": "Map zoom level; 13-20"
      },
      "w": {
        "type": "int",
        "doc": "Map width in pixels before applying scale; 16-102"
      },
      "h": {
        "type": "int",
        "doc": "Map height in pixels before applying scale; 16-1024"
      },
      "caption": {
        "type": "PageCaption",
        "doc": "Caption"
      }
    }
  },
  "phoneCallDiscardReasonMissed": {
    "doc": "The phone call was missed",
    "parameters": {}
  },
  "phoneCallDiscardReasonDisconnect": {
    "doc": "The phone call was disconnected",
    "parameters": {}
  },
  "phoneCallDiscardReasonHangup": {
    "doc": "The phone call was ended normally",
    "parameters": {}
  },
  "phoneCallDiscardReasonBusy": {
    "doc": "The phone call was discarded because the user is busy in another call",
    "parameters": {}
  },
  "dataJSON": {
    "doc": "Represents a json-encoded object",
    "parameters": {
      "data": {
        "type": "string",
        "doc": "JSON-encoded object"
      }
    }
  },
  "labeledPrice": {
    "doc": "This object represents a portion of the price for goods or services.",
    "parameters": {
      "label": {
        "type": "string",
        "doc": "Portion label"
      },
      "amount": {
        "type": "long",
        "doc": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "invoice": {
    "doc": "Invoice",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "test": {
        "type": "flags.0?true",
        "doc": "Test invoice"
      },
      "name_requested": {
        "type": "flags.1?true",
        "doc": "Set this flag if you require the user's full name to complete the order"
      },
      "phone_requested": {
        "type": "flags.2?true",
        "doc": "Set this flag if you require the user's phone number to complete the order"
      },
      "email_requested": {
        "type": "flags.3?true",
        "doc": "Set this flag if you require the user's email address to complete the order"
      },
      "shipping_address_requested": {
        "type": "flags.4?true",
        "doc": "Set this flag if you require the user's shipping address to complete the order"
      },
      "flexible": {
        "type": "flags.5?true",
        "doc": "Set this flag if the final price depends on the shipping method"
      },
      "phone_to_provider": {
        "type": "flags.6?true",
        "doc": "Set this flag if user's phone number should be sent to provider"
      },
      "email_to_provider": {
        "type": "flags.7?true",
        "doc": "Set this flag if user's email address should be sent to provider"
      },
      "recurring": {
        "type": "flags.9?true",
        "doc": "Whether this is a recurring payment"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "prices": {
        "type": "Vector<LabeledPrice>",
        "doc": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
      },
      "max_tip_amount": {
        "type": "flags.8?long",
        "doc": "The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "suggested_tip_amounts": {
        "type": "flags.8?Vector<long>",
        "doc": "A vector of suggested amounts of tips in the _smallest units_ of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed `max_tip_amount`."
      },
      "terms_url": {
        "type": "flags.10?string",
        "doc": "Terms of service URL"
      }
    }
  },
  "paymentCharge": {
    "doc": "Payment identifier",
    "parameters": {
      "id": {
        "type": "string",
        "doc": "Telegram payment identifier"
      },
      "provider_charge_id": {
        "type": "string",
        "doc": "Provider payment identifier"
      }
    }
  },
  "postAddress": {
    "doc": "Shipping address",
    "parameters": {
      "street_line1": {
        "type": "string",
        "doc": "First line for the address"
      },
      "street_line2": {
        "type": "string",
        "doc": "Second line for the address"
      },
      "city": {
        "type": "string",
        "doc": "City"
      },
      "state": {
        "type": "string",
        "doc": "State, if applicable (empty otherwise)"
      },
      "country_iso2": {
        "type": "string",
        "doc": "ISO 3166-1 alpha-2 country code"
      },
      "post_code": {
        "type": "string",
        "doc": "Address post code"
      }
    }
  },
  "paymentRequestedInfo": {
    "doc": "Order info provided by the user",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "name": {
        "type": "flags.0?string",
        "doc": "User's full name"
      },
      "phone": {
        "type": "flags.1?string",
        "doc": "User's phone number"
      },
      "email": {
        "type": "flags.2?string",
        "doc": "User's email address"
      },
      "shipping_address": {
        "type": "flags.3?PostAddress",
        "doc": "User's shipping address"
      }
    }
  },
  "paymentSavedCredentialsCard": {
    "doc": "Saved credit card",
    "parameters": {
      "id": {
        "type": "string",
        "doc": "Card ID"
      },
      "title": {
        "type": "string",
        "doc": "Title"
      }
    }
  },
  "webDocument": {
    "doc": "Remote document",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Document URL"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "size": {
        "type": "int",
        "doc": "File size"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type"
      },
      "attributes": {
        "type": "Vector<DocumentAttribute>",
        "doc": "Attributes for media types"
      }
    }
  },
  "webDocumentNoProxy": {
    "doc": "Remote document that can be downloaded without [proxying through telegram](https://core.telegram.org/api/files)",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Document URL"
      },
      "size": {
        "type": "int",
        "doc": "File size"
      },
      "mime_type": {
        "type": "string",
        "doc": "MIME type"
      },
      "attributes": {
        "type": "Vector<DocumentAttribute>",
        "doc": "Attributes for media types"
      }
    }
  },
  "inputWebDocument": {
    "doc": "The document",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Remote document URL to be downloaded using the appropriate [method](https://core.telegram.org/api/files)"
      },
      "size": {
        "type": "int",
        "doc": "Remote file size"
      },
      "mime_type": {
        "type": "string",
        "doc": "Mime type"
      },
      "attributes": {
        "type": "Vector<DocumentAttribute>",
        "doc": "Attributes for media types"
      }
    }
  },
  "inputWebFileLocation": {
    "doc": "Location of a remote HTTP(s) file",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "HTTP URL of file"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      }
    }
  },
  "inputWebFileGeoPointLocation": {
    "doc": "Used to download a server-generated image with the map preview from a [geoPoint](https://core.telegram.org/constructor/geoPoint), see the [webfile docs for more info »](https://core.telegram.org/api/files#downloading-webfiles).",
    "parameters": {
      "geo_point": {
        "type": "InputGeoPoint",
        "doc": "Generated from the `lat`, `long` and `accuracy_radius` parameters of the [geoPoint](https://core.telegram.org/constructor/geoPoint)"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash of the [geoPoint](https://core.telegram.org/constructor/geoPoint)"
      },
      "w": {
        "type": "int",
        "doc": "Map width in pixels before applying scale; 16-1024"
      },
      "h": {
        "type": "int",
        "doc": "Map height in pixels before applying scale; 16-1024"
      },
      "zoom": {
        "type": "int",
        "doc": "Map zoom level; 13-20"
      },
      "scale": {
        "type": "int",
        "doc": "Map scale; 1-3"
      }
    }
  },
  "inputWebFileAudioAlbumThumbLocation": {
    "doc": "Used to download an album cover for any music file using [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile), see the [webfile docs for more info »](https://core.telegram.org/api/files#downloading-webfiles).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "small": {
        "type": "flags.2?true",
        "doc": "Used to return a thumbnail with `100x100` resolution (instead of the default `600x600`)"
      },
      "document": {
        "type": "flags.0?InputDocument",
        "doc": "The audio file in question: must NOT be provided in secret chats, provide the `title` and `performer` fields instead."
      },
      "title": {
        "type": "flags.1?string",
        "doc": "Song title: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits."
      },
      "performer": {
        "type": "flags.1?string",
        "doc": "Song performer: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits."
      }
    }
  },
  "upload.webFile": {
    "doc": "Represents a chunk of an [HTTP webfile](https://core.telegram.org/api/files) downloaded through telegram's secure MTProto servers",
    "parameters": {
      "size": {
        "type": "int",
        "doc": "File size"
      },
      "mime_type": {
        "type": "string",
        "doc": "Mime type"
      },
      "file_type": {
        "type": "storage.FileType",
        "doc": "File type"
      },
      "mtime": {
        "type": "int",
        "doc": "Modified time"
      },
      "bytes": {
        "type": "bytes",
        "doc": "Data"
      }
    }
  },
  "payments.paymentForm": {
    "doc": "Payment form",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "can_save_credentials": {
        "type": "flags.2?true",
        "doc": "Whether the user can choose to save credentials."
      },
      "password_missing": {
        "type": "flags.3?true",
        "doc": "Indicates that the user can save payment credentials, but only after setting up a [2FA password](https://core.telegram.org/api/srp) (currently the account doesn't have a [2FA password](https://core.telegram.org/api/srp))"
      },
      "form_id": {
        "type": "long",
        "doc": "Form ID"
      },
      "bot_id": {
        "type": "long",
        "doc": "Bot ID"
      },
      "title": {
        "type": "string",
        "doc": "Form title"
      },
      "description": {
        "type": "string",
        "doc": "Description"
      },
      "photo": {
        "type": "flags.5?WebDocument",
        "doc": "Product photo"
      },
      "invoice": {
        "type": "Invoice",
        "doc": "Invoice"
      },
      "provider_id": {
        "type": "long",
        "doc": "Payment provider ID."
      },
      "url": {
        "type": "string",
        "doc": "Payment form URL"
      },
      "native_provider": {
        "type": "flags.4?string",
        "doc": "Payment provider name.  \nOne of the following:  \n\\- `stripe`"
      },
      "native_params": {
        "type": "flags.4?DataJSON",
        "doc": "Contains information about the payment provider, if available, to support it natively without the need for opening the URL.  \nA JSON object that can contain the following fields:  \n  \n\\- `apple_pay_merchant_id`: Apple Pay merchant ID  \n\\- `google_pay_public_key`: Google Pay public key  \n\\- `need_country`: True, if the user country must be provided,  \n\\- `need_zip`: True, if the user ZIP/postal code must be provided,  \n\\- `need_cardholder_name`: True, if the cardholder name must be provided"
      },
      "additional_methods": {
        "type": "flags.6?Vector<PaymentFormMethod>",
        "doc": "Additional payment methods"
      },
      "saved_info": {
        "type": "flags.0?PaymentRequestedInfo",
        "doc": "Saved server-side order information"
      },
      "saved_credentials": {
        "type": "flags.1?Vector<PaymentSavedCredentials>",
        "doc": "Contains information about saved card credentials"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "payments.validatedRequestedInfo": {
    "doc": "Validated user-provided info",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "flags.0?string",
        "doc": "ID"
      },
      "shipping_options": {
        "type": "flags.1?Vector<ShippingOption>",
        "doc": "Shipping options"
      }
    }
  },
  "payments.paymentResult": {
    "doc": "Payment result",
    "parameters": {
      "updates": {
        "type": "Updates",
        "doc": "Info about the payment"
      }
    }
  },
  "payments.paymentVerificationNeeded": {
    "doc": "Payment was not successful, additional verification is needed",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "URL for additional payment credentials verification"
      }
    }
  },
  "payments.paymentReceipt": {
    "doc": "Receipt",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "date": {
        "type": "int",
        "doc": "Date of generation"
      },
      "bot_id": {
        "type": "long",
        "doc": "Bot ID"
      },
      "provider_id": {
        "type": "long",
        "doc": "Provider ID"
      },
      "title": {
        "type": "string",
        "doc": "Title"
      },
      "description": {
        "type": "string",
        "doc": "Description"
      },
      "photo": {
        "type": "flags.2?WebDocument",
        "doc": "Photo"
      },
      "invoice": {
        "type": "Invoice",
        "doc": "Invoice"
      },
      "info": {
        "type": "flags.0?PaymentRequestedInfo",
        "doc": "Info"
      },
      "shipping": {
        "type": "flags.1?ShippingOption",
        "doc": "Selected shipping option"
      },
      "tip_amount": {
        "type": "flags.3?long",
        "doc": "Tipped amount"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "total_amount": {
        "type": "long",
        "doc": "Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "credentials_title": {
        "type": "string",
        "doc": "Payment credential name"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "payments.savedInfo": {
    "doc": "Saved server-side order information",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_saved_credentials": {
        "type": "flags.1?true",
        "doc": "Whether the user has some saved payment credentials"
      },
      "saved_info": {
        "type": "flags.0?PaymentRequestedInfo",
        "doc": "Saved server-side order information"
      }
    }
  },
  "inputPaymentCredentialsSaved": {
    "doc": "Saved payment credentials",
    "parameters": {
      "id": {
        "type": "string",
        "doc": "Credential ID"
      },
      "tmp_password": {
        "type": "bytes",
        "doc": "Temporary password"
      }
    }
  },
  "inputPaymentCredentials": {
    "doc": "Payment credentials",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "save": {
        "type": "flags.0?true",
        "doc": "Save payment credential for future use"
      },
      "data": {
        "type": "DataJSON",
        "doc": "Payment credentials"
      }
    }
  },
  "inputPaymentCredentialsApplePay": {
    "doc": "Apple pay payment credentials",
    "parameters": {
      "payment_data": {
        "type": "DataJSON",
        "doc": "Payment data"
      }
    }
  },
  "inputPaymentCredentialsGooglePay": {
    "doc": "Google Pay payment credentials",
    "parameters": {
      "payment_token": {
        "type": "DataJSON",
        "doc": "Payment token"
      }
    }
  },
  "account.tmpPassword": {
    "doc": "Temporary payment password",
    "parameters": {
      "tmp_password": {
        "type": "bytes",
        "doc": "Temporary password"
      },
      "valid_until": {
        "type": "int",
        "doc": "Validity period"
      }
    }
  },
  "shippingOption": {
    "doc": "Shipping option",
    "parameters": {
      "id": {
        "type": "string",
        "doc": "Option ID"
      },
      "title": {
        "type": "string",
        "doc": "Title"
      },
      "prices": {
        "type": "Vector<LabeledPrice>",
        "doc": "List of price portions"
      }
    }
  },
  "inputStickerSetItem": {
    "doc": "Sticker in a stickerset",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "document": {
        "type": "InputDocument",
        "doc": "The sticker"
      },
      "emoji": {
        "type": "string",
        "doc": "Associated emoji"
      },
      "mask_coords": {
        "type": "flags.0?MaskCoords",
        "doc": "Coordinates for mask sticker"
      },
      "keywords": {
        "type": "flags.1?string",
        "doc": "Set of keywords, separated by commas (can't be provided for mask stickers)"
      }
    }
  },
  "inputPhoneCall": {
    "doc": "Phone call",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      }
    }
  },
  "phoneCallEmpty": {
    "doc": "Empty constructor",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Call ID"
      }
    }
  },
  "phoneCallWaiting": {
    "doc": "Incoming phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "video": {
        "type": "flags.6?true",
        "doc": "Is this a video call"
      },
      "id": {
        "type": "long",
        "doc": "Call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "date": {
        "type": "int",
        "doc": "Date"
      },
      "admin_id": {
        "type": "long",
        "doc": "Admin ID"
      },
      "participant_id": {
        "type": "long",
        "doc": "Participant ID"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Phone call protocol info"
      },
      "receive_date": {
        "type": "flags.0?int",
        "doc": "When was the phone call received"
      }
    }
  },
  "phoneCallRequested": {
    "doc": "Requested phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "video": {
        "type": "flags.6?true",
        "doc": "Whether this is a video call"
      },
      "id": {
        "type": "long",
        "doc": "Phone call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "date": {
        "type": "int",
        "doc": "When was the phone call created"
      },
      "admin_id": {
        "type": "long",
        "doc": "ID of the creator of the phone call"
      },
      "participant_id": {
        "type": "long",
        "doc": "ID of the other participant of the phone call"
      },
      "g_a_hash": {
        "type": "bytes",
        "doc": "[Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Call protocol info to be passed to libtgvoip"
      }
    }
  },
  "phoneCallAccepted": {
    "doc": "An accepted phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "video": {
        "type": "flags.6?true",
        "doc": "Whether this is a video call"
      },
      "id": {
        "type": "long",
        "doc": "ID of accepted phone call"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash of phone call"
      },
      "date": {
        "type": "int",
        "doc": "When was the call accepted"
      },
      "admin_id": {
        "type": "long",
        "doc": "ID of the call creator"
      },
      "participant_id": {
        "type": "long",
        "doc": "ID of the other user in the call"
      },
      "g_b": {
        "type": "bytes",
        "doc": "B parameter for [secure E2E phone call key exchange](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Protocol to use for phone call"
      }
    }
  },
  "phoneCall": {
    "doc": "Phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "p2p_allowed": {
        "type": "flags.5?true",
        "doc": "Whether P2P connection to the other peer is allowed"
      },
      "video": {
        "type": "flags.6?true",
        "doc": "Whether this is a video call"
      },
      "id": {
        "type": "long",
        "doc": "Call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "date": {
        "type": "int",
        "doc": "Date of creation of the call"
      },
      "admin_id": {
        "type": "long",
        "doc": "User ID of the creator of the call"
      },
      "participant_id": {
        "type": "long",
        "doc": "User ID of the other participant in the call"
      },
      "g_a_or_b": {
        "type": "bytes",
        "doc": "[Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "key_fingerprint": {
        "type": "long",
        "doc": "[Key fingerprint](https://core.telegram.org/api/end-to-end/voice-calls)"
      },
      "protocol": {
        "type": "PhoneCallProtocol",
        "doc": "Call protocol info to be passed to libtgvoip"
      },
      "connections": {
        "type": "Vector<PhoneConnection>",
        "doc": "List of endpoints the user can connect to to exchange call data"
      },
      "start_date": {
        "type": "int",
        "doc": "When was the call actually started"
      }
    }
  },
  "phoneCallDiscarded": {
    "doc": "Indicates a discarded phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "need_rating": {
        "type": "flags.2?true",
        "doc": "Whether the server required the user to [rate](https://core.telegram.org/method/phone.setCallRating) the call"
      },
      "need_debug": {
        "type": "flags.3?true",
        "doc": "Whether the server required the client to [send](https://core.telegram.org/method/phone.saveCallDebug) the libtgvoip call debug data"
      },
      "video": {
        "type": "flags.6?true",
        "doc": "Whether the call was a video call"
      },
      "id": {
        "type": "long",
        "doc": "Call ID"
      },
      "reason": {
        "type": "flags.0?PhoneCallDiscardReason",
        "doc": "Why was the phone call discarded"
      },
      "duration": {
        "type": "flags.1?int",
        "doc": "Duration of the phone call in seconds"
      }
    }
  },
  "phoneConnection": {
    "doc": "Identifies an endpoint that can be used to connect to the other user in a phone call",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "tcp": {
        "type": "flags.0?true",
        "doc": "Whether TCP should be used"
      },
      "id": {
        "type": "long",
        "doc": "Endpoint ID"
      },
      "ip": {
        "type": "string",
        "doc": "IP address of endpoint"
      },
      "ipv6": {
        "type": "string",
        "doc": "IPv6 address of endpoint"
      },
      "port": {
        "type": "int",
        "doc": "Port ID"
      },
      "peer_tag": {
        "type": "bytes",
        "doc": "Our peer tag"
      }
    }
  },
  "phoneConnectionWebrtc": {
    "doc": "WebRTC connection parameters",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "turn": {
        "type": "flags.0?true",
        "doc": "Whether this is a TURN endpoint"
      },
      "stun": {
        "type": "flags.1?true",
        "doc": "Whether this is a STUN endpoint"
      },
      "id": {
        "type": "long",
        "doc": "Endpoint ID"
      },
      "ip": {
        "type": "string",
        "doc": "IP address"
      },
      "ipv6": {
        "type": "string",
        "doc": "IPv6 address"
      },
      "port": {
        "type": "int",
        "doc": "Port"
      },
      "username": {
        "type": "string",
        "doc": "Username"
      },
      "password": {
        "type": "string",
        "doc": "Password"
      }
    }
  },
  "phoneCallProtocol": {
    "doc": "Protocol info for libtgvoip",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "udp_p2p": {
        "type": "flags.0?true",
        "doc": "Whether to allow P2P connection to the other participant"
      },
      "udp_reflector": {
        "type": "flags.1?true",
        "doc": "Whether to allow connection to the other participants through the reflector servers"
      },
      "min_layer": {
        "type": "int",
        "doc": "Minimum layer for remote libtgvoip"
      },
      "max_layer": {
        "type": "int",
        "doc": "Maximum layer for remote libtgvoip"
      },
      "library_versions": {
        "type": "Vector<string>",
        "doc": "When using [phone.requestCall](https://core.telegram.org/method/phone.requestCall) and [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall), specify all library versions supported by the client.  \nThe server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) and in the [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) update received by the caller."
      }
    }
  },
  "phone.phoneCall": {
    "doc": "A VoIP phone call",
    "parameters": {
      "phone_call": {
        "type": "PhoneCall",
        "doc": "The VoIP phone call"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "VoIP phone call participants"
      }
    }
  },
  "upload.cdnFileReuploadNeeded": {
    "doc": "The file was cleared from the temporary RAM cache of the [CDN](https://core.telegram.org/cdn) and has to be re-uploaded.",
    "parameters": {
      "request_token": {
        "type": "bytes",
        "doc": "Request token (see [CDN](https://core.telegram.org/cdn))"
      }
    }
  },
  "upload.cdnFile": {
    "doc": "Represent a chunk of a [CDN](https://core.telegram.org/cdn) file.",
    "parameters": {
      "bytes": {
        "type": "bytes",
        "doc": "The data"
      }
    }
  },
  "cdnPublicKey": {
    "doc": "Public key to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs.",
    "parameters": {
      "dc_id": {
        "type": "int",
        "doc": "[CDN DC](https://core.telegram.org/cdn) ID"
      },
      "public_key": {
        "type": "string",
        "doc": "RSA public key"
      }
    }
  },
  "cdnConfig": {
    "doc": "Configuration for [CDN](https://core.telegram.org/cdn) file downloads.",
    "parameters": {
      "public_keys": {
        "type": "Vector<CdnPublicKey>",
        "doc": "Vector of public keys to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs."
      }
    }
  },
  "langPackString": {
    "doc": "Translated localization string",
    "parameters": {
      "key": {
        "type": "string",
        "doc": "Language key"
      },
      "value": {
        "type": "string",
        "doc": "Value"
      }
    }
  },
  "langPackStringPluralized": {
    "doc": "A language pack string which has different forms based on the number of some object it mentions. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\\_plural\\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "key": {
        "type": "string",
        "doc": "Localization key"
      },
      "zero_value": {
        "type": "flags.0?string",
        "doc": "Value for zero objects"
      },
      "one_value": {
        "type": "flags.1?string",
        "doc": "Value for one object"
      },
      "two_value": {
        "type": "flags.2?string",
        "doc": "Value for two objects"
      },
      "few_value": {
        "type": "flags.3?string",
        "doc": "Value for a few objects"
      },
      "many_value": {
        "type": "flags.4?string",
        "doc": "Value for many objects"
      },
      "other_value": {
        "type": "string",
        "doc": "Default value"
      }
    }
  },
  "langPackStringDeleted": {
    "doc": "Deleted localization string",
    "parameters": {
      "key": {
        "type": "string",
        "doc": "Localization key"
      }
    }
  },
  "langPackDifference": {
    "doc": "Changes to the app's localization pack",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      },
      "from_version": {
        "type": "int",
        "doc": "Previous version number"
      },
      "version": {
        "type": "int",
        "doc": "New version number"
      },
      "strings": {
        "type": "Vector<LangPackString>",
        "doc": "Localized strings"
      }
    }
  },
  "langPackLanguage": {
    "doc": "Identifies a localization pack",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "official": {
        "type": "flags.0?true",
        "doc": "Whether the language pack is official"
      },
      "rtl": {
        "type": "flags.2?true",
        "doc": "Is this a localization pack for an RTL language"
      },
      "beta": {
        "type": "flags.3?true",
        "doc": "Is this a beta localization pack?"
      },
      "name": {
        "type": "string",
        "doc": "Language name"
      },
      "native_name": {
        "type": "string",
        "doc": "Language name in the language itself"
      },
      "lang_code": {
        "type": "string",
        "doc": "Language code (pack identifier)"
      },
      "base_lang_code": {
        "type": "flags.1?string",
        "doc": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs"
      },
      "plural_code": {
        "type": "string",
        "doc": "A language code to be used to apply plural forms. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\\_plural\\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info"
      },
      "strings_count": {
        "type": "int",
        "doc": "Total number of non-deleted strings from the language pack"
      },
      "translated_count": {
        "type": "int",
        "doc": "Total number of translated strings from the language pack"
      },
      "translations_url": {
        "type": "string",
        "doc": "Link to language translation interface; empty for custom local language packs"
      }
    }
  },
  "channelAdminLogEventActionChangeTitle": {
    "doc": "Channel/supergroup title was changed",
    "parameters": {
      "prev_value": {
        "type": "string",
        "doc": "Previous title"
      },
      "new_value": {
        "type": "string",
        "doc": "New title"
      }
    }
  },
  "channelAdminLogEventActionChangeAbout": {
    "doc": "The description was changed",
    "parameters": {
      "prev_value": {
        "type": "string",
        "doc": "Previous description"
      },
      "new_value": {
        "type": "string",
        "doc": "New description"
      }
    }
  },
  "channelAdminLogEventActionChangeUsername": {
    "doc": "Channel/supergroup username was changed",
    "parameters": {
      "prev_value": {
        "type": "string",
        "doc": "Old username"
      },
      "new_value": {
        "type": "string",
        "doc": "New username"
      }
    }
  },
  "channelAdminLogEventActionChangePhoto": {
    "doc": "The channel/supergroup's picture was changed",
    "parameters": {
      "prev_photo": {
        "type": "Photo",
        "doc": "Previous picture"
      },
      "new_photo": {
        "type": "Photo",
        "doc": "New picture"
      }
    }
  },
  "channelAdminLogEventActionToggleInvites": {
    "doc": "Invites were enabled/disabled",
    "parameters": {
      "new_value": {
        "type": "Bool",
        "doc": "New value"
      }
    }
  },
  "channelAdminLogEventActionToggleSignatures": {
    "doc": "Channel signatures were enabled/disabled",
    "parameters": {
      "new_value": {
        "type": "Bool",
        "doc": "New value"
      }
    }
  },
  "channelAdminLogEventActionUpdatePinned": {
    "doc": "A message was pinned",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The message that was pinned"
      }
    }
  },
  "channelAdminLogEventActionEditMessage": {
    "doc": "A message was edited",
    "parameters": {
      "prev_message": {
        "type": "Message",
        "doc": "Old message"
      },
      "new_message": {
        "type": "Message",
        "doc": "New message"
      }
    }
  },
  "channelAdminLogEventActionDeleteMessage": {
    "doc": "A message was deleted",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The message that was deleted"
      }
    }
  },
  "channelAdminLogEventActionParticipantJoin": {
    "doc": "A user has joined the group (in the case of big groups, info of the user that has joined isn't shown)",
    "parameters": {}
  },
  "channelAdminLogEventActionParticipantLeave": {
    "doc": "A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown)",
    "parameters": {}
  },
  "channelAdminLogEventActionParticipantInvite": {
    "doc": "A user was invited to the group",
    "parameters": {
      "participant": {
        "type": "ChannelParticipant",
        "doc": "The user that was invited"
      }
    }
  },
  "channelAdminLogEventActionParticipantToggleBan": {
    "doc": "The banned [rights](https://core.telegram.org/api/rights) of a user were changed",
    "parameters": {
      "prev_participant": {
        "type": "ChannelParticipant",
        "doc": "Old banned rights of user"
      },
      "new_participant": {
        "type": "ChannelParticipant",
        "doc": "New banned rights of user"
      }
    }
  },
  "channelAdminLogEventActionParticipantToggleAdmin": {
    "doc": "The admin [rights](https://core.telegram.org/api/rights) of a user were changed",
    "parameters": {
      "prev_participant": {
        "type": "ChannelParticipant",
        "doc": "Previous admin rights"
      },
      "new_participant": {
        "type": "ChannelParticipant",
        "doc": "New admin rights"
      }
    }
  },
  "channelAdminLogEventActionChangeStickerSet": {
    "doc": "The supergroup's stickerset was changed",
    "parameters": {
      "prev_stickerset": {
        "type": "InputStickerSet",
        "doc": "Previous stickerset"
      },
      "new_stickerset": {
        "type": "InputStickerSet",
        "doc": "New stickerset"
      }
    }
  },
  "channelAdminLogEventActionTogglePreHistoryHidden": {
    "doc": "The hidden prehistory setting was [changed](https://core.telegram.org/method/channels.togglePreHistoryHidden)",
    "parameters": {
      "new_value": {
        "type": "Bool",
        "doc": "New value"
      }
    }
  },
  "channelAdminLogEventActionDefaultBannedRights": {
    "doc": "The default banned rights were modified",
    "parameters": {
      "prev_banned_rights": {
        "type": "ChatBannedRights",
        "doc": "Previous global [banned rights](https://core.telegram.org/api/rights)"
      },
      "new_banned_rights": {
        "type": "ChatBannedRights",
        "doc": "New global [banned rights](https://core.telegram.org/api/rights)."
      }
    }
  },
  "channelAdminLogEventActionStopPoll": {
    "doc": "A poll was stopped",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The poll that was stopped"
      }
    }
  },
  "channelAdminLogEventActionChangeLinkedChat": {
    "doc": "The linked chat was changed",
    "parameters": {
      "prev_value": {
        "type": "long",
        "doc": "Previous linked chat"
      },
      "new_value": {
        "type": "long",
        "doc": "New linked chat"
      }
    }
  },
  "channelAdminLogEventActionChangeLocation": {
    "doc": "The geogroup location was changed",
    "parameters": {
      "prev_value": {
        "type": "ChannelLocation",
        "doc": "Previous location"
      },
      "new_value": {
        "type": "ChannelLocation",
        "doc": "New location"
      }
    }
  },
  "channelAdminLogEventActionToggleSlowMode": {
    "doc": "[Slow mode setting for supergroups was changed](https://core.telegram.org/method/channels.toggleSlowMode)",
    "parameters": {
      "prev_value": {
        "type": "int",
        "doc": "Previous slow mode value"
      },
      "new_value": {
        "type": "int",
        "doc": "New slow mode value"
      }
    }
  },
  "channelAdminLogEventActionStartGroupCall": {
    "doc": "A group call was started",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "Group call"
      }
    }
  },
  "channelAdminLogEventActionDiscardGroupCall": {
    "doc": "A group call was terminated",
    "parameters": {
      "call": {
        "type": "InputGroupCall",
        "doc": "The group call that was terminated"
      }
    }
  },
  "channelAdminLogEventActionParticipantMute": {
    "doc": "A group call participant was muted",
    "parameters": {
      "participant": {
        "type": "GroupCallParticipant",
        "doc": "The participant that was muted"
      }
    }
  },
  "channelAdminLogEventActionParticipantUnmute": {
    "doc": "A group call participant was unmuted",
    "parameters": {
      "participant": {
        "type": "GroupCallParticipant",
        "doc": "The participant that was unmuted"
      }
    }
  },
  "channelAdminLogEventActionToggleGroupCallSetting": {
    "doc": "Group call settings were changed",
    "parameters": {
      "join_muted": {
        "type": "Bool",
        "doc": "Whether all users are muted by default upon joining"
      }
    }
  },
  "channelAdminLogEventActionParticipantJoinByInvite": {
    "doc": "A user joined the [supergroup/channel](https://core.telegram.org/api/channel) using a specific invite link",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "via_chatlist": {
        "type": "flags.0?true",
        "doc": "The participant joined by importing a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "The invite link used to join the [supergroup/channel](https://core.telegram.org/api/channel)"
      }
    }
  },
  "channelAdminLogEventActionExportedInviteDelete": {
    "doc": "A chat invite was deleted",
    "parameters": {
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "The deleted chat invite"
      }
    }
  },
  "channelAdminLogEventActionExportedInviteRevoke": {
    "doc": "A specific invite link was revoked",
    "parameters": {
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "The invite link that was revoked"
      }
    }
  },
  "channelAdminLogEventActionExportedInviteEdit": {
    "doc": "A chat invite was edited",
    "parameters": {
      "prev_invite": {
        "type": "ExportedChatInvite",
        "doc": "Previous chat invite information"
      },
      "new_invite": {
        "type": "ExportedChatInvite",
        "doc": "New chat invite information"
      }
    }
  },
  "channelAdminLogEventActionParticipantVolume": {
    "doc": "channelAdminLogEvent.user\\_id has set the volume of participant.peer to participant.volume",
    "parameters": {
      "participant": {
        "type": "GroupCallParticipant",
        "doc": "The participant whose volume was changed"
      }
    }
  },
  "channelAdminLogEventActionChangeHistoryTTL": {
    "doc": "The Time-To-Live of messages in this chat was changed",
    "parameters": {
      "prev_value": {
        "type": "int",
        "doc": "Previous value"
      },
      "new_value": {
        "type": "int",
        "doc": "New value"
      }
    }
  },
  "channelAdminLogEventActionParticipantJoinByRequest": {
    "doc": "A new member was accepted to the chat by an admin",
    "parameters": {
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "The invite link that was used to join the chat"
      },
      "approved_by": {
        "type": "long",
        "doc": "ID of the admin that approved the invite"
      }
    }
  },
  "channelAdminLogEventActionToggleNoForwards": {
    "doc": "Forwards were enabled or disabled",
    "parameters": {
      "new_value": {
        "type": "Bool",
        "doc": "Old value"
      }
    }
  },
  "channelAdminLogEventActionSendMessage": {
    "doc": "A message was posted in a channel",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The message that was sent"
      }
    }
  },
  "channelAdminLogEventActionChangeAvailableReactions": {
    "doc": "The set of allowed [message reactions »](https://core.telegram.org/api/reactions) for this channel has changed",
    "parameters": {
      "prev_value": {
        "type": "ChatReactions",
        "doc": "Previously allowed reaction emojis"
      },
      "new_value": {
        "type": "ChatReactions",
        "doc": "New allowed reaction emojis"
      }
    }
  },
  "channelAdminLogEventActionChangeUsernames": {
    "doc": "The list of usernames associated with the channel was changed",
    "parameters": {
      "prev_value": {
        "type": "Vector<string>",
        "doc": "Previous set of usernames"
      },
      "new_value": {
        "type": "Vector<string>",
        "doc": "New set of usernames"
      }
    }
  },
  "channelAdminLogEventActionToggleForum": {
    "doc": "[Forum](https://core.telegram.org/api/forum) functionality was enabled or disabled.",
    "parameters": {
      "new_value": {
        "type": "Bool",
        "doc": "Whether [forum](https://core.telegram.org/api/forum) functionality was enabled or disabled."
      }
    }
  },
  "channelAdminLogEventActionCreateTopic": {
    "doc": "A [forum topic](https://core.telegram.org/api/forum#forum-topics) was created",
    "parameters": {
      "topic": {
        "type": "ForumTopic",
        "doc": "The [forum topic](https://core.telegram.org/api/forum#forum-topics) that was created"
      }
    }
  },
  "channelAdminLogEventActionEditTopic": {
    "doc": "A [forum topic](https://core.telegram.org/api/forum#forum-topics) was edited",
    "parameters": {
      "prev_topic": {
        "type": "ForumTopic",
        "doc": "Previous topic information"
      },
      "new_topic": {
        "type": "ForumTopic",
        "doc": "New topic information"
      }
    }
  },
  "channelAdminLogEventActionDeleteTopic": {
    "doc": "A [forum topic](https://core.telegram.org/api/forum#forum-topics) was deleted",
    "parameters": {
      "topic": {
        "type": "ForumTopic",
        "doc": "The [forum topic](https://core.telegram.org/api/forum#forum-topics) that was deleted"
      }
    }
  },
  "channelAdminLogEventActionPinTopic": {
    "doc": "A [forum topic](https://core.telegram.org/api/forum#forum-topics) was pinned or unpinned",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "prev_topic": {
        "type": "flags.0?ForumTopic",
        "doc": "Previous topic information"
      },
      "new_topic": {
        "type": "flags.1?ForumTopic",
        "doc": "New topic information"
      }
    }
  },
  "channelAdminLogEventActionToggleAntiSpam": {
    "doc": "[Native antispam](https://core.telegram.org/api/antispam) functionality was enabled or disabled.",
    "parameters": {
      "new_value": {
        "type": "Bool",
        "doc": "Whether antispam functionality was enabled or disabled."
      }
    }
  },
  "channelAdminLogEventActionChangePeerColor": {
    "doc": "The [message accent color](https://core.telegram.org/api/colors) was changed",
    "parameters": {
      "prev_value": {
        "type": "PeerColor",
        "doc": "Previous accent palette"
      },
      "new_value": {
        "type": "PeerColor",
        "doc": "New accent palette"
      }
    }
  },
  "channelAdminLogEventActionChangeProfilePeerColor": {
    "doc": "The [profile accent color](https://core.telegram.org/api/colors) was changed",
    "parameters": {
      "prev_value": {
        "type": "PeerColor",
        "doc": "Previous accent palette"
      },
      "new_value": {
        "type": "PeerColor",
        "doc": "New accent palette"
      }
    }
  },
  "channelAdminLogEventActionChangeWallpaper": {
    "doc": "The [wallpaper](https://core.telegram.org/api/wallpapers) was changed",
    "parameters": {
      "prev_value": {
        "type": "WallPaper",
        "doc": "Previous wallpaper"
      },
      "new_value": {
        "type": "WallPaper",
        "doc": "New wallpaper"
      }
    }
  },
  "channelAdminLogEventActionChangeEmojiStatus": {
    "doc": "The [emoji status](https://core.telegram.org/api/emoji-status) was changed",
    "parameters": {
      "prev_value": {
        "type": "EmojiStatus",
        "doc": "Previous emoji status"
      },
      "new_value": {
        "type": "EmojiStatus",
        "doc": "New emoji status"
      }
    }
  },
  "channelAdminLogEvent": {
    "doc": "Admin log event",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Event ID"
      },
      "date": {
        "type": "int",
        "doc": "Date"
      },
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "action": {
        "type": "ChannelAdminLogEventAction",
        "doc": "Action"
      }
    }
  },
  "channels.adminLogResults": {
    "doc": "Admin log events",
    "parameters": {
      "events": {
        "type": "Vector<ChannelAdminLogEvent>",
        "doc": "Admin log events"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in events"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in events"
      }
    }
  },
  "channelAdminLogEventsFilter": {
    "doc": "Filter only certain admin log events",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "join": {
        "type": "flags.0?true",
        "doc": "[Join events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin), including [joins using invite links](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByInvite) and [join requests](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByRequest)."
      },
      "leave": {
        "type": "flags.1?true",
        "doc": "[Leave events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave)"
      },
      "invite": {
        "type": "flags.2?true",
        "doc": "[Invite events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite)"
      },
      "ban": {
        "type": "flags.3?true",
        "doc": "[Ban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)"
      },
      "unban": {
        "type": "flags.4?true",
        "doc": "[Unban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)"
      },
      "kick": {
        "type": "flags.5?true",
        "doc": "[Kick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)"
      },
      "unkick": {
        "type": "flags.6?true",
        "doc": "[Unkick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)"
      },
      "promote": {
        "type": "flags.7?true",
        "doc": "[Admin promotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin)"
      },
      "demote": {
        "type": "flags.8?true",
        "doc": "[Admin demotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin)"
      },
      "info": {
        "type": "flags.9?true",
        "doc": "Info change events (when [about](https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout), [linked chat](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat), [location](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation), [photo](https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto), [stickerset](https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet), [title](https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle) or [username](https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername), [slowmode](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSlowMode), [history TTL](https://core.telegram.org/constructor/channelAdminLogEventActionChangeHistoryTTL) settings of a channel gets modified)"
      },
      "settings": {
        "type": "flags.10?true",
        "doc": "Settings change events ([invites](https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites), [hidden prehistory](https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden), [signatures](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures), [default banned rights](https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights), [forum toggle events](https://core.telegram.org/constructor/channelAdminLogEventActionToggleForum))"
      },
      "pinned": {
        "type": "flags.11?true",
        "doc": "[Message pin events](https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned)"
      },
      "edit": {
        "type": "flags.12?true",
        "doc": "[Message edit events](https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage)"
      },
      "delete": {
        "type": "flags.13?true",
        "doc": "[Message deletion events](https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage)"
      },
      "group_call": {
        "type": "flags.14?true",
        "doc": "Group call events"
      },
      "invites": {
        "type": "flags.15?true",
        "doc": "Invite events"
      },
      "send": {
        "type": "flags.16?true",
        "doc": "A message was posted in a channel"
      },
      "forums": {
        "type": "flags.17?true",
        "doc": "[Forum](https://core.telegram.org/api/forum)\\-related events"
      }
    }
  },
  "popularContact": {
    "doc": "Popular contact",
    "parameters": {
      "client_id": {
        "type": "long",
        "doc": "Contact identifier"
      },
      "importers": {
        "type": "int",
        "doc": "How many people imported this contact"
      }
    }
  },
  "messages.favedStickersNotModified": {
    "doc": "No new favorited stickers were found",
    "parameters": {}
  },
  "messages.favedStickers": {
    "doc": "Favorited stickers",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "packs": {
        "type": "Vector<StickerPack>",
        "doc": "Emojis associated to stickers"
      },
      "stickers": {
        "type": "Vector<Document>",
        "doc": "Favorited stickers"
      }
    }
  },
  "recentMeUrlUnknown": {
    "doc": "Unknown t.me url",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "URL"
      }
    }
  },
  "recentMeUrlUser": {
    "doc": "Recent t.me link to a user",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "URL"
      },
      "user_id": {
        "type": "long",
        "doc": "User ID"
      }
    }
  },
  "recentMeUrlChat": {
    "doc": "Recent t.me link to a chat",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "t.me URL"
      },
      "chat_id": {
        "type": "long",
        "doc": "Chat ID"
      }
    }
  },
  "recentMeUrlChatInvite": {
    "doc": "Recent t.me invite link to a chat",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "t.me URL"
      },
      "chat_invite": {
        "type": "ChatInvite",
        "doc": "Chat invitation"
      }
    }
  },
  "recentMeUrlStickerSet": {
    "doc": "Recent t.me stickerset installation URL",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "t.me URL"
      },
      "set": {
        "type": "StickerSetCovered",
        "doc": "Stickerset"
      }
    }
  },
  "help.recentMeUrls": {
    "doc": "Recent t.me URLs",
    "parameters": {
      "urls": {
        "type": "Vector<RecentMeUrl>",
        "doc": "URLs"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "inputSingleMedia": {
    "doc": "A single media in an [album or grouped media](https://core.telegram.org/api/files#albums-grouped-media) sent with [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "media": {
        "type": "InputMedia",
        "doc": "The media"
      },
      "random_id": {
        "type": "long",
        "doc": "Unique client media ID required to prevent message resending"
      },
      "message": {
        "type": "string",
        "doc": "A caption for the media"
      },
      "entities": {
        "type": "flags.0?Vector<MessageEntity>",
        "doc": "Message [entities](https://core.telegram.org/api/entities) for styled text"
      }
    }
  },
  "webAuthorization": {
    "doc": "Represents a bot logged in using the [Telegram login widget](https://core.telegram.org/widgets/login)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "Authorization hash"
      },
      "bot_id": {
        "type": "long",
        "doc": "Bot ID"
      },
      "domain": {
        "type": "string",
        "doc": "The domain name of the website on which the user has logged in."
      },
      "browser": {
        "type": "string",
        "doc": "Browser user-agent"
      },
      "platform": {
        "type": "string",
        "doc": "Platform"
      },
      "date_created": {
        "type": "int",
        "doc": "When was the web session created"
      },
      "date_active": {
        "type": "int",
        "doc": "When was the web session last active"
      },
      "ip": {
        "type": "string",
        "doc": "IP address"
      },
      "region": {
        "type": "string",
        "doc": "Region, determined from IP address"
      }
    }
  },
  "account.webAuthorizations": {
    "doc": "Web authorizations",
    "parameters": {
      "authorizations": {
        "type": "Vector<WebAuthorization>",
        "doc": "Web authorization list"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users"
      }
    }
  },
  "inputMessageID": {
    "doc": "Message by ID",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Message ID"
      }
    }
  },
  "inputMessageReplyTo": {
    "doc": "Message to which the specified message replies to",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "ID of the message that replies to the message we need"
      }
    }
  },
  "inputMessagePinned": {
    "doc": "Pinned message",
    "parameters": {}
  },
  "inputMessageCallbackQuery": {
    "doc": "Used by bots for fetching information about the message that originated a callback query",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Message ID"
      },
      "query_id": {
        "type": "long",
        "doc": "Callback query ID"
      }
    }
  },
  "inputDialogPeer": {
    "doc": "A peer",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      }
    }
  },
  "inputDialogPeerFolder": {
    "doc": "All peers in a [peer folder](https://core.telegram.org/api/folders#peer-folders)",
    "parameters": {
      "folder_id": {
        "type": "int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      }
    }
  },
  "dialogPeer": {
    "doc": "Peer",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      }
    }
  },
  "dialogPeerFolder": {
    "doc": "[Peer folder](https://core.telegram.org/api/folders#peer-folders)",
    "parameters": {
      "folder_id": {
        "type": "int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      }
    }
  },
  "messages.foundStickerSetsNotModified": {
    "doc": "No further results were found",
    "parameters": {}
  },
  "messages.foundStickerSets": {
    "doc": "Found stickersets",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "sets": {
        "type": "Vector<StickerSetCovered>",
        "doc": "Found stickersets"
      }
    }
  },
  "fileHash": {
    "doc": "SHA256 Hash of an uploaded file, to be checked for validity after download",
    "parameters": {
      "offset": {
        "type": "long",
        "doc": "Offset from where to start computing SHA-256 hash"
      },
      "limit": {
        "type": "int",
        "doc": "Length"
      },
      "hash": {
        "type": "bytes",
        "doc": "SHA-256 Hash of file chunk, to be checked for validity after download"
      }
    }
  },
  "inputClientProxy": {
    "doc": "Info about an [MTProxy](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) used to connect.",
    "parameters": {
      "address": {
        "type": "string",
        "doc": "Proxy address"
      },
      "port": {
        "type": "int",
        "doc": "Proxy port"
      }
    }
  },
  "help.termsOfServiceUpdateEmpty": {
    "doc": "No changes were made to telegram's terms of service",
    "parameters": {
      "expires": {
        "type": "int",
        "doc": "New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) in `expires` seconds"
      }
    }
  },
  "help.termsOfServiceUpdate": {
    "doc": "Info about an update of telegram's terms of service. If the terms of service are declined, then the [account.deleteAccount](https://core.telegram.org/method/account.deleteAccount) method should be called with the reason \"Decline ToS update\"",
    "parameters": {
      "expires": {
        "type": "int",
        "doc": "New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) in `expires` seconds"
      },
      "terms_of_service": {
        "type": "help.TermsOfService",
        "doc": "New terms of service"
      }
    }
  },
  "inputSecureFileUploaded": {
    "doc": "Uploaded secure file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Secure file ID"
      },
      "parts": {
        "type": "int",
        "doc": "Secure file part count"
      },
      "md5_checksum": {
        "type": "string",
        "doc": "MD5 hash of encrypted uploaded file, to be checked server-side"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "secret": {
        "type": "bytes",
        "doc": "Secret"
      }
    }
  },
  "inputSecureFile": {
    "doc": "Pre-uploaded [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Secure file ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Secure file access hash"
      }
    }
  },
  "secureFileEmpty": {
    "doc": "Empty constructor",
    "parameters": {}
  },
  "secureFile": {
    "doc": "Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile)",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      },
      "size": {
        "type": "long",
        "doc": "File size"
      },
      "dc_id": {
        "type": "int",
        "doc": "DC ID"
      },
      "date": {
        "type": "int",
        "doc": "Date of upload"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "secret": {
        "type": "bytes",
        "doc": "Secret"
      }
    }
  },
  "secureData": {
    "doc": "Secure [passport](https://core.telegram.org/passport) data, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#securedata)",
    "parameters": {
      "data": {
        "type": "bytes",
        "doc": "Data"
      },
      "data_hash": {
        "type": "bytes",
        "doc": "Data hash"
      },
      "secret": {
        "type": "bytes",
        "doc": "Secret"
      }
    }
  },
  "securePlainPhone": {
    "doc": "Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata).",
    "parameters": {
      "phone": {
        "type": "string",
        "doc": "Phone number"
      }
    }
  },
  "securePlainEmail": {
    "doc": "Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata).",
    "parameters": {
      "email": {
        "type": "string",
        "doc": "Email address"
      }
    }
  },
  "secureValueTypePersonalDetails": {
    "doc": "Personal details",
    "parameters": {}
  },
  "secureValueTypePassport": {
    "doc": "Passport",
    "parameters": {}
  },
  "secureValueTypeDriverLicense": {
    "doc": "Driver's license",
    "parameters": {}
  },
  "secureValueTypeIdentityCard": {
    "doc": "Identity card",
    "parameters": {}
  },
  "secureValueTypeInternalPassport": {
    "doc": "Internal [passport](https://core.telegram.org/passport)",
    "parameters": {}
  },
  "secureValueTypeAddress": {
    "doc": "Address",
    "parameters": {}
  },
  "secureValueTypeUtilityBill": {
    "doc": "Utility bill",
    "parameters": {}
  },
  "secureValueTypeBankStatement": {
    "doc": "Bank statement",
    "parameters": {}
  },
  "secureValueTypeRentalAgreement": {
    "doc": "Rental agreement",
    "parameters": {}
  },
  "secureValueTypePassportRegistration": {
    "doc": "Internal registration [passport](https://core.telegram.org/passport)",
    "parameters": {}
  },
  "secureValueTypeTemporaryRegistration": {
    "doc": "Temporary registration",
    "parameters": {}
  },
  "secureValueTypePhone": {
    "doc": "Phone",
    "parameters": {}
  },
  "secureValueTypeEmail": {
    "doc": "Email",
    "parameters": {}
  },
  "secureValue": {
    "doc": "Secure value",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "type": {
        "type": "SecureValueType",
        "doc": "Secure [passport](https://core.telegram.org/passport) value type"
      },
      "data": {
        "type": "flags.0?SecureData",
        "doc": "Encrypted [Telegram Passport](https://core.telegram.org/passport) element data"
      },
      "front_side": {
        "type": "flags.1?SecureFile",
        "doc": "Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document"
      },
      "reverse_side": {
        "type": "flags.2?SecureFile",
        "doc": "Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document"
      },
      "selfie": {
        "type": "flags.3?SecureFile",
        "doc": "Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document"
      },
      "translation": {
        "type": "flags.6?Vector<SecureFile>",
        "doc": "Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents"
      },
      "files": {
        "type": "flags.4?Vector<SecureFile>",
        "doc": "Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents"
      },
      "plain_data": {
        "type": "flags.5?SecurePlainData",
        "doc": "Plaintext verified [passport](https://core.telegram.org/passport) data"
      },
      "hash": {
        "type": "bytes",
        "doc": "Data hash"
      }
    }
  },
  "inputSecureValue": {
    "doc": "Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "type": {
        "type": "SecureValueType",
        "doc": "Secure [passport](https://core.telegram.org/passport) value type"
      },
      "data": {
        "type": "flags.0?SecureData",
        "doc": "Encrypted [Telegram Passport](https://core.telegram.org/passport) element data"
      },
      "front_side": {
        "type": "flags.1?InputSecureFile",
        "doc": "Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document"
      },
      "reverse_side": {
        "type": "flags.2?InputSecureFile",
        "doc": "Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document"
      },
      "selfie": {
        "type": "flags.3?InputSecureFile",
        "doc": "Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document"
      },
      "translation": {
        "type": "flags.6?Vector<InputSecureFile>",
        "doc": "Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents"
      },
      "files": {
        "type": "flags.4?Vector<InputSecureFile>",
        "doc": "Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents"
      },
      "plain_data": {
        "type": "flags.5?SecurePlainData",
        "doc": "Plaintext verified [passport](https://core.telegram.org/passport) data"
      }
    }
  },
  "secureValueHash": {
    "doc": "Secure value hash",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "Secure value type"
      },
      "hash": {
        "type": "bytes",
        "doc": "Hash"
      }
    }
  },
  "secureValueErrorData": {
    "doc": "Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "The section of the user's Telegram Passport which has the error, one of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeAddress](https://core.telegram.org/constructor/secureValueTypeAddress)"
      },
      "data_hash": {
        "type": "bytes",
        "doc": "Data hash"
      },
      "field": {
        "type": "string",
        "doc": "Name of the data field which has the error"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorFrontSide": {
    "doc": "Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport)"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorReverseSide": {
    "doc": "Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard)"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorSelfie": {
    "doc": "Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport)"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorFile": {
    "doc": "Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration)"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorFiles": {
    "doc": "Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration)"
      },
      "file_hash": {
        "type": "Vector<bytes>",
        "doc": "File hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueError": {
    "doc": "Secure value error",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "Type of element which has the issue"
      },
      "hash": {
        "type": "bytes",
        "doc": "Hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorTranslationFile": {
    "doc": "Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration)"
      },
      "file_hash": {
        "type": "bytes",
        "doc": "File hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureValueErrorTranslationFiles": {
    "doc": "Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes.",
    "parameters": {
      "type": {
        "type": "SecureValueType",
        "doc": "One of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration)"
      },
      "file_hash": {
        "type": "Vector<bytes>",
        "doc": "Hash"
      },
      "text": {
        "type": "string",
        "doc": "Error message"
      }
    }
  },
  "secureCredentialsEncrypted": {
    "doc": "Encrypted credentials required to decrypt [telegram passport](https://core.telegram.org/passport) data.",
    "parameters": {
      "data": {
        "type": "bytes",
        "doc": "Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)"
      },
      "hash": {
        "type": "bytes",
        "doc": "Data hash for data authentication as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)"
      },
      "secret": {
        "type": "bytes",
        "doc": "Secret, encrypted with the bot's public RSA key, required for data decryption as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data)"
      }
    }
  },
  "account.authorizationForm": {
    "doc": "[Telegram Passport](https://core.telegram.org/passport) authorization form",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "required_types": {
        "type": "Vector<SecureRequiredType>",
        "doc": "Required [Telegram Passport](https://core.telegram.org/passport) documents"
      },
      "values": {
        "type": "Vector<SecureValue>",
        "doc": "Already submitted [Telegram Passport](https://core.telegram.org/passport) documents"
      },
      "errors": {
        "type": "Vector<SecureValueError>",
        "doc": "[Telegram Passport](https://core.telegram.org/passport) errors"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Info about the bot to which the form will be submitted"
      },
      "privacy_policy_url": {
        "type": "flags.0?string",
        "doc": "URL of the service's privacy policy"
      }
    }
  },
  "account.sentEmailCode": {
    "doc": "The sent email code",
    "parameters": {
      "email_pattern": {
        "type": "string",
        "doc": "The email (to which the code was sent) must match this [pattern](https://core.telegram.org/api/pattern)"
      },
      "length": {
        "type": "int",
        "doc": "The length of the verification code"
      }
    }
  },
  "help.deepLinkInfoEmpty": {
    "doc": "Deep link info empty",
    "parameters": {}
  },
  "help.deepLinkInfo": {
    "doc": "Deep link info, see [the here for more details](https://core.telegram.org/api/links#unsupported-links)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "update_app": {
        "type": "flags.0?true",
        "doc": "An update of the app is required to parse this link"
      },
      "message": {
        "type": "string",
        "doc": "Message to show to the user"
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "savedPhoneContact": {
    "doc": "Saved contact",
    "parameters": {
      "phone": {
        "type": "string",
        "doc": "Phone number"
      },
      "first_name": {
        "type": "string",
        "doc": "First name"
      },
      "last_name": {
        "type": "string",
        "doc": "Last name"
      },
      "date": {
        "type": "int",
        "doc": "Date added"
      }
    }
  },
  "account.takeout": {
    "doc": "Takeout info",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Takeout ID"
      }
    }
  },
  "passwordKdfAlgoUnknown": {
    "doc": "Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)",
    "parameters": {}
  },
  "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow": {
    "doc": "This key derivation algorithm defines that [SRP 2FA login](https://core.telegram.org/api/srp) must be used",
    "parameters": {
      "salt1": {
        "type": "bytes",
        "doc": "One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp))"
      },
      "salt2": {
        "type": "bytes",
        "doc": "One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp))"
      },
      "g": {
        "type": "int",
        "doc": "Base (see [SRP 2FA login](https://core.telegram.org/api/srp))"
      },
      "p": {
        "type": "bytes",
        "doc": "2048-bit modulus (see [SRP 2FA login](https://core.telegram.org/api/srp))"
      }
    }
  },
  "securePasswordKdfAlgoUnknown": {
    "doc": "Unknown KDF algo (most likely the client has to be updated)",
    "parameters": {}
  },
  "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000": {
    "doc": "PBKDF2 with SHA512 and 100000 iterations KDF algo",
    "parameters": {
      "salt": {
        "type": "bytes",
        "doc": "Salt"
      }
    }
  },
  "securePasswordKdfAlgoSHA512": {
    "doc": "SHA512 KDF algo",
    "parameters": {
      "salt": {
        "type": "bytes",
        "doc": "Salt"
      }
    }
  },
  "secureSecretSettings": {
    "doc": "Secure settings",
    "parameters": {
      "secure_algo": {
        "type": "SecurePasswordKdfAlgo",
        "doc": "Secure KDF algo"
      },
      "secure_secret": {
        "type": "bytes",
        "doc": "Secure secret"
      },
      "secure_secret_id": {
        "type": "long",
        "doc": "Secret ID"
      }
    }
  },
  "inputCheckPasswordEmpty": {
    "doc": "There is no password",
    "parameters": {}
  },
  "inputCheckPasswordSRP": {
    "doc": "Constructor for checking the validity of a 2FA SRP password (see [SRP](https://core.telegram.org/api/srp))",
    "parameters": {
      "srp_id": {
        "type": "long",
        "doc": "[SRP ID](https://core.telegram.org/api/srp)"
      },
      "A": {
        "type": "bytes",
        "doc": "`A` parameter (see [SRP](https://core.telegram.org/api/srp))"
      },
      "M1": {
        "type": "bytes",
        "doc": "`M1` parameter (see [SRP](https://core.telegram.org/api/srp))"
      }
    }
  },
  "secureRequiredType": {
    "doc": "Required type",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "native_names": {
        "type": "flags.0?true",
        "doc": "Native names"
      },
      "selfie_required": {
        "type": "flags.1?true",
        "doc": "Is a selfie required"
      },
      "translation_required": {
        "type": "flags.2?true",
        "doc": "Is a translation required"
      },
      "type": {
        "type": "SecureValueType",
        "doc": "Secure value type"
      }
    }
  },
  "secureRequiredTypeOneOf": {
    "doc": "One of",
    "parameters": {
      "types": {
        "type": "Vector<SecureRequiredType>",
        "doc": "Secure required value types"
      }
    }
  },
  "help.passportConfigNotModified": {
    "doc": "Password configuration not modified",
    "parameters": {}
  },
  "help.passportConfig": {
    "doc": "Telegram [passport](https://core.telegram.org/passport) configuration",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "countries_langs": {
        "type": "DataJSON",
        "doc": "Localization"
      }
    }
  },
  "inputAppEvent": {
    "doc": "Event that occurred in the application.",
    "parameters": {
      "time": {
        "type": "double",
        "doc": "Client's exact timestamp for the event"
      },
      "type": {
        "type": "string",
        "doc": "Type of event"
      },
      "peer": {
        "type": "long",
        "doc": "Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object"
      },
      "data": {
        "type": "JSONValue",
        "doc": "Details of the event"
      }
    }
  },
  "jsonObjectValue": {
    "doc": "JSON key: value pair",
    "parameters": {
      "key": {
        "type": "string",
        "doc": "Key"
      },
      "value": {
        "type": "JSONValue",
        "doc": "Value"
      }
    }
  },
  "jsonNull": {
    "doc": "null JSON value",
    "parameters": {}
  },
  "jsonBool": {
    "doc": "JSON boolean value",
    "parameters": {
      "value": {
        "type": "Bool",
        "doc": "Value"
      }
    }
  },
  "jsonNumber": {
    "doc": "JSON numeric value",
    "parameters": {
      "value": {
        "type": "double",
        "doc": "Value"
      }
    }
  },
  "jsonString": {
    "doc": "JSON string",
    "parameters": {
      "value": {
        "type": "string",
        "doc": "Value"
      }
    }
  },
  "jsonArray": {
    "doc": "JSON array",
    "parameters": {
      "value": {
        "type": "Vector<JSONValue>",
        "doc": "JSON values"
      }
    }
  },
  "jsonObject": {
    "doc": "JSON object value",
    "parameters": {
      "value": {
        "type": "Vector<JSONObjectValue>",
        "doc": "Values"
      }
    }
  },
  "pageTableCell": {
    "doc": "Table cell",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "header": {
        "type": "flags.0?true",
        "doc": "Is this element part of the column header"
      },
      "align_center": {
        "type": "flags.3?true",
        "doc": "Horizontally centered block"
      },
      "align_right": {
        "type": "flags.4?true",
        "doc": "Right-aligned block"
      },
      "valign_middle": {
        "type": "flags.5?true",
        "doc": "Vertically centered block"
      },
      "valign_bottom": {
        "type": "flags.6?true",
        "doc": "Block vertically-aligned to the bottom"
      },
      "text": {
        "type": "flags.7?RichText",
        "doc": "Content"
      },
      "colspan": {
        "type": "flags.1?int",
        "doc": "For how many columns should this cell extend"
      },
      "rowspan": {
        "type": "flags.2?int",
        "doc": "For how many rows should this cell extend"
      }
    }
  },
  "pageTableRow": {
    "doc": "Table row",
    "parameters": {
      "cells": {
        "type": "Vector<PageTableCell>",
        "doc": "Table cells"
      }
    }
  },
  "pageCaption": {
    "doc": "Page caption",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Caption"
      },
      "credit": {
        "type": "RichText",
        "doc": "Credits"
      }
    }
  },
  "pageListItemText": {
    "doc": "List item",
    "parameters": {
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "pageListItemBlocks": {
    "doc": "List item",
    "parameters": {
      "blocks": {
        "type": "Vector<PageBlock>",
        "doc": "Blocks"
      }
    }
  },
  "pageListOrderedItemText": {
    "doc": "Ordered list of text items",
    "parameters": {
      "num": {
        "type": "string",
        "doc": "Number of element within ordered list"
      },
      "text": {
        "type": "RichText",
        "doc": "Text"
      }
    }
  },
  "pageListOrderedItemBlocks": {
    "doc": "Ordered list of [IV](https://instantview.telegram.org) blocks",
    "parameters": {
      "num": {
        "type": "string",
        "doc": "Number of element within ordered list"
      },
      "blocks": {
        "type": "Vector<PageBlock>",
        "doc": "Item contents"
      }
    }
  },
  "pageRelatedArticle": {
    "doc": "Related article",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "url": {
        "type": "string",
        "doc": "URL of article"
      },
      "webpage_id": {
        "type": "long",
        "doc": "Webpage ID of generated IV preview"
      },
      "title": {
        "type": "flags.0?string",
        "doc": "Title"
      },
      "description": {
        "type": "flags.1?string",
        "doc": "Description"
      },
      "photo_id": {
        "type": "flags.2?long",
        "doc": "ID of preview photo"
      },
      "author": {
        "type": "flags.3?string",
        "doc": "Author name"
      },
      "published_date": {
        "type": "flags.4?int",
        "doc": "Date of publication"
      }
    }
  },
  "page": {
    "doc": "[Instant view](https://instantview.telegram.org) page",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "part": {
        "type": "flags.0?true",
        "doc": "Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using [messages.getWebPagePreview](https://core.telegram.org/method/messages.getWebPagePreview)."
      },
      "rtl": {
        "type": "flags.1?true",
        "doc": "Whether the page contains RTL text"
      },
      "v2": {
        "type": "flags.2?true",
        "doc": "Whether this is an [IV v2](https://instantview.telegram.org/docs#what-39s-new-in-2-0) page"
      },
      "url": {
        "type": "string",
        "doc": "Original page HTTP URL"
      },
      "blocks": {
        "type": "Vector<PageBlock>",
        "doc": "Page elements (like with HTML elements, only as TL constructors)"
      },
      "photos": {
        "type": "Vector<Photo>",
        "doc": "Photos in page"
      },
      "documents": {
        "type": "Vector<Document>",
        "doc": "Media in page"
      },
      "views": {
        "type": "flags.3?int",
        "doc": "View count"
      }
    }
  },
  "help.supportName": {
    "doc": "Localized name for telegram support",
    "parameters": {
      "name": {
        "type": "string",
        "doc": "Localized name"
      }
    }
  },
  "help.userInfoEmpty": {
    "doc": "Internal use",
    "parameters": {}
  },
  "help.userInfo": {
    "doc": "Internal use",
    "parameters": {
      "message": {
        "type": "string",
        "doc": "Info"
      },
      "entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "author": {
        "type": "string",
        "doc": "Author"
      },
      "date": {
        "type": "int",
        "doc": "Date"
      }
    }
  },
  "pollAnswer": {
    "doc": "A possible answer of a poll",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Textual representation of the answer"
      },
      "option": {
        "type": "bytes",
        "doc": "The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote)."
      }
    }
  },
  "poll": {
    "doc": "Poll",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "ID of the poll"
      },
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "closed": {
        "type": "flags.0?true",
        "doc": "Whether the poll is closed and doesn't accept any more answers"
      },
      "public_voters": {
        "type": "flags.1?true",
        "doc": "Whether cast votes are publicly visible to all users (non-anonymous poll)"
      },
      "multiple_choice": {
        "type": "flags.2?true",
        "doc": "Whether multiple options can be chosen as answer"
      },
      "quiz": {
        "type": "flags.3?true",
        "doc": "Whether this is a quiz (with wrong and correct answers, results shown in the return type)"
      },
      "question": {
        "type": "string",
        "doc": "The question of the poll"
      },
      "answers": {
        "type": "Vector<PollAnswer>",
        "doc": "The possible answers, vote using [messages.sendVote](https://core.telegram.org/method/messages.sendVote)."
      },
      "close_period": {
        "type": "flags.4?int",
        "doc": "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close\\_date."
      },
      "close_date": {
        "type": "flags.5?int",
        "doc": "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close\\_period."
      }
    }
  },
  "pollAnswerVoters": {
    "doc": "A poll answer, and how users voted on it",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "chosen": {
        "type": "flags.0?true",
        "doc": "Whether we have chosen this answer"
      },
      "correct": {
        "type": "flags.1?true",
        "doc": "For quizzes, whether the option we have chosen is correct"
      },
      "option": {
        "type": "bytes",
        "doc": "The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote)."
      },
      "voters": {
        "type": "int",
        "doc": "How many users voted for this option"
      }
    }
  },
  "pollResults": {
    "doc": "Results of poll",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "min": {
        "type": "flags.0?true",
        "doc": "Similar to [min](https://core.telegram.org/api/min) objects, used for poll constructors that are the same for all users so they don't have the option chosen by the current user (you can use [messages.getPollResults](https://core.telegram.org/method/messages.getPollResults) to get the full poll results)."
      },
      "results": {
        "type": "flags.1?Vector<PollAnswerVoters>",
        "doc": "Poll results"
      },
      "total_voters": {
        "type": "flags.2?int",
        "doc": "Total number of people that voted in the poll"
      },
      "recent_voters": {
        "type": "flags.3?Vector<Peer>",
        "doc": "IDs of the last users that recently voted in the poll"
      },
      "solution": {
        "type": "flags.4?string",
        "doc": "Explanation of quiz solution"
      },
      "solution_entities": {
        "type": "flags.4?Vector<MessageEntity>",
        "doc": "[Message entities for styled text in quiz solution](https://core.telegram.org/api/entities)"
      }
    }
  },
  "chatOnlines": {
    "doc": "Number of online users in a chat",
    "parameters": {
      "onlines": {
        "type": "int",
        "doc": "Number of online users"
      }
    }
  },
  "statsURL": {
    "doc": "URL with chat statistics",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Chat statistics"
      }
    }
  },
  "chatAdminRights": {
    "doc": "Represents the rights of an admin in a [channel/supergroup](https://core.telegram.org/api/channel).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "change_info": {
        "type": "flags.0?true",
        "doc": "If set, allows the admin to modify the description of the [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "post_messages": {
        "type": "flags.1?true",
        "doc": "If set, allows the admin to post messages in the [channel](https://core.telegram.org/api/channel)"
      },
      "edit_messages": {
        "type": "flags.2?true",
        "doc": "If set, allows the admin to also edit messages from other admins in the [channel](https://core.telegram.org/api/channel)"
      },
      "delete_messages": {
        "type": "flags.3?true",
        "doc": "If set, allows the admin to also delete messages from other admins in the [channel](https://core.telegram.org/api/channel)"
      },
      "ban_users": {
        "type": "flags.4?true",
        "doc": "If set, allows the admin to ban users from the [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "invite_users": {
        "type": "flags.5?true",
        "doc": "If set, allows the admin to invite users in the [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "pin_messages": {
        "type": "flags.7?true",
        "doc": "If set, allows the admin to pin messages in the [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "add_admins": {
        "type": "flags.9?true",
        "doc": "If set, allows the admin to add other admins with the same (or more limited) permissions in the [channel/supergroup](https://core.telegram.org/api/channel)"
      },
      "anonymous": {
        "type": "flags.10?true",
        "doc": "Whether this admin is anonymous"
      },
      "manage_call": {
        "type": "flags.11?true",
        "doc": "If set, allows the admin to change group call/livestream settings"
      },
      "other": {
        "type": "flags.12?true",
        "doc": "Set this flag if none of the other flags are set, but you still want the user to be an admin: if this or any of the other flags are set, the admin can get the chat [admin log](https://core.telegram.org/api/recent-actions), get [chat statistics](https://core.telegram.org/api/stats), get [message statistics in channels](https://core.telegram.org/api/stats), get channel members, see anonymous administrators in supergroups and ignore slow mode."
      },
      "manage_topics": {
        "type": "flags.13?true",
        "doc": "If set, allows the admin to create, delete or modify [forum topics »](https://core.telegram.org/api/forum#forum-topics)."
      },
      "post_stories": {
        "type": "flags.14?true",
        "doc": "If set, allows the admin to post [stories](https://core.telegram.org/api/stories) as the [channel](https://core.telegram.org/api/channel)."
      },
      "edit_stories": {
        "type": "flags.15?true",
        "doc": "If set, allows the admin to edit [stories](https://core.telegram.org/api/stories) posted by the other admins of the [channel](https://core.telegram.org/api/channel)."
      },
      "delete_stories": {
        "type": "flags.16?true",
        "doc": "If set, allows the admin to delete [stories](https://core.telegram.org/api/stories) posted by the other admins of the [channel](https://core.telegram.org/api/channel)."
      }
    }
  },
  "chatBannedRights": {
    "doc": "Represents the rights of a normal user in a [supergroup/channel/chat](https://core.telegram.org/api/channel). In this case, the flags are inverted: if set, a flag **does not allow** a user to do X.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "view_messages": {
        "type": "flags.0?true",
        "doc": "If set, does not allow a user to view messages in a [supergroup/channel/chat](https://core.telegram.org/api/channel)"
      },
      "send_messages": {
        "type": "flags.1?true",
        "doc": "If set, does not allow a user to send messages in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "send_media": {
        "type": "flags.2?true",
        "doc": "If set, does not allow a user to send any media in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "send_stickers": {
        "type": "flags.3?true",
        "doc": "If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "send_gifs": {
        "type": "flags.4?true",
        "doc": "If set, does not allow a user to send gifs in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "send_games": {
        "type": "flags.5?true",
        "doc": "If set, does not allow a user to send games in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "send_inline": {
        "type": "flags.6?true",
        "doc": "If set, does not allow a user to use inline bots in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "embed_links": {
        "type": "flags.7?true",
        "doc": "If set, does not allow a user to embed links in the messages of a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "send_polls": {
        "type": "flags.8?true",
        "doc": "If set, does not allow a user to send polls in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "change_info": {
        "type": "flags.10?true",
        "doc": "If set, does not allow any user to change the description of a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "invite_users": {
        "type": "flags.15?true",
        "doc": "If set, does not allow any user to invite users in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "pin_messages": {
        "type": "flags.17?true",
        "doc": "If set, does not allow any user to pin messages in a [supergroup/chat](https://core.telegram.org/api/channel)"
      },
      "manage_topics": {
        "type": "flags.18?true",
        "doc": "If set, does not allow any user to create, delete or modify [forum topics »](https://core.telegram.org/api/forum#forum-topics)."
      },
      "send_photos": {
        "type": "flags.19?true",
        "doc": "If set, does not allow a user to send photos in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "send_videos": {
        "type": "flags.20?true",
        "doc": "If set, does not allow a user to send videos in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "send_roundvideos": {
        "type": "flags.21?true",
        "doc": "If set, does not allow a user to send round videos in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "send_audios": {
        "type": "flags.22?true",
        "doc": "If set, does not allow a user to send audio files in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "send_voices": {
        "type": "flags.23?true",
        "doc": "If set, does not allow a user to send voice messages in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "send_docs": {
        "type": "flags.24?true",
        "doc": "If set, does not allow a user to send documents in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "send_plain": {
        "type": "flags.25?true",
        "doc": "If set, does not allow a user to send text messages in a [supergroup/chat](https://core.telegram.org/api/channel)."
      },
      "until_date": {
        "type": "int",
        "doc": "Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days)."
      }
    }
  },
  "inputWallPaper": {
    "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      }
    }
  },
  "inputWallPaperSlug": {
    "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) by slug (a unique ID, obtained from a [wallpaper link »](https://core.telegram.org/api/links#wallpaper-links))",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "Unique wallpaper ID"
      }
    }
  },
  "inputWallPaperNoFile": {
    "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) with no file access hash, used for example when deleting (`unsave=true`) wallpapers using [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper), specifying just the wallpaper ID.",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Wallpaper ID"
      }
    }
  },
  "account.wallPapersNotModified": {
    "doc": "No new [wallpapers](https://core.telegram.org/api/wallpapers) were found",
    "parameters": {}
  },
  "account.wallPapers": {
    "doc": "Installed [wallpapers](https://core.telegram.org/api/wallpapers)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "wallpapers": {
        "type": "Vector<WallPaper>",
        "doc": "[Wallpapers](https://core.telegram.org/api/wallpapers)"
      }
    }
  },
  "codeSettings": {
    "doc": "Settings used by telegram servers for sending the confirm code.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "allow_flashcall": {
        "type": "flags.0?true",
        "doc": "Whether to allow phone verification via [phone calls](https://core.telegram.org/api/auth)."
      },
      "current_number": {
        "type": "flags.1?true",
        "doc": "Pass true if the phone number is used on the current device. Ignored if allow\\_flashcall is not set."
      },
      "allow_app_hash": {
        "type": "flags.4?true",
        "doc": "If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the [android SMS receiver APIs](https://developers.google.com/identity/sms-retriever/overview)"
      },
      "allow_missed_call": {
        "type": "flags.5?true",
        "doc": "Whether this device supports receiving the code using the [auth.codeTypeMissedCall](https://core.telegram.org/constructor/auth.codeTypeMissedCall) method"
      },
      "allow_firebase": {
        "type": "flags.7?true",
        "doc": "Whether Firebase auth is supported"
      },
      "logout_tokens": {
        "type": "flags.6?Vector<bytes>",
        "doc": "Previously stored future auth tokens, see [the documentation for more info »](https://core.telegram.org/api/auth#future-auth-tokens)"
      },
      "token": {
        "type": "flags.8?string",
        "doc": "Used only by official iOS apps for Firebase auth: device token for apple push."
      },
      "app_sandbox": {
        "type": "flags.8?Bool",
        "doc": "Used only by official iOS apps for firebase auth: whether a sandbox-certificate will be used during transmission of the push notification."
      }
    }
  },
  "wallPaperSettings": {
    "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) rendering information.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "blur": {
        "type": "flags.1?true",
        "doc": "For [image wallpapers »](https://core.telegram.org/api/wallpapers#image-wallpapers): if set, the JPEG must be downscaled to fit in 450x450 square and then box-blurred with radius 12."
      },
      "motion": {
        "type": "flags.2?true",
        "doc": "If set, the background needs to be slightly moved when the device is rotated."
      },
      "background_color": {
        "type": "flags.0?int",
        "doc": "Used for [solid »](https://core.telegram.org/api/wallpapers#solid-fill), [gradient »](https://core.telegram.org/api/wallpapers#gradient-fill) and [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills."
      },
      "second_background_color": {
        "type": "flags.4?int",
        "doc": "Used for [gradient »](https://core.telegram.org/api/wallpapers#gradient-fill) and [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills."
      },
      "third_background_color": {
        "type": "flags.5?int",
        "doc": "Used for [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills."
      },
      "fourth_background_color": {
        "type": "flags.6?int",
        "doc": "Used for [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills."
      },
      "intensity": {
        "type": "flags.3?int",
        "doc": "Used for [pattern wallpapers »](https://core.telegram.org/api/wallpapers#pattern-wallpapers)."
      },
      "rotation": {
        "type": "flags.4?int",
        "doc": "Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45."
      },
      "emoticon": {
        "type": "flags.7?string",
        "doc": "If set, this wallpaper can be used as a channel wallpaper and is represented by the specified UTF-8 emoji."
      }
    }
  },
  "autoDownloadSettings": {
    "doc": "Autodownload settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "disabled": {
        "type": "flags.0?true",
        "doc": "Disable automatic media downloads?"
      },
      "video_preload_large": {
        "type": "flags.1?true",
        "doc": "Whether to preload the first seconds of videos larger than the specified limit"
      },
      "audio_preload_next": {
        "type": "flags.2?true",
        "doc": "Whether to preload the next audio track when you're listening to music"
      },
      "phonecalls_less_data": {
        "type": "flags.3?true",
        "doc": "Whether to enable data saving mode in phone calls"
      },
      "stories_preload": {
        "type": "flags.4?true",
        "doc": "Whether to preload [stories](https://core.telegram.org/api/stories); in particular, the first [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`preload_prefix_size` bytes of story videos should be preloaded."
      },
      "photo_size_max": {
        "type": "int",
        "doc": "Maximum size of photos to preload"
      },
      "video_size_max": {
        "type": "long",
        "doc": "Maximum size of videos to preload"
      },
      "file_size_max": {
        "type": "long",
        "doc": "Maximum size of other files to preload"
      },
      "video_upload_maxbitrate": {
        "type": "int",
        "doc": "Maximum suggested bitrate for **uploading** videos"
      },
      "small_queue_active_operations_max": {
        "type": "int",
        "doc": "A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files smaller than 20MB."
      },
      "large_queue_active_operations_max": {
        "type": "int",
        "doc": "A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files bigger than 20MB."
      }
    }
  },
  "account.autoDownloadSettings": {
    "doc": "Media autodownload settings",
    "parameters": {
      "low": {
        "type": "AutoDownloadSettings",
        "doc": "Low data usage preset"
      },
      "medium": {
        "type": "AutoDownloadSettings",
        "doc": "Medium data usage preset"
      },
      "high": {
        "type": "AutoDownloadSettings",
        "doc": "High data usage preset"
      }
    }
  },
  "emojiKeyword": {
    "doc": "Emoji keyword",
    "parameters": {
      "keyword": {
        "type": "string",
        "doc": "Keyword"
      },
      "emoticons": {
        "type": "Vector<string>",
        "doc": "Emojis associated to keyword"
      }
    }
  },
  "emojiKeywordDeleted": {
    "doc": "Deleted emoji keyword",
    "parameters": {
      "keyword": {
        "type": "string",
        "doc": "Keyword"
      },
      "emoticons": {
        "type": "Vector<string>",
        "doc": "Emojis that were associated to keyword"
      }
    }
  },
  "emojiKeywordsDifference": {
    "doc": "Changes to emoji keywords",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code for keywords"
      },
      "from_version": {
        "type": "int",
        "doc": "Previous emoji keyword list version"
      },
      "version": {
        "type": "int",
        "doc": "Current version of emoji keyword list"
      },
      "keywords": {
        "type": "Vector<EmojiKeyword>",
        "doc": "Emojis associated to keywords"
      }
    }
  },
  "emojiURL": {
    "doc": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation"
      }
    }
  },
  "emojiLanguage": {
    "doc": "Emoji language",
    "parameters": {
      "lang_code": {
        "type": "string",
        "doc": "Language code"
      }
    }
  },
  "folder": {
    "doc": "Folder",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "autofill_new_broadcasts": {
        "type": "flags.0?true",
        "doc": "Automatically add new channels to this folder"
      },
      "autofill_public_groups": {
        "type": "flags.1?true",
        "doc": "Automatically add joined new public supergroups to this folder"
      },
      "autofill_new_correspondents": {
        "type": "flags.2?true",
        "doc": "Automatically add new private chats to this folder"
      },
      "id": {
        "type": "int",
        "doc": "Folder ID"
      },
      "title": {
        "type": "string",
        "doc": "Folder title"
      },
      "photo": {
        "type": "flags.3?ChatPhoto",
        "doc": "Folder picture"
      }
    }
  },
  "inputFolderPeer": {
    "doc": "Peer in a folder",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Peer"
      },
      "folder_id": {
        "type": "int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      }
    }
  },
  "folderPeer": {
    "doc": "Peer in a folder",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Folder peer info"
      },
      "folder_id": {
        "type": "int",
        "doc": "[Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)"
      }
    }
  },
  "messages.searchCounter": {
    "doc": "Indicates how many results would be found by a [messages.search](https://core.telegram.org/method/messages.search) call with the same parameters",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inexact": {
        "type": "flags.1?true",
        "doc": "If set, the results may be inexact"
      },
      "filter": {
        "type": "MessagesFilter",
        "doc": "Provided message filter"
      },
      "count": {
        "type": "int",
        "doc": "Number of results that were found server-side"
      }
    }
  },
  "urlAuthResultRequest": {
    "doc": "Details about the authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "request_write_access": {
        "type": "flags.0?true",
        "doc": "Whether the bot would like to send messages to the user"
      },
      "bot": {
        "type": "User",
        "doc": "Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details."
      },
      "domain": {
        "type": "string",
        "doc": "The domain name of the website on which the user will log in."
      }
    }
  },
  "urlAuthResultAccepted": {
    "doc": "Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "The URL name of the website on which the user has logged in."
      }
    }
  },
  "urlAuthResultDefault": {
    "doc": "Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization)",
    "parameters": {}
  },
  "channelLocationEmpty": {
    "doc": "No location (normal supergroup)",
    "parameters": {}
  },
  "channelLocation": {
    "doc": "Geographical location of supergroup (geogroups)",
    "parameters": {
      "geo_point": {
        "type": "GeoPoint",
        "doc": "Geographical location of supergroup"
      },
      "address": {
        "type": "string",
        "doc": "Textual description of the address"
      }
    }
  },
  "peerLocated": {
    "doc": "Peer geolocated nearby",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      },
      "expires": {
        "type": "int",
        "doc": "Validity period of current data"
      },
      "distance": {
        "type": "int",
        "doc": "Distance from the peer in meters"
      }
    }
  },
  "peerSelfLocated": {
    "doc": "Current peer",
    "parameters": {
      "expires": {
        "type": "int",
        "doc": "Expiry of geolocation info for current peer"
      }
    }
  },
  "restrictionReason": {
    "doc": "Restriction reason.",
    "parameters": {
      "platform": {
        "type": "string",
        "doc": "Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (`android-ios`, `ios-wp`, etc)"
      },
      "reason": {
        "type": "string",
        "doc": "Restriction reason (`porno`, `terms`, etc.)"
      },
      "text": {
        "type": "string",
        "doc": "Error message to be shown to the user"
      }
    }
  },
  "inputTheme": {
    "doc": "Theme",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash"
      }
    }
  },
  "inputThemeSlug": {
    "doc": "Theme by theme ID",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "Unique theme ID obtained from a [theme deep link »](https://core.telegram.org/api/links#theme-links)"
      }
    }
  },
  "theme": {
    "doc": "Theme",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "creator": {
        "type": "flags.0?true",
        "doc": "Whether the current user is the creator of this theme"
      },
      "default": {
        "type": "flags.1?true",
        "doc": "Whether this is the default theme"
      },
      "for_chat": {
        "type": "flags.5?true",
        "doc": "Whether this theme is meant to be used as a [chat theme](https://telegram.org/blog/chat-themes-interactive-emoji-read-receipts)"
      },
      "id": {
        "type": "long",
        "doc": "Theme ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Theme access hash"
      },
      "slug": {
        "type": "string",
        "doc": "Unique theme ID"
      },
      "title": {
        "type": "string",
        "doc": "Theme name"
      },
      "document": {
        "type": "flags.2?Document",
        "doc": "Theme"
      },
      "settings": {
        "type": "flags.3?Vector<ThemeSettings>",
        "doc": "Theme settings"
      },
      "emoticon": {
        "type": "flags.6?string",
        "doc": "Theme emoji"
      },
      "installs_count": {
        "type": "flags.4?int",
        "doc": "Installation count"
      }
    }
  },
  "account.themesNotModified": {
    "doc": "No new themes were installed",
    "parameters": {}
  },
  "account.themes": {
    "doc": "Installed themes",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "themes": {
        "type": "Vector<Theme>",
        "doc": "Themes"
      }
    }
  },
  "auth.loginToken": {
    "doc": "Login token (for [QR code login](https://core.telegram.org/api/qr-login))",
    "parameters": {
      "expires": {
        "type": "int",
        "doc": "Expiration date of QR code"
      },
      "token": {
        "type": "bytes",
        "doc": "Token to render in QR code"
      }
    }
  },
  "auth.loginTokenMigrateTo": {
    "doc": "Repeat the query to the specified DC",
    "parameters": {
      "dc_id": {
        "type": "int",
        "doc": "DC ID"
      },
      "token": {
        "type": "bytes",
        "doc": "Token to use for login"
      }
    }
  },
  "auth.loginTokenSuccess": {
    "doc": "Login via token (QR code) succeeded!",
    "parameters": {
      "authorization": {
        "type": "auth.Authorization",
        "doc": "Authorization info"
      }
    }
  },
  "account.contentSettings": {
    "doc": "Sensitive content settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "sensitive_enabled": {
        "type": "flags.0?true",
        "doc": "Whether viewing of sensitive (NSFW) content is enabled"
      },
      "sensitive_can_change": {
        "type": "flags.1?true",
        "doc": "Whether the current client can change the sensitive content settings to view NSFW content"
      }
    }
  },
  "messages.inactiveChats": {
    "doc": "Inactive chat list",
    "parameters": {
      "dates": {
        "type": "Vector<int>",
        "doc": "When was the chat last active"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chat list"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the chat list"
      }
    }
  },
  "baseThemeClassic": {
    "doc": "Classic theme",
    "parameters": {}
  },
  "baseThemeDay": {
    "doc": "Day theme",
    "parameters": {}
  },
  "baseThemeNight": {
    "doc": "Night theme",
    "parameters": {}
  },
  "baseThemeTinted": {
    "doc": "Tinted theme",
    "parameters": {}
  },
  "baseThemeArctic": {
    "doc": "Arctic theme",
    "parameters": {}
  },
  "inputThemeSettings": {
    "doc": "Theme settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "message_colors_animated": {
        "type": "flags.2?true",
        "doc": "If set, the freeform gradient fill needs to be animated on every sent message"
      },
      "base_theme": {
        "type": "BaseTheme",
        "doc": "Default theme on which this theme is based"
      },
      "accent_color": {
        "type": "int",
        "doc": "Accent color, ARGB format"
      },
      "outbox_accent_color": {
        "type": "flags.3?int",
        "doc": "Accent color of outgoing messages in ARGB format"
      },
      "message_colors": {
        "type": "flags.0?Vector<int>",
        "doc": "The fill to be used as a background for outgoing messages, in RGB24 format.  \nIf just one or two equal colors are provided, describes a solid fill of a background.  \nIf two different colors are provided, describes the top and bottom colors of a 0-degree gradient.  \nIf three or four colors are provided, describes a freeform gradient fill of a background."
      },
      "wallpaper": {
        "type": "flags.1?InputWallPaper",
        "doc": "[inputWallPaper](https://core.telegram.org/constructor/inputWallPaper) or [inputWallPaperSlug](https://core.telegram.org/constructor/inputWallPaper) when passing wallpaper files for [image](https://core.telegram.org/api/wallpapers#image-wallpapers) or [pattern](https://core.telegram.org/api/wallpapers#pattern-wallpapers) wallpapers, [inputWallPaperNoFile](https://core.telegram.org/constructor/inputWallPaperNoFile) with `id=0` otherwise."
      },
      "wallpaper_settings": {
        "type": "flags.1?WallPaperSettings",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers) settings."
      }
    }
  },
  "themeSettings": {
    "doc": "Theme settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "message_colors_animated": {
        "type": "flags.2?true",
        "doc": "If set, the freeform gradient fill needs to be animated on every sent message."
      },
      "base_theme": {
        "type": "BaseTheme",
        "doc": "Base theme"
      },
      "accent_color": {
        "type": "int",
        "doc": "Accent color, ARGB format"
      },
      "outbox_accent_color": {
        "type": "flags.3?int",
        "doc": "Accent color of outgoing messages in ARGB format"
      },
      "message_colors": {
        "type": "flags.0?Vector<int>",
        "doc": "The fill to be used as a background for outgoing messages, in RGB24 format.  \nIf just one or two equal colors are provided, describes a solid fill of a background.  \nIf two different colors are provided, describes the top and bottom colors of a 0-degree gradient.  \nIf three or four colors are provided, describes a freeform gradient fill of a background."
      },
      "wallpaper": {
        "type": "flags.1?WallPaper",
        "doc": "[Wallpaper](https://core.telegram.org/api/wallpapers)"
      }
    }
  },
  "webPageAttributeTheme": {
    "doc": "Page theme",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "documents": {
        "type": "flags.0?Vector<Document>",
        "doc": "Theme files"
      },
      "settings": {
        "type": "flags.1?ThemeSettings",
        "doc": "Theme settings"
      }
    }
  },
  "webPageAttributeStory": {
    "doc": "Webpage preview of a Telegram story",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer that posted the story"
      },
      "id": {
        "type": "int",
        "doc": "[Story ID](https://core.telegram.org/api/stories#watching-stories)"
      },
      "story": {
        "type": "flags.0?StoryItem",
        "doc": "May contain the story, if not the story should be fetched when and if needed using [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) with the above `id` and `peer`."
      }
    }
  },
  "messages.votesList": {
    "doc": "How users voted in a poll",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of votes for all options (or only for the chosen `option`, if provided to [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes))"
      },
      "votes": {
        "type": "Vector<MessagePeerVote>",
        "doc": "Vote info for each user"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Info about users that voted in the poll"
      },
      "next_offset": {
        "type": "flags.0?string",
        "doc": "Offset to use with the next [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes) request, empty string if no more results are available."
      }
    }
  },
  "bankCardOpenUrl": {
    "doc": "Credit card info URL provided by the bank",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Info URL"
      },
      "name": {
        "type": "string",
        "doc": "Bank name"
      }
    }
  },
  "payments.bankCardData": {
    "doc": "Credit card info, provided by the card's bank(s)",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "Credit card title"
      },
      "open_urls": {
        "type": "Vector<BankCardOpenUrl>",
        "doc": "Info URL(s) provided by the card's bank(s)"
      }
    }
  },
  "dialogFilter": {
    "doc": "Dialog filter AKA [folder](https://core.telegram.org/api/folders)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "contacts": {
        "type": "flags.0?true",
        "doc": "Whether to include all contacts in this [folder](https://core.telegram.org/api/folders)"
      },
      "non_contacts": {
        "type": "flags.1?true",
        "doc": "Whether to include all non-contacts in this [folder](https://core.telegram.org/api/folders)"
      },
      "groups": {
        "type": "flags.2?true",
        "doc": "Whether to include all groups in this [folder](https://core.telegram.org/api/folders)"
      },
      "broadcasts": {
        "type": "flags.3?true",
        "doc": "Whether to include all channels in this [folder](https://core.telegram.org/api/folders)"
      },
      "bots": {
        "type": "flags.4?true",
        "doc": "Whether to include all bots in this [folder](https://core.telegram.org/api/folders)"
      },
      "exclude_muted": {
        "type": "flags.11?true",
        "doc": "Whether to exclude muted chats from this [folder](https://core.telegram.org/api/folders)"
      },
      "exclude_read": {
        "type": "flags.12?true",
        "doc": "Whether to exclude read chats from this [folder](https://core.telegram.org/api/folders)"
      },
      "exclude_archived": {
        "type": "flags.13?true",
        "doc": "Whether to exclude archived chats from this [folder](https://core.telegram.org/api/folders)"
      },
      "id": {
        "type": "int",
        "doc": "[Folder](https://core.telegram.org/api/folders) ID"
      },
      "title": {
        "type": "string",
        "doc": "[Folder](https://core.telegram.org/api/folders) name"
      },
      "emoticon": {
        "type": "flags.25?string",
        "doc": "Emoji to use as icon for the folder."
      },
      "pinned_peers": {
        "type": "Vector<InputPeer>",
        "doc": "Pinned chats, [folders](https://core.telegram.org/api/folders) can have unlimited pinned chats"
      },
      "include_peers": {
        "type": "Vector<InputPeer>",
        "doc": "Include the following chats in this [folder](https://core.telegram.org/api/folders)"
      },
      "exclude_peers": {
        "type": "Vector<InputPeer>",
        "doc": "Exclude the following chats from this [folder](https://core.telegram.org/api/folders)"
      }
    }
  },
  "dialogFilterDefault": {
    "doc": "Used only when reordering folders to indicate the default (all chats) folder.",
    "parameters": {}
  },
  "dialogFilterChatlist": {
    "doc": "A folder imported using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_my_invites": {
        "type": "flags.26?true",
        "doc": "Whether the current user has created some [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links) to share the folder as well."
      },
      "id": {
        "type": "int",
        "doc": "ID of the folder"
      },
      "title": {
        "type": "string",
        "doc": "Name of the folder"
      },
      "emoticon": {
        "type": "flags.25?string",
        "doc": "Emoji to use as icon for the folder."
      },
      "pinned_peers": {
        "type": "Vector<InputPeer>",
        "doc": "Pinned chats, [folders](https://core.telegram.org/api/folders) can have unlimited pinned chats"
      },
      "include_peers": {
        "type": "Vector<InputPeer>",
        "doc": "Chats to include in the folder"
      }
    }
  },
  "dialogFilterSuggested": {
    "doc": "Suggested [folders](https://core.telegram.org/api/folders)",
    "parameters": {
      "filter": {
        "type": "DialogFilter",
        "doc": "[Folder info](https://core.telegram.org/api/folders)"
      },
      "description": {
        "type": "string",
        "doc": "[Folder](https://core.telegram.org/api/folders) description"
      }
    }
  },
  "statsDateRangeDays": {
    "doc": "[Channel statistics](https://core.telegram.org/api/stats) date range",
    "parameters": {
      "min_date": {
        "type": "int",
        "doc": "Initial date"
      },
      "max_date": {
        "type": "int",
        "doc": "Final date"
      }
    }
  },
  "statsAbsValueAndPrev": {
    "doc": "Statistics value couple; initial and final value for period of time currently in consideration",
    "parameters": {
      "current": {
        "type": "double",
        "doc": "Current value"
      },
      "previous": {
        "type": "double",
        "doc": "Previous value"
      }
    }
  },
  "statsPercentValue": {
    "doc": "[Channel statistics percentage](https://core.telegram.org/api/stats).  \nCompute the percentage simply by doing `part * total / 100`",
    "parameters": {
      "part": {
        "type": "double",
        "doc": "Partial value"
      },
      "total": {
        "type": "double",
        "doc": "Total value"
      }
    }
  },
  "statsGraphAsync": {
    "doc": "This [channel statistics graph](https://core.telegram.org/api/stats) must be generated asynchronously using [stats.loadAsyncGraph](https://core.telegram.org/method/stats.loadAsyncGraph) to reduce server load",
    "parameters": {
      "token": {
        "type": "string",
        "doc": "Token to use for fetching the async graph"
      }
    }
  },
  "statsGraphError": {
    "doc": "An error occurred while generating the [statistics graph](https://core.telegram.org/api/stats)",
    "parameters": {
      "error": {
        "type": "string",
        "doc": "The error"
      }
    }
  },
  "statsGraph": {
    "doc": "[Channel statistics graph](https://core.telegram.org/api/stats)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "json": {
        "type": "DataJSON",
        "doc": "Statistics data"
      },
      "zoom_token": {
        "type": "flags.0?string",
        "doc": "Zoom token"
      }
    }
  },
  "stats.broadcastStats": {
    "doc": "[Channel statistics](https://core.telegram.org/api/stats).",
    "parameters": {
      "period": {
        "type": "StatsDateRangeDays",
        "doc": "Period in consideration"
      },
      "followers": {
        "type": "StatsAbsValueAndPrev",
        "doc": "Follower count change for period in consideration"
      },
      "views_per_post": {
        "type": "StatsAbsValueAndPrev",
        "doc": "`total_viewcount/postcount`, for posts posted during the period in consideration.  \nNote that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)."
      },
      "shares_per_post": {
        "type": "StatsAbsValueAndPrev",
        "doc": "`total_sharecount/postcount`, for posts posted during the period in consideration.  \nNote that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)"
      },
      "reactions_per_post": {
        "type": "StatsAbsValueAndPrev",
        "doc": "`total_reactions/postcount`, for posts posted during the period in consideration.  \nNote that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)"
      },
      "views_per_story": {
        "type": "StatsAbsValueAndPrev",
        "doc": "`total_views/storycount`, for posts posted during the period in consideration.  \nNote that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)"
      },
      "shares_per_story": {
        "type": "StatsAbsValueAndPrev",
        "doc": "`total_shares/storycount`, for posts posted during the period in consideration.  \nNote that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)"
      },
      "reactions_per_story": {
        "type": "StatsAbsValueAndPrev",
        "doc": "`total_reactions/storycount`, for posts posted during the period in consideration.  \nNote that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)"
      },
      "enabled_notifications": {
        "type": "StatsPercentValue",
        "doc": "Percentage of subscribers with enabled notifications"
      },
      "growth_graph": {
        "type": "StatsGraph",
        "doc": "Channel growth graph (absolute subscriber count)"
      },
      "followers_graph": {
        "type": "StatsGraph",
        "doc": "Followers growth graph (relative subscriber count)"
      },
      "mute_graph": {
        "type": "StatsGraph",
        "doc": "Muted users graph (relative)"
      },
      "top_hours_graph": {
        "type": "StatsGraph",
        "doc": "Views per hour graph (absolute)"
      },
      "interactions_graph": {
        "type": "StatsGraph",
        "doc": "Interactions graph (absolute)"
      },
      "iv_interactions_graph": {
        "type": "StatsGraph",
        "doc": "IV interactions graph (absolute)"
      },
      "views_by_source_graph": {
        "type": "StatsGraph",
        "doc": "Views by source graph (absolute)"
      },
      "new_followers_by_source_graph": {
        "type": "StatsGraph",
        "doc": "New followers by source graph (absolute)"
      },
      "languages_graph": {
        "type": "StatsGraph",
        "doc": "Subscriber language graph (pie chart)"
      },
      "reactions_by_emotion_graph": {
        "type": "StatsGraph",
        "doc": "A graph containing the number of reactions on posts categorized by emotion"
      },
      "story_interactions_graph": {
        "type": "StatsGraph",
        "doc": "A graph containing the number of story views and shares"
      },
      "story_reactions_by_emotion_graph": {
        "type": "StatsGraph",
        "doc": "A graph containing the number of reactions on stories categorized by emotion"
      },
      "recent_posts_interactions": {
        "type": "Vector<PostInteractionCounters>",
        "doc": "Detailed statistics about number of views and shares of recently sent messages and stories"
      }
    }
  },
  "help.promoDataEmpty": {
    "doc": "No PSA/MTProxy info is available",
    "parameters": {
      "expires": {
        "type": "int",
        "doc": "Re-fetch PSA/MTProxy info after the specified number of seconds"
      }
    }
  },
  "help.promoData": {
    "doc": "MTProxy/Public Service Announcement information",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "proxy": {
        "type": "flags.0?true",
        "doc": "MTProxy-related channel"
      },
      "expires": {
        "type": "int",
        "doc": "Expiry of PSA/MTProxy info"
      },
      "peer": {
        "type": "Peer",
        "doc": "MTProxy/PSA peer"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chat info"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "User info"
      },
      "psa_type": {
        "type": "flags.1?string",
        "doc": "PSA type"
      },
      "psa_message": {
        "type": "flags.2?string",
        "doc": "PSA message"
      }
    }
  },
  "videoSize": {
    "doc": "An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) in MPEG4 format",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "type": {
        "type": "string",
        "doc": "`u` for animated profile pictures, and `v` for trimmed and downscaled video previews"
      },
      "w": {
        "type": "int",
        "doc": "Video width"
      },
      "h": {
        "type": "int",
        "doc": "Video height"
      },
      "size": {
        "type": "int",
        "doc": "File size"
      },
      "video_start_ts": {
        "type": "flags.0?double",
        "doc": "Timestamp that should be shown as static preview to the user (seconds)"
      }
    }
  },
  "videoSizeEmojiMarkup": {
    "doc": "An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) based on a [custom emoji sticker](https://core.telegram.org/api/custom-emoji).",
    "parameters": {
      "emoji_id": {
        "type": "long",
        "doc": "[Custom emoji ID](https://core.telegram.org/api/custom-emoji): the custom emoji sticker is shown at the center of the profile picture and occupies at most 67% of it."
      },
      "background_colors": {
        "type": "Vector<int>",
        "doc": "1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0."
      }
    }
  },
  "videoSizeStickerMarkup": {
    "doc": "An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) based on a [sticker](https://core.telegram.org/api/stickers).",
    "parameters": {
      "stickerset": {
        "type": "InputStickerSet",
        "doc": "Stickerset"
      },
      "sticker_id": {
        "type": "long",
        "doc": "Sticker ID"
      },
      "background_colors": {
        "type": "Vector<int>",
        "doc": "1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0."
      }
    }
  },
  "statsGroupTopPoster": {
    "doc": "Information about an active user in a supergroup",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "messages": {
        "type": "int",
        "doc": "Number of messages for [statistics](https://core.telegram.org/api/stats) period in consideration"
      },
      "avg_chars": {
        "type": "int",
        "doc": "Average number of characters per message"
      }
    }
  },
  "statsGroupTopAdmin": {
    "doc": "Information about an active admin in a supergroup",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "deleted": {
        "type": "int",
        "doc": "Number of deleted messages for [statistics](https://core.telegram.org/api/stats) period in consideration"
      },
      "kicked": {
        "type": "int",
        "doc": "Number of kicked users for [statistics](https://core.telegram.org/api/stats) period in consideration"
      },
      "banned": {
        "type": "int",
        "doc": "Number of banned users for [statistics](https://core.telegram.org/api/stats) period in consideration"
      }
    }
  },
  "statsGroupTopInviter": {
    "doc": "Information about an active supergroup inviter",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "invitations": {
        "type": "int",
        "doc": "Number of invitations for [statistics](https://core.telegram.org/api/stats) period in consideration"
      }
    }
  },
  "stats.megagroupStats": {
    "doc": "Supergroup [statistics](https://core.telegram.org/api/stats)",
    "parameters": {
      "period": {
        "type": "StatsDateRangeDays",
        "doc": "Period in consideration"
      },
      "members": {
        "type": "StatsAbsValueAndPrev",
        "doc": "Member count change for period in consideration"
      },
      "messages": {
        "type": "StatsAbsValueAndPrev",
        "doc": "Message number change for period in consideration"
      },
      "viewers": {
        "type": "StatsAbsValueAndPrev",
        "doc": "Number of users that viewed messages, for range in consideration"
      },
      "posters": {
        "type": "StatsAbsValueAndPrev",
        "doc": "Number of users that posted messages, for range in consideration"
      },
      "growth_graph": {
        "type": "StatsGraph",
        "doc": "Supergroup growth graph (absolute subscriber count)"
      },
      "members_graph": {
        "type": "StatsGraph",
        "doc": "Members growth (relative subscriber count)"
      },
      "new_members_by_source_graph": {
        "type": "StatsGraph",
        "doc": "New members by source graph"
      },
      "languages_graph": {
        "type": "StatsGraph",
        "doc": "Subscriber language graph (pie chart)"
      },
      "messages_graph": {
        "type": "StatsGraph",
        "doc": "Message activity graph (stacked bar graph, message type)"
      },
      "actions_graph": {
        "type": "StatsGraph",
        "doc": "Group activity graph (deleted, modified messages, blocked users)"
      },
      "top_hours_graph": {
        "type": "StatsGraph",
        "doc": "Activity per hour graph (absolute)"
      },
      "weekdays_graph": {
        "type": "StatsGraph",
        "doc": "Activity per day of week graph (absolute)"
      },
      "top_posters": {
        "type": "Vector<StatsGroupTopPoster>",
        "doc": "Info about most active group members"
      },
      "top_admins": {
        "type": "Vector<StatsGroupTopAdmin>",
        "doc": "Info about most active group admins"
      },
      "top_inviters": {
        "type": "Vector<StatsGroupTopInviter>",
        "doc": "Info about most active group inviters"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Info about users mentioned in statistics"
      }
    }
  },
  "globalPrivacySettings": {
    "doc": "Global privacy settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "archive_and_mute_new_noncontact_peers": {
        "type": "flags.0?true",
        "doc": "Whether to archive and mute new chats from non-contacts"
      },
      "keep_archived_unmuted": {
        "type": "flags.1?true",
        "doc": "Whether unmuted chats will be kept in the Archive chat list when they get a new message."
      },
      "keep_archived_folders": {
        "type": "flags.2?true",
        "doc": "Whether unmuted chats that are always included or pinned in a [folder](https://core.telegram.org/api/folders), will be kept in the Archive chat list when they get a new message. Ignored if `keep_archived_unmuted` is set."
      }
    }
  },
  "help.countryCode": {
    "doc": "Country code and phone number pattern of a specific country",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "country_code": {
        "type": "string",
        "doc": "ISO country code"
      },
      "prefixes": {
        "type": "flags.0?Vector<string>",
        "doc": "Possible phone prefixes"
      },
      "patterns": {
        "type": "flags.1?Vector<string>",
        "doc": "Phone patterns: for example, `XXX XXX XXX`"
      }
    }
  },
  "help.country": {
    "doc": "Name, ISO code, localized name and phone codes/patterns of a specific country",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "hidden": {
        "type": "flags.0?true",
        "doc": "Whether this country should not be shown in the list"
      },
      "iso2": {
        "type": "string",
        "doc": "ISO code of country"
      },
      "default_name": {
        "type": "string",
        "doc": "Name of the country in the country's language"
      },
      "name": {
        "type": "flags.1?string",
        "doc": "Name of the country in the user's language, if different from the original name"
      },
      "country_codes": {
        "type": "Vector<help.CountryCode>",
        "doc": "Phone codes/patterns"
      }
    }
  },
  "help.countriesListNotModified": {
    "doc": "The country list has not changed",
    "parameters": {}
  },
  "help.countriesList": {
    "doc": "Name, ISO code, localized name and phone codes/patterns of all available countries",
    "parameters": {
      "countries": {
        "type": "Vector<help.Country>",
        "doc": "Name, ISO code, localized name and phone codes/patterns of all available countries"
      },
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      }
    }
  },
  "messageViews": {
    "doc": "View, forward counter + info about replies of a specific message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "views": {
        "type": "flags.0?int",
        "doc": "View count of message"
      },
      "forwards": {
        "type": "flags.1?int",
        "doc": "Forward count of message"
      },
      "replies": {
        "type": "flags.2?MessageReplies",
        "doc": "Reply and [thread](https://core.telegram.org/api/threads) information of message"
      }
    }
  },
  "messages.messageViews": {
    "doc": "View, forward counter + info about replies",
    "parameters": {
      "views": {
        "type": "Vector<MessageViews>",
        "doc": "View, forward counter + info about replies"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in constructor"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in constructor"
      }
    }
  },
  "messages.discussionMessage": {
    "doc": "Information about a [message thread](https://core.telegram.org/api/threads)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "The messages from which the thread starts. The messages are returned in reverse chronological order (i.e., in order of decreasing message ID)."
      },
      "max_id": {
        "type": "flags.0?int",
        "doc": "Message ID of latest reply in this [thread](https://core.telegram.org/api/threads)"
      },
      "read_inbox_max_id": {
        "type": "flags.1?int",
        "doc": "Message ID of latest read incoming message in this [thread](https://core.telegram.org/api/threads)"
      },
      "read_outbox_max_id": {
        "type": "flags.2?int",
        "doc": "Message ID of latest read outgoing message in this [thread](https://core.telegram.org/api/threads)"
      },
      "unread_count": {
        "type": "int",
        "doc": "Number of unread messages"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in constructor"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in constructor"
      }
    }
  },
  "messageReplyHeader": {
    "doc": "Message replies and [thread](https://core.telegram.org/api/threads) information",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "reply_to_scheduled": {
        "type": "flags.2?true",
        "doc": "This is a reply to a scheduled message."
      },
      "forum_topic": {
        "type": "flags.3?true",
        "doc": "Whether this message was sent in a [forum topic](https://core.telegram.org/api/forum#forum-topics) (except for the General topic)."
      },
      "quote": {
        "type": "flags.9?true",
        "doc": "Whether this message is quoting a part of another message."
      },
      "reply_to_msg_id": {
        "type": "flags.4?int",
        "doc": "ID of message to which this message is replying"
      },
      "reply_to_peer_id": {
        "type": "flags.0?Peer",
        "doc": "For replies sent in [channel discussion threads](https://core.telegram.org/api/threads) of which the current user is not a member, the discussion group ID"
      },
      "reply_from": {
        "type": "flags.5?MessageFwdHeader",
        "doc": "When replying to a message sent by a certain peer to another chat, contains info about the peer that originally sent the message to that other chat."
      },
      "reply_media": {
        "type": "flags.8?MessageMedia",
        "doc": "When replying to a media sent by a certain peer to another chat, contains the media of the replied-to message."
      },
      "reply_to_top_id": {
        "type": "flags.1?int",
        "doc": "ID of the message that started this [message thread](https://core.telegram.org/api/threads)"
      },
      "quote_text": {
        "type": "flags.6?string",
        "doc": "Used to quote-reply to only a certain section (specified here) of the original message."
      },
      "quote_entities": {
        "type": "flags.7?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities) from the `quote_text` field."
      },
      "quote_offset": {
        "type": "flags.10?int",
        "doc": "Offset of the message `quote_text` within the original message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))."
      }
    }
  },
  "messageReplyStoryHeader": {
    "doc": "Represents a reply to a [story](https://core.telegram.org/api/stories)",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "ID of the user that posted a story"
      },
      "story_id": {
        "type": "int",
        "doc": "Story ID"
      }
    }
  },
  "messageReplies": {
    "doc": "Info about [the comment section of a channel post, or a simple message thread](https://core.telegram.org/api/threads)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "comments": {
        "type": "flags.0?true",
        "doc": "Whether this constructor contains information about the [comment section of a channel post, or a simple message thread](https://core.telegram.org/api/threads)"
      },
      "replies": {
        "type": "int",
        "doc": "Contains the total number of replies in this thread or comment section."
      },
      "replies_pts": {
        "type": "int",
        "doc": "[PTS](https://core.telegram.org/api/updates) of the message that started this thread."
      },
      "recent_repliers": {
        "type": "flags.1?Vector<Peer>",
        "doc": "For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews."
      },
      "channel_id": {
        "type": "flags.0?long",
        "doc": "For channel post comments, contains the ID of the associated [discussion supergroup](https://core.telegram.org/api/discussion)"
      },
      "max_id": {
        "type": "flags.2?int",
        "doc": "ID of the latest message in this thread or comment section."
      },
      "read_max_id": {
        "type": "flags.3?int",
        "doc": "Contains the ID of the latest read message in this thread or comment section."
      }
    }
  },
  "peerBlocked": {
    "doc": "Information about a blocked peer",
    "parameters": {
      "peer_id": {
        "type": "Peer",
        "doc": "Peer ID"
      },
      "date": {
        "type": "int",
        "doc": "When was the peer blocked"
      }
    }
  },
  "stats.messageStats": {
    "doc": "Message statistics",
    "parameters": {
      "views_graph": {
        "type": "StatsGraph",
        "doc": "Message view graph"
      },
      "reactions_by_emotion_graph": {
        "type": "StatsGraph",
        "doc": "A graph containing the number of reactions on stories categorized by emotion"
      }
    }
  },
  "groupCallDiscarded": {
    "doc": "An ended group call",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Group call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Group call access hash"
      },
      "duration": {
        "type": "int",
        "doc": "Group call duration"
      }
    }
  },
  "groupCall": {
    "doc": "Info about a group call or livestream",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "join_muted": {
        "type": "flags.1?true",
        "doc": "Whether the user should be muted upon joining the call"
      },
      "can_change_join_muted": {
        "type": "flags.2?true",
        "doc": "Whether the current user can change the value of the `join_muted` flag using [phone.toggleGroupCallSettings](https://core.telegram.org/method/phone.toggleGroupCallSettings)"
      },
      "join_date_asc": {
        "type": "flags.6?true",
        "doc": "Specifies the ordering to use when locally sorting by date and displaying in the UI group call participants."
      },
      "schedule_start_subscribed": {
        "type": "flags.8?true",
        "doc": "Whether we subscribed to the scheduled call"
      },
      "can_start_video": {
        "type": "flags.9?true",
        "doc": "Whether you can start streaming video into the call"
      },
      "record_video_active": {
        "type": "flags.11?true",
        "doc": "Whether the group call is currently being recorded"
      },
      "rtmp_stream": {
        "type": "flags.12?true",
        "doc": "Whether RTMP streams are allowed"
      },
      "listeners_hidden": {
        "type": "flags.13?true",
        "doc": "Whether the listeners list is hidden and cannot be fetched using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). The `phone.groupParticipants.count` and `groupCall.participants_count` counters will still include listeners."
      },
      "id": {
        "type": "long",
        "doc": "Group call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Group call access hash"
      },
      "participants_count": {
        "type": "int",
        "doc": "Participant count"
      },
      "title": {
        "type": "flags.3?string",
        "doc": "Group call title"
      },
      "stream_dc_id": {
        "type": "flags.4?int",
        "doc": "DC ID to be used for livestream chunks"
      },
      "record_start_date": {
        "type": "flags.5?int",
        "doc": "When was the recording started"
      },
      "schedule_date": {
        "type": "flags.7?int",
        "doc": "When is the call scheduled to start"
      },
      "unmuted_video_count": {
        "type": "flags.10?int",
        "doc": "Number of people currently streaming video into the call"
      },
      "unmuted_video_limit": {
        "type": "int",
        "doc": "Maximum number of people allowed to stream video into the call"
      },
      "version": {
        "type": "int",
        "doc": "Version"
      }
    }
  },
  "inputGroupCall": {
    "doc": "Points to a specific group call",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Group call ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "Group call access hash"
      }
    }
  },
  "groupCallParticipant": {
    "doc": "Info about a group call participant",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "muted": {
        "type": "flags.0?true",
        "doc": "Whether the participant is muted"
      },
      "left": {
        "type": "flags.1?true",
        "doc": "Whether the participant has left"
      },
      "can_self_unmute": {
        "type": "flags.2?true",
        "doc": "Whether the participant can unmute themselves"
      },
      "just_joined": {
        "type": "flags.4?true",
        "doc": "Whether the participant has just joined"
      },
      "versioned": {
        "type": "flags.5?true",
        "doc": "If set, and [updateGroupCallParticipants](https://core.telegram.org/constructor/updateGroupCallParticipants).version < locally stored call.version, info about this participant should be ignored. If (...), and [updateGroupCallParticipants](https://core.telegram.org/constructor/updateGroupCallParticipants).version > call.version+1, the participant list should be refetched using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants)."
      },
      "min": {
        "type": "flags.8?true",
        "doc": "If not set, the `volume` and `muted_by_you` fields can be safely used to overwrite locally cached information; otherwise, `volume` will contain valid information only if `volume_by_admin` is set both in the cache and in the received constructor."
      },
      "muted_by_you": {
        "type": "flags.9?true",
        "doc": "Whether this participant was muted by the current user"
      },
      "volume_by_admin": {
        "type": "flags.10?true",
        "doc": "Whether our volume can only changed by an admin"
      },
      "self": {
        "type": "flags.12?true",
        "doc": "Whether this participant is the current user"
      },
      "video_joined": {
        "type": "flags.15?true",
        "doc": "Whether this participant is currently broadcasting video"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer information"
      },
      "date": {
        "type": "int",
        "doc": "When did this participant join the group call"
      },
      "active_date": {
        "type": "flags.3?int",
        "doc": "When was this participant last active in the group call"
      },
      "source": {
        "type": "int",
        "doc": "Source ID"
      },
      "volume": {
        "type": "flags.7?int",
        "doc": "Volume, if not set the volume is set to 100%."
      },
      "about": {
        "type": "flags.11?string",
        "doc": "Info about this participant"
      },
      "raise_hand_rating": {
        "type": "flags.13?long",
        "doc": "Specifies the UI visualization order of peers with raised hands: peers with a higher rating should be showed first in the list."
      },
      "video": {
        "type": "flags.6?GroupCallParticipantVideo",
        "doc": "Info about the video stream the participant is currently broadcasting"
      },
      "presentation": {
        "type": "flags.14?GroupCallParticipantVideo",
        "doc": "Info about the screen sharing stream the participant is currently broadcasting"
      }
    }
  },
  "phone.groupCall": {
    "doc": "Contains info about a group call, and partial info about its participants.",
    "parameters": {
      "call": {
        "type": "GroupCall",
        "doc": "Info about the group call"
      },
      "participants": {
        "type": "Vector<GroupCallParticipant>",
        "doc": "A partial list of participants."
      },
      "participants_next_offset": {
        "type": "string",
        "doc": "Next offset to use when fetching the remaining participants using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants)"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in the participants vector"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the participants vector"
      }
    }
  },
  "phone.groupParticipants": {
    "doc": "Info about the participants of a group call or livestream",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of participants"
      },
      "participants": {
        "type": "Vector<GroupCallParticipant>",
        "doc": "List of participants"
      },
      "next_offset": {
        "type": "string",
        "doc": "If not empty, the specified list of participants is partial, and more participants can be fetched specifying this parameter as `offset` in [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants)."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      },
      "version": {
        "type": "int",
        "doc": "Version info"
      }
    }
  },
  "inlineQueryPeerTypeSameBotPM": {
    "doc": "Peer type: private chat with the bot itself",
    "parameters": {}
  },
  "inlineQueryPeerTypePM": {
    "doc": "Peer type: private chat",
    "parameters": {}
  },
  "inlineQueryPeerTypeChat": {
    "doc": "Peer type: [chat](https://core.telegram.org/api/channel)",
    "parameters": {}
  },
  "inlineQueryPeerTypeMegagroup": {
    "doc": "Peer type: [supergroup](https://core.telegram.org/api/channel)",
    "parameters": {}
  },
  "inlineQueryPeerTypeBroadcast": {
    "doc": "Peer type: [channel](https://core.telegram.org/api/channel)",
    "parameters": {}
  },
  "inlineQueryPeerTypeBotPM": {
    "doc": "Peer type: private chat with a bot.",
    "parameters": {}
  },
  "messages.historyImport": {
    "doc": "ID of a specific [chat import session, click here for more info »](https://core.telegram.org/api/import).",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "[History import ID](https://core.telegram.org/api/import)"
      }
    }
  },
  "messages.historyImportParsed": {
    "doc": "Contains information about a chat export file [generated by a foreign chat app, click here for more info](https://core.telegram.org/api/import).  \nIf neither the `pm` or `group` flags are set, the specified chat export was generated from a chat of unknown type.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pm": {
        "type": "flags.0?true",
        "doc": "The chat export file was generated from a private chat."
      },
      "group": {
        "type": "flags.1?true",
        "doc": "The chat export file was generated from a group chat."
      },
      "title": {
        "type": "flags.2?string",
        "doc": "Title of the chat."
      }
    }
  },
  "messages.affectedFoundMessages": {
    "doc": "Messages found and affected by changes",
    "parameters": {
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      },
      "pts_count": {
        "type": "int",
        "doc": "[Number of events that were generated](https://core.telegram.org/api/updates)"
      },
      "offset": {
        "type": "int",
        "doc": "If bigger than zero, the request must be repeated to remove more messages"
      },
      "messages": {
        "type": "Vector<int>",
        "doc": "Affected message IDs"
      }
    }
  },
  "chatInviteImporter": {
    "doc": "When and which user joined the chat using a chat invite",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "requested": {
        "type": "flags.0?true",
        "doc": "Whether this user currently has a pending [join request »](https://core.telegram.org/api/invites#join-requests)"
      },
      "via_chatlist": {
        "type": "flags.3?true",
        "doc": "The participant joined by importing a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "user_id": {
        "type": "long",
        "doc": "The user"
      },
      "date": {
        "type": "int",
        "doc": "When did the user join"
      },
      "about": {
        "type": "flags.2?string",
        "doc": "For users with pending requests, contains bio of the user that requested to join"
      },
      "approved_by": {
        "type": "flags.1?long",
        "doc": "The administrator that approved the [join request »](https://core.telegram.org/api/invites#join-requests) of the user"
      }
    }
  },
  "messages.exportedChatInvites": {
    "doc": "Info about chat invites exported by a certain admin.",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of invites exported by the admin"
      },
      "invites": {
        "type": "Vector<ExportedChatInvite>",
        "doc": "Exported invites"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Info about the admin"
      }
    }
  },
  "messages.exportedChatInvite": {
    "doc": "Info about a chat invite",
    "parameters": {
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "Info about the chat invite"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.exportedChatInviteReplaced": {
    "doc": "The specified chat invite was replaced with another one",
    "parameters": {
      "invite": {
        "type": "ExportedChatInvite",
        "doc": "The replaced chat invite"
      },
      "new_invite": {
        "type": "ExportedChatInvite",
        "doc": "The invite that replaces the previous invite"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.chatInviteImporters": {
    "doc": "Info about the users that joined the chat using a specific chat invite",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of users that joined"
      },
      "importers": {
        "type": "Vector<ChatInviteImporter>",
        "doc": "The users that joined"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "The users that joined"
      }
    }
  },
  "chatAdminWithInvites": {
    "doc": "Info about chat invites generated by admins.",
    "parameters": {
      "admin_id": {
        "type": "long",
        "doc": "The admin"
      },
      "invites_count": {
        "type": "int",
        "doc": "Number of invites generated by the admin"
      },
      "revoked_invites_count": {
        "type": "int",
        "doc": "Number of revoked invites"
      }
    }
  },
  "messages.chatAdminsWithInvites": {
    "doc": "Info about chat invites generated by admins.",
    "parameters": {
      "admins": {
        "type": "Vector<ChatAdminWithInvites>",
        "doc": "Info about chat invites generated by admins."
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.checkedHistoryImportPeer": {
    "doc": "Contains a confirmation text to be shown to the user, upon [importing chat history, click here for more info »](https://core.telegram.org/api/import).",
    "parameters": {
      "confirm_text": {
        "type": "string",
        "doc": "A confirmation text to be shown to the user, upon [importing chat history »](https://core.telegram.org/api/import)."
      }
    }
  },
  "phone.joinAsPeers": {
    "doc": "A list of peers that can be used to join a group call, presenting yourself as a specific user/channel.",
    "parameters": {
      "peers": {
        "type": "Vector<Peer>",
        "doc": "Peers"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in the peers vector"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the peers vector"
      }
    }
  },
  "phone.exportedGroupCallInvite": {
    "doc": "An invite to a group call or livestream",
    "parameters": {
      "link": {
        "type": "string",
        "doc": "Invite link"
      }
    }
  },
  "groupCallParticipantVideoSourceGroup": {
    "doc": "Describes a group of video synchronization source identifiers",
    "parameters": {
      "semantics": {
        "type": "string",
        "doc": "SDP semantics"
      },
      "sources": {
        "type": "Vector<int>",
        "doc": "Source IDs"
      }
    }
  },
  "groupCallParticipantVideo": {
    "doc": "Info about a video stream",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "paused": {
        "type": "flags.0?true",
        "doc": "Whether the stream is currently paused"
      },
      "endpoint": {
        "type": "string",
        "doc": "Endpoint"
      },
      "source_groups": {
        "type": "Vector<GroupCallParticipantVideoSourceGroup>",
        "doc": "Source groups"
      },
      "audio_source": {
        "type": "flags.1?int",
        "doc": "Audio source ID"
      }
    }
  },
  "stickers.suggestedShortName": {
    "doc": "A suggested short name for a stickerpack",
    "parameters": {
      "short_name": {
        "type": "string",
        "doc": "Suggested short name"
      }
    }
  },
  "botCommandScopeDefault": {
    "doc": "The commands will be valid in all dialogs",
    "parameters": {}
  },
  "botCommandScopeUsers": {
    "doc": "The specified bot commands will only be valid in all private chats with users.",
    "parameters": {}
  },
  "botCommandScopeChats": {
    "doc": "The specified bot commands will be valid in all [groups and supergroups](https://core.telegram.org/api/channel).",
    "parameters": {}
  },
  "botCommandScopeChatAdmins": {
    "doc": "The specified bot commands will be valid only for chat administrators, in all [groups and supergroups](https://core.telegram.org/api/channel).",
    "parameters": {}
  },
  "botCommandScopePeer": {
    "doc": "The specified bot commands will be valid only in a specific dialog.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The dialog"
      }
    }
  },
  "botCommandScopePeerAdmins": {
    "doc": "The specified bot commands will be valid for all admins of the specified [group or supergroup](https://core.telegram.org/api/channel).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat"
      }
    }
  },
  "botCommandScopePeerUser": {
    "doc": "The specified bot commands will be valid only for a specific user in the specified [group or supergroup](https://core.telegram.org/api/channel).",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "The chat"
      },
      "user_id": {
        "type": "InputUser",
        "doc": "The user"
      }
    }
  },
  "account.resetPasswordFailedWait": {
    "doc": "You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset.",
    "parameters": {
      "retry_date": {
        "type": "int",
        "doc": "Wait until this date before requesting another reset."
      }
    }
  },
  "account.resetPasswordRequestedWait": {
    "doc": "You successfully requested a password reset, please wait until the specified date before finalizing the reset.",
    "parameters": {
      "until_date": {
        "type": "int",
        "doc": "Wait until this date before finalizing the reset."
      }
    }
  },
  "account.resetPasswordOk": {
    "doc": "The 2FA password was reset successfully.",
    "parameters": {}
  },
  "sponsoredMessage": {
    "doc": "A [sponsored message](https://core.telegram.org/api/sponsored-messages).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "recommended": {
        "type": "flags.5?true",
        "doc": "Whether the message needs to be labeled as \"recommended\" instead of \"sponsored\""
      },
      "show_peer_photo": {
        "type": "flags.6?true",
        "doc": "Whether a profile photo bubble should be displayed for this message, like for messages sent in groups. The photo shown in the bubble is obtained either from the peer contained in `from_id`, or from `chat_invite`."
      },
      "random_id": {
        "type": "bytes",
        "doc": "Message ID"
      },
      "from_id": {
        "type": "flags.3?Peer",
        "doc": "ID of the sender of the message"
      },
      "chat_invite": {
        "type": "flags.4?ChatInvite",
        "doc": "Information about the chat invite hash specified in `chat_invite_hash`"
      },
      "chat_invite_hash": {
        "type": "flags.4?string",
        "doc": "Chat invite"
      },
      "channel_post": {
        "type": "flags.2?int",
        "doc": "Optional link to a channel post if `from_id` points to a channel"
      },
      "start_param": {
        "type": "flags.0?string",
        "doc": "Parameter for the bot start message if the sponsored chat is a chat with a bot."
      },
      "webpage": {
        "type": "flags.9?SponsoredWebPage",
        "doc": "Sponsored website"
      },
      "app": {
        "type": "flags.10?BotApp",
        "doc": "[Mini App »](https://core.telegram.org/api/bots/webapps) to open when the sponsored message is clicked."
      },
      "message": {
        "type": "string",
        "doc": "Sponsored message"
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "button_text": {
        "type": "flags.11?string",
        "doc": "Text of the sponsored message button."
      },
      "sponsor_info": {
        "type": "flags.7?string",
        "doc": "If set, contains additional information about the sponsor to be shown along with the message."
      },
      "additional_info": {
        "type": "flags.8?string",
        "doc": "If set, contains additional information about the sponsored message to be shown along with the message."
      }
    }
  },
  "messages.sponsoredMessages": {
    "doc": "A set of sponsored messages associated to a channel",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "posts_between": {
        "type": "flags.0?int",
        "doc": "If set, specifies the minimum number of messages between shown sponsored messages; otherwise, only one sponsored message must be shown after all ordinary messages."
      },
      "messages": {
        "type": "Vector<SponsoredMessage>",
        "doc": "Sponsored messages"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in the sponsored messages"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the sponsored messages"
      }
    }
  },
  "messages.sponsoredMessagesEmpty": {
    "doc": "No sponsored messages are available.",
    "parameters": {}
  },
  "searchResultsCalendarPeriod": {
    "doc": "Information about found messages sent on a specific day, used to split the `messages` in [messages.searchResultsCalendar](https://core.telegram.org/constructor/messages.searchResultsCalendar) constructors by days.",
    "parameters": {
      "date": {
        "type": "int",
        "doc": "The day this object is referring to."
      },
      "min_msg_id": {
        "type": "int",
        "doc": "First message ID that was sent on this day."
      },
      "max_msg_id": {
        "type": "int",
        "doc": "Last message ID that was sent on this day."
      },
      "count": {
        "type": "int",
        "doc": "All messages that were sent on this day."
      }
    }
  },
  "messages.searchResultsCalendar": {
    "doc": "Information about found messages sent on a specific day",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inexact": {
        "type": "flags.0?true",
        "doc": "If set, indicates that the results may be inexact"
      },
      "count": {
        "type": "int",
        "doc": "Total number of results matching query"
      },
      "min_date": {
        "type": "int",
        "doc": "Starting timestamp of attached messages"
      },
      "min_msg_id": {
        "type": "int",
        "doc": "Ending timestamp of attached messages"
      },
      "offset_id_offset": {
        "type": "flags.1?int",
        "doc": "Indicates the absolute position of `messages[0]` within the total result set with count `count`.  \nThis is useful, for example, if we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`."
      },
      "periods": {
        "type": "Vector<SearchResultsCalendarPeriod>",
        "doc": "Used to split the `messages` by days: multiple [SearchResultsCalendarPeriod](https://core.telegram.org/type/SearchResultsCalendarPeriod) constructors are returned, each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.  \nThis information can be easily used to split the returned `messages` by day."
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "Messages"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "searchResultPosition": {
    "doc": "Information about a message in a specific position",
    "parameters": {
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "date": {
        "type": "int",
        "doc": "When was the message sent"
      },
      "offset": {
        "type": "int",
        "doc": "0-based message position in the full list of suitable messages"
      }
    }
  },
  "messages.searchResultsPositions": {
    "doc": "Information about sparse positions of messages",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of found messages"
      },
      "positions": {
        "type": "Vector<SearchResultsPosition>",
        "doc": "List of message positions"
      }
    }
  },
  "channels.sendAsPeers": {
    "doc": "A list of peers that can be used to send messages in a specific group",
    "parameters": {
      "peers": {
        "type": "Vector<SendAsPeer>",
        "doc": "Peers that can be used to send messages to the group"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "users.userFull": {
    "doc": "Full user information",
    "parameters": {
      "full_user": {
        "type": "UserFull",
        "doc": "Full user information"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.peerSettings": {
    "doc": "Peer settings",
    "parameters": {
      "settings": {
        "type": "PeerSettings",
        "doc": "Peer settings"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "auth.loggedOut": {
    "doc": "[Future auth token »](https://core.telegram.org/api/auth#future-auth-tokens) to be used on subsequent authorizations",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "future_auth_token": {
        "type": "flags.0?bytes",
        "doc": "[Future auth token »](https://core.telegram.org/api/auth#future-auth-tokens) to be used on subsequent authorizations"
      }
    }
  },
  "reactionCount": {
    "doc": "Reactions",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "chosen_order": {
        "type": "flags.0?int",
        "doc": "If set, indicates that the current user also sent this reaction.  \nThe integer value indicates when was the reaction added: the bigger the value, the newer the reaction."
      },
      "reaction": {
        "type": "Reaction",
        "doc": "The reaction."
      },
      "count": {
        "type": "int",
        "doc": "Number of users that reacted with this emoji."
      }
    }
  },
  "messageReactions": {
    "doc": "[Message reactions »](https://core.telegram.org/api/reactions)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "min": {
        "type": "flags.0?true",
        "doc": "Similar to [min](https://core.telegram.org/api/min) objects, used for [message reaction »](https://core.telegram.org/api/reactions) constructors that are the same for all users so they don't have the reactions sent by the current user (you can use [messages.getMessagesReactions](https://core.telegram.org/method/messages.getMessagesReactions) to get the full reaction info)."
      },
      "can_see_list": {
        "type": "flags.2?true",
        "doc": "Whether [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList) can be used to see how each specific peer reacted to the message"
      },
      "results": {
        "type": "Vector<ReactionCount>",
        "doc": "Reactions"
      },
      "recent_reactions": {
        "type": "flags.1?Vector<MessagePeerReaction>",
        "doc": "List of recent peers and their reactions"
      }
    }
  },
  "messages.messageReactionsList": {
    "doc": "List of peers that reacted to a specific message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of reactions matching query"
      },
      "reactions": {
        "type": "Vector<MessagePeerReaction>",
        "doc": "List of peers that reacted to a specific message"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      },
      "next_offset": {
        "type": "flags.0?string",
        "doc": "If set, indicates the next offset to use to load more results by invoking [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList)."
      }
    }
  },
  "availableReaction": {
    "doc": "Animations associated with a message reaction",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inactive": {
        "type": "flags.0?true",
        "doc": "If not set, the reaction can be added to new messages and enabled in chats."
      },
      "premium": {
        "type": "flags.2?true",
        "doc": "Whether this reaction can only be used by Telegram Premium users"
      },
      "reaction": {
        "type": "string",
        "doc": "Reaction emoji"
      },
      "title": {
        "type": "string",
        "doc": "Reaction description"
      },
      "static_icon": {
        "type": "Document",
        "doc": "Static icon for the reaction"
      },
      "appear_animation": {
        "type": "Document",
        "doc": "The animated sticker to show when the user opens the reaction dropdown"
      },
      "select_animation": {
        "type": "Document",
        "doc": "The animated sticker to show when the user hovers over the reaction"
      },
      "activate_animation": {
        "type": "Document",
        "doc": "The animated sticker to show when the reaction is chosen and activated"
      },
      "effect_animation": {
        "type": "Document",
        "doc": "The background effect (still an animated sticker) to play under the `activate_animation`, when the reaction is chosen and activated"
      },
      "around_animation": {
        "type": "flags.1?Document",
        "doc": "The animation that plays around the button when you press an existing reaction (played together with `center_icon`)."
      },
      "center_icon": {
        "type": "flags.1?Document",
        "doc": "The animation of the emoji inside the button when you press an existing reaction (played together with `around_animation`)."
      }
    }
  },
  "messages.availableReactionsNotModified": {
    "doc": "No new reactions are available",
    "parameters": {}
  },
  "messages.availableReactions": {
    "doc": "Animations and metadata associated with [message reactions »](https://core.telegram.org/api/reactions)",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "reactions": {
        "type": "Vector<AvailableReaction>",
        "doc": "Animations and metadata associated with [message reactions »](https://core.telegram.org/api/reactions)"
      }
    }
  },
  "messagePeerReaction": {
    "doc": "How a certain peer reacted to the message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "big": {
        "type": "flags.0?true",
        "doc": "Whether the specified [message reaction »](https://core.telegram.org/api/reactions) should elicit a bigger and longer reaction"
      },
      "unread": {
        "type": "flags.1?true",
        "doc": "Whether the reaction wasn't yet marked as read by the current user"
      },
      "my": {
        "type": "flags.2?true",
        "doc": "Starting from layer 159, [messages.sendReaction](https://core.telegram.org/method/messages.sendReaction) will send reactions from the peer (user or channel) specified using [messages.saveDefaultSendAs](https://core.telegram.org/method/messages.saveDefaultSendAs).  \nIf set, this flag indicates that this reaction was sent by us, even if the `peer` doesn't point to the current account."
      },
      "peer_id": {
        "type": "Peer",
        "doc": "Peer that reacted to the message"
      },
      "date": {
        "type": "int",
        "doc": "When was this reaction added"
      },
      "reaction": {
        "type": "Reaction",
        "doc": "Reaction emoji"
      }
    }
  },
  "groupCallStreamChannel": {
    "doc": "Info about an RTMP stream in a group call or livestream",
    "parameters": {
      "channel": {
        "type": "int",
        "doc": "Channel ID"
      },
      "scale": {
        "type": "int",
        "doc": "Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`."
      },
      "last_timestamp_ms": {
        "type": "long",
        "doc": "Last seen timestamp to easily start fetching livestream chunks using [inputGroupCallStream](https://core.telegram.org/constructor/inputGroupCallStream)"
      }
    }
  },
  "phone.groupCallStreamChannels": {
    "doc": "Info about RTMP streams in a group call or livestream",
    "parameters": {
      "channels": {
        "type": "Vector<GroupCallStreamChannel>",
        "doc": "RTMP streams"
      }
    }
  },
  "phone.groupCallStreamRtmpUrl": {
    "doc": "RTMP URL and stream key to be used in streaming software",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "RTMP URL"
      },
      "key": {
        "type": "string",
        "doc": "Stream key"
      }
    }
  },
  "attachMenuBotIconColor": {
    "doc": "Represents an attachment menu icon color for [bot mini apps »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "name": {
        "type": "string",
        "doc": "One of the following values:  \n`light_icon` - Color of the attachment menu icon (light mode)  \n`light_text` - Color of the attachment menu label, once selected (light mode)  \n`dark_icon` - Color of the attachment menu icon (dark mode)  \n`dark_text` - Color of the attachment menu label, once selected (dark mode)"
      },
      "color": {
        "type": "int",
        "doc": "Color in RGB24 format"
      }
    }
  },
  "attachMenuBotIcon": {
    "doc": "Represents an attachment menu icon for [bot mini apps »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "name": {
        "type": "string",
        "doc": "One of the following values: note that animated icons must be played when the user clicks on the button, activating the bot mini app.  \n  \n`default_static` - Default attachment menu icon in SVG format  \n`placeholder_static` - Default placeholder for opened Web Apps in SVG format  \n`ios_static` - Attachment menu icon in SVG format for the official iOS app  \n`ios_animated` - Animated attachment menu icon in TGS format for the official iOS app  \n`android_animated` - Animated attachment menu icon in TGS format for the official Android app  \n`macos_animated` - Animated attachment menu icon in TGS format for the official native Mac OS app  \n`ios_side_menu_static` - Side menu icon in PNG format for the official iOS app  \n`android_side_menu_static` - Side menu icon in SVG format for the official android app  \n`macos_side_menu_static` - Side menu icon in PNG format for the official native Mac OS app"
      },
      "icon": {
        "type": "Document",
        "doc": "The actual icon file."
      },
      "colors": {
        "type": "flags.0?Vector<AttachMenuBotIconColor>",
        "doc": "Attachment menu icon colors."
      }
    }
  },
  "attachMenuBot": {
    "doc": "Represents a [bot mini app that can be launched from the attachment/side menu »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inactive": {
        "type": "flags.0?true",
        "doc": "If set, before launching the mini app the client should ask the user to add the mini app to the attachment/side menu, and only if the user accepts, after invoking [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) the app should be opened."
      },
      "has_settings": {
        "type": "flags.1?true",
        "doc": "Deprecated flag, can be ignored."
      },
      "request_write_access": {
        "type": "flags.2?true",
        "doc": "Whether the bot would like to send messages to the user."
      },
      "show_in_attach_menu": {
        "type": "flags.3?true",
        "doc": "Whether, when installed, an attachment menu entry should be shown for the Mini App."
      },
      "show_in_side_menu": {
        "type": "flags.4?true",
        "doc": "Whether, when installed, an entry in the main view side menu should be shown for the Mini App."
      },
      "side_menu_disclaimer_needed": {
        "type": "flags.5?true",
        "doc": "If `inactive` if set and the user hasn't previously accepted the third-party mini apps [Terms of Service](https://telegram.org/tos/mini-apps) for this bot, when showing the mini app installation prompt, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown."
      },
      "bot_id": {
        "type": "long",
        "doc": "Bot ID"
      },
      "short_name": {
        "type": "string",
        "doc": "Attachment menu item name"
      },
      "peer_types": {
        "type": "flags.3?Vector<AttachMenuPeerType>",
        "doc": "List of dialog types where this attachment menu entry should be shown"
      },
      "icons": {
        "type": "Vector<AttachMenuBotIcon>",
        "doc": "List of platform-specific static icons and animations to use for the attachment menu button"
      }
    }
  },
  "attachMenuBotsNotModified": {
    "doc": "The list of bot mini apps hasn't changed",
    "parameters": {}
  },
  "attachMenuBots": {
    "doc": "Represents a list of [bot mini apps that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "bots": {
        "type": "Vector<AttachMenuBot>",
        "doc": "List of [bot mini apps that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach)"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Info about related users/bots"
      }
    }
  },
  "attachMenuBotsBot": {
    "doc": "Represents a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach)",
    "parameters": {
      "bot": {
        "type": "AttachMenuBot",
        "doc": "Represents a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach)"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Info about related users and bots"
      }
    }
  },
  "webViewResultUrl": {
    "doc": "Contains the webview URL with appropriate theme and user info parameters added",
    "parameters": {
      "query_id": {
        "type": "long",
        "doc": "Webview session ID"
      },
      "url": {
        "type": "string",
        "doc": "Webview URL to open"
      }
    }
  },
  "simpleWebViewResultUrl": {
    "doc": "Contains the webview URL with appropriate theme parameters added",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "URL"
      }
    }
  },
  "webViewMessageSent": {
    "doc": "Info about a sent inline webview message",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "msg_id": {
        "type": "flags.0?InputBotInlineMessageID",
        "doc": "Message ID"
      }
    }
  },
  "botMenuButtonDefault": {
    "doc": "Placeholder [bot menu button](https://core.telegram.org/api/bots/menu) never returned to users: see [the docs for more info](https://core.telegram.org/api/bots/menu).",
    "parameters": {}
  },
  "botMenuButtonCommands": {
    "doc": "[Bot menu button](https://core.telegram.org/api/bots/menu) that opens the bot command list when clicked.",
    "parameters": {}
  },
  "botMenuButton": {
    "doc": "[Bot menu button](https://core.telegram.org/api/bots/menu) that opens a [web app](https://core.telegram.org/api/bots/webapps) when clicked.",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Title to be displayed on the menu button instead of 'Menu'"
      },
      "url": {
        "type": "string",
        "doc": "URL of a [web app](https://core.telegram.org/api/bots/webapps) to open when the user clicks on the button"
      }
    }
  },
  "account.savedRingtonesNotModified": {
    "doc": "The notification sound list hasn't changed.",
    "parameters": {}
  },
  "account.savedRingtones": {
    "doc": "A list of saved notification sounds",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "ringtones": {
        "type": "Vector<Document>",
        "doc": "Saved notification sounds"
      }
    }
  },
  "notificationSoundDefault": {
    "doc": "Indicates the default notification sound should be used",
    "parameters": {}
  },
  "notificationSoundNone": {
    "doc": "No notification sound should be used",
    "parameters": {}
  },
  "notificationSoundLocal": {
    "doc": "Indicates a specific local notification sound should be used",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "Notification sound title"
      },
      "data": {
        "type": "string",
        "doc": "Notification sound identifier (arbitrary data used by the client to identify a specific local notification sound)"
      }
    }
  },
  "notificationSoundRingtone": {
    "doc": "A specific previously uploaded notification sound should be used",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Document ID of notification sound uploaded using [account.uploadRingtone](https://core.telegram.org/method/account.uploadRingtone)"
      }
    }
  },
  "account.savedRingtone": {
    "doc": "The notification sound was already in MP3 format and was saved without any modification",
    "parameters": {}
  },
  "account.savedRingtoneConverted": {
    "doc": "The notification sound was not in MP3 format and was successfully converted and saved, use the returned [Document](https://core.telegram.org/type/Document) to refer to the notification sound from now on",
    "parameters": {
      "document": {
        "type": "Document",
        "doc": "The converted notification sound"
      }
    }
  },
  "attachMenuPeerTypeSameBotPM": {
    "doc": "The bot attachment menu entry is available in the chat with the bot that offers it",
    "parameters": {}
  },
  "attachMenuPeerTypeBotPM": {
    "doc": "The bot attachment menu entry is available in private chats with other bots (excluding the bot that offers the current attachment menu)",
    "parameters": {}
  },
  "attachMenuPeerTypePM": {
    "doc": "The bot attachment menu entry is available in private chats with other users (not bots)",
    "parameters": {}
  },
  "attachMenuPeerTypeChat": {
    "doc": "The bot attachment menu entry is available in [groups and supergroups](https://core.telegram.org/api/channel)",
    "parameters": {}
  },
  "attachMenuPeerTypeBroadcast": {
    "doc": "The bot attachment menu entry is available in channels",
    "parameters": {}
  },
  "inputInvoiceMessage": {
    "doc": "An invoice contained in a [messageMediaInvoice](https://core.telegram.org/constructor/messageMediaInvoice) message.",
    "parameters": {
      "peer": {
        "type": "InputPeer",
        "doc": "Chat where the invoice was sent"
      },
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      }
    }
  },
  "inputInvoiceSlug": {
    "doc": "An invoice slug taken from an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or from the [`premium_invoice_slug` app config parameter »](https://core.telegram.org/api/config#premium-invoice-slug)",
    "parameters": {
      "slug": {
        "type": "string",
        "doc": "The invoice slug"
      }
    }
  },
  "inputInvoicePremiumGiftCode": {
    "doc": "Used if the user wishes to start a channel [giveaway](https://core.telegram.org/api/giveaways) or send some [giftcodes](https://core.telegram.org/api/giveaways) to members of a channel, in exchange for [boosts](https://core.telegram.org/api/boost).",
    "parameters": {
      "purpose": {
        "type": "InputStorePaymentPurpose",
        "doc": "Should be populated with [inputStorePaymentPremiumGiveaway](https://core.telegram.org/constructor/inputStorePaymentPremiumGiveaway) for [giveaways](https://core.telegram.org/api/giveaways) and [inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode) for [gifts](https://core.telegram.org/api/giveaways)."
      },
      "option": {
        "type": "PremiumGiftCodeOption",
        "doc": "Should be populated with one of the giveaway options returned by [payments.getPremiumGiftCodeOptions](https://core.telegram.org/method/payments.getPremiumGiftCodeOptions), see the [giveaways »](https://core.telegram.org/api/giveaways) documentation for more info."
      }
    }
  },
  "payments.exportedInvoice": {
    "doc": "Exported [invoice deep link](https://core.telegram.org/api/links#invoice-links)",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "Exported [invoice deep link](https://core.telegram.org/api/links#invoice-links)"
      }
    }
  },
  "messages.transcribedAudio": {
    "doc": "[Transcribed text from a voice message »](https://core.telegram.org/api/transcribe)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pending": {
        "type": "flags.0?true",
        "doc": "Whether the transcription is partial because audio transcription is still in progress, if set the user may receive further [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) updates with the updated transcription."
      },
      "transcription_id": {
        "type": "long",
        "doc": "Transcription ID"
      },
      "text": {
        "type": "string",
        "doc": "Transcripted text"
      },
      "trial_remains_num": {
        "type": "flags.1?int",
        "doc": "For non-[Premium](https://core.telegram.org/api/premium) users, this flag will be set, indicating the remaining transcriptions in the free trial period."
      },
      "trial_remains_until_date": {
        "type": "flags.1?int",
        "doc": "For non-[Premium](https://core.telegram.org/api/premium) users, this flag will be set, indicating the date when the `trial_remains_num` counter will be reset to the maximum value of [transcribe\\_audio\\_trial\\_weekly\\_number](https://core.telegram.org/api/config#transcribe-audio-trial-weekly-number)."
      }
    }
  },
  "help.premiumPromo": {
    "doc": "Telegram Premium promotion information",
    "parameters": {
      "status_text": {
        "type": "string",
        "doc": "Description of the current state of the user's Telegram Premium subscription"
      },
      "status_entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "video_sections": {
        "type": "Vector<string>",
        "doc": "A list of [premium feature identifiers »](https://core.telegram.org/api/premium), associated to each video"
      },
      "videos": {
        "type": "Vector<Document>",
        "doc": "A list of videos"
      },
      "period_options": {
        "type": "Vector<PremiumSubscriptionOption>",
        "doc": "Telegram Premium subscription options"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Related user information"
      }
    }
  },
  "inputStorePaymentPremiumSubscription": {
    "doc": "Info about a Telegram Premium purchase",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "restore": {
        "type": "flags.0?true",
        "doc": "Pass true if this is a restore of a Telegram Premium purchase; only for the App Store"
      },
      "upgrade": {
        "type": "flags.1?true",
        "doc": "Pass true if this is an upgrade from a monthly subscription to a yearly subscription; only for App Store"
      }
    }
  },
  "inputStorePaymentGiftPremium": {
    "doc": "Info about a gifted Telegram Premium purchase",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "The user to which the Telegram Premium subscription was gifted"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "inputStorePaymentPremiumGiftCode": {
    "doc": "Used to gift [Telegram Premium](https://core.telegram.org/api/premium) subscriptions only to some specific subscribers of a channel or to some of our contacts, see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways and gifts.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "users": {
        "type": "Vector<InputUser>",
        "doc": "The users that will receive the [Telegram Premium](https://core.telegram.org/api/premium) subscriptions."
      },
      "boost_peer": {
        "type": "flags.0?InputPeer",
        "doc": "If set, the gifts will be sent on behalf of a channel we are an admin of, which will also assign some [boosts](https://core.telegram.org/api/boost) to it. Otherwise, the gift will be sent directly from the currently logged in users, and we will gain some extra [boost slots](https://core.telegram.org/api/boost). See [here »](https://core.telegram.org/api/giveaways) for more info on giveaways and gifts."
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "inputStorePaymentPremiumGiveaway": {
    "doc": "Used to pay for a [giveaway, see here »](https://core.telegram.org/api/giveaways) for more info.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "only_new_subscribers": {
        "type": "flags.0?true",
        "doc": "If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway."
      },
      "winners_are_visible": {
        "type": "flags.3?true",
        "doc": "If set, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel once the giveaway ends."
      },
      "boost_peer": {
        "type": "InputPeer",
        "doc": "The channel starting the giveaway, that the user must join to participate, that will receive the giveaway [boosts](https://core.telegram.org/api/boost); see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways."
      },
      "additional_peers": {
        "type": "flags.1?Vector<InputPeer>",
        "doc": "Additional channels that the user must join to participate to the giveaway can be specified here."
      },
      "countries_iso2": {
        "type": "flags.2?Vector<string>",
        "doc": "The set of users that can participate to the giveaway can be restricted by passing here an explicit whitelist of up to [giveaway\\_countries\\_max](https://core.telegram.org/api/config#giveaway-countries-max) countries, specified as two-letter ISO 3166-1 alpha-2 country codes."
      },
      "prize_description": {
        "type": "flags.4?string",
        "doc": "Can contain a textual description of additional giveaway prizes."
      },
      "random_id": {
        "type": "long",
        "doc": "Random ID to avoid resending the giveaway"
      },
      "until_date": {
        "type": "int",
        "doc": "The end date of the giveaway, must be at most [giveaway\\_period\\_max](https://core.telegram.org/api/config#giveaway-period-max) seconds in the future; see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways."
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "premiumGiftOption": {
    "doc": "Telegram Premium gift option",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "months": {
        "type": "int",
        "doc": "Duration of gifted Telegram Premium subscription"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "bot_url": {
        "type": "string",
        "doc": "An [invoice deep link »](https://core.telegram.org/api/links#invoice-links) to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available."
      },
      "store_product": {
        "type": "flags.0?string",
        "doc": "An identifier for the App Store/Play Store product associated with the Premium gift."
      }
    }
  },
  "paymentFormMethod": {
    "doc": "Represents an additional payment method",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "URL to open in a webview to process the payment"
      },
      "title": {
        "type": "string",
        "doc": "Payment method description"
      }
    }
  },
  "emojiStatusEmpty": {
    "doc": "No emoji status is set",
    "parameters": {}
  },
  "emojiStatus": {
    "doc": "An [emoji status](https://core.telegram.org/api/emoji-status)",
    "parameters": {
      "document_id": {
        "type": "long",
        "doc": "[Custom emoji document ID](https://core.telegram.org/api/custom-emoji)"
      }
    }
  },
  "emojiStatusUntil": {
    "doc": "An [emoji status](https://core.telegram.org/api/emoji-status) valid until the specified date",
    "parameters": {
      "document_id": {
        "type": "long",
        "doc": "[Custom emoji document ID](https://core.telegram.org/api/custom-emoji)"
      },
      "until": {
        "type": "int",
        "doc": "This status is valid until this date"
      }
    }
  },
  "account.emojiStatusesNotModified": {
    "doc": "The server-side list of [emoji statuses](https://core.telegram.org/api/emoji-status) hasn't changed",
    "parameters": {}
  },
  "account.emojiStatuses": {
    "doc": "A list of [emoji statuses](https://core.telegram.org/api/emoji-status)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "statuses": {
        "type": "Vector<EmojiStatus>",
        "doc": "[Emoji statuses](https://core.telegram.org/api/emoji-status)"
      }
    }
  },
  "reactionEmpty": {
    "doc": "No reaction",
    "parameters": {}
  },
  "reactionEmoji": {
    "doc": "Normal emoji message reaction",
    "parameters": {
      "emoticon": {
        "type": "string",
        "doc": "Emoji"
      }
    }
  },
  "reactionCustomEmoji": {
    "doc": "[Custom emoji](https://core.telegram.org/api/custom-emoji) message reaction",
    "parameters": {
      "document_id": {
        "type": "long",
        "doc": "[Custom emoji document ID](https://core.telegram.org/api/custom-emoji)"
      }
    }
  },
  "chatReactionsNone": {
    "doc": "No reactions are allowed",
    "parameters": {}
  },
  "chatReactionsAll": {
    "doc": "All reactions or all non-custom reactions are allowed",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "allow_custom": {
        "type": "flags.0?true",
        "doc": "Whether to allow custom reactions"
      }
    }
  },
  "chatReactionsSome": {
    "doc": "Some reactions are allowed",
    "parameters": {
      "reactions": {
        "type": "Vector<Reaction>",
        "doc": "Allowed set of reactions: the [reactions\\_in\\_chat\\_max](https://core.telegram.org/api/config#reactions-in-chat-max) configuration field indicates the maximum number of reactions that can be specified in this field."
      }
    }
  },
  "messages.reactionsNotModified": {
    "doc": "The server-side list of [message reactions](https://core.telegram.org/api/reactions) hasn't changed",
    "parameters": {}
  },
  "messages.reactions": {
    "doc": "List of [message reactions](https://core.telegram.org/api/reactions)",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "reactions": {
        "type": "Vector<Reaction>",
        "doc": "Reactions"
      }
    }
  },
  "emailVerifyPurposeLoginSetup": {
    "doc": "Email verification purpose: setup login email",
    "parameters": {
      "phone_number": {
        "type": "string",
        "doc": "Phone number"
      },
      "phone_code_hash": {
        "type": "string",
        "doc": "Phone code hash as specified by the [documentation](https://core.telegram.org/api/auth#email-verification)"
      }
    }
  },
  "emailVerifyPurposeLoginChange": {
    "doc": "Email verification purpose: change login email",
    "parameters": {}
  },
  "emailVerifyPurposePassport": {
    "doc": "Verify an email for use in [telegram passport](https://core.telegram.org/api/passport)",
    "parameters": {}
  },
  "emailVerificationCode": {
    "doc": "Email verification code",
    "parameters": {
      "code": {
        "type": "string",
        "doc": "Received verification code"
      }
    }
  },
  "emailVerificationGoogle": {
    "doc": "Google ID email verification token",
    "parameters": {
      "token": {
        "type": "string",
        "doc": "Token"
      }
    }
  },
  "emailVerificationApple": {
    "doc": "Apple ID email verification token",
    "parameters": {
      "token": {
        "type": "string",
        "doc": "Token"
      }
    }
  },
  "account.emailVerified": {
    "doc": "The email was verified correctly.",
    "parameters": {
      "email": {
        "type": "string",
        "doc": "The verified email address."
      }
    }
  },
  "account.emailVerifiedLogin": {
    "doc": "The email was verified correctly, and a login code was just sent to it.",
    "parameters": {
      "email": {
        "type": "string",
        "doc": "The verified email address."
      },
      "sent_code": {
        "type": "auth.SentCode",
        "doc": "Info about the sent [login code](https://core.telegram.org/api/auth)"
      }
    }
  },
  "premiumSubscriptionOption": {
    "doc": "Describes a Telegram Premium subscription option",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "current": {
        "type": "flags.1?true",
        "doc": "Whether this subscription option is currently in use."
      },
      "can_purchase_upgrade": {
        "type": "flags.2?true",
        "doc": "Whether this subscription option can be used to upgrade the existing Telegram Premium subscription. When upgrading Telegram Premium subscriptions bought through stores, make sure that the store transaction ID is equal to `transaction`, to avoid upgrading someone else's account, if the client is currently logged into multiple accounts."
      },
      "transaction": {
        "type": "flags.3?string",
        "doc": "Identifier of the last in-store transaction for the currently used subscription on the current account."
      },
      "months": {
        "type": "int",
        "doc": "Duration of subscription in months"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      },
      "bot_url": {
        "type": "string",
        "doc": "[Deep link](https://core.telegram.org/api/links) used to initiate payment"
      },
      "store_product": {
        "type": "flags.0?string",
        "doc": "Store product ID, only for official apps"
      }
    }
  },
  "sendAsPeer": {
    "doc": "Indicates a peer that can be used to send messages",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "premium_required": {
        "type": "flags.0?true",
        "doc": "Whether a Telegram Premium account is required to send messages as this peer"
      },
      "peer": {
        "type": "Peer",
        "doc": "Peer"
      }
    }
  },
  "messageExtendedMediaPreview": {
    "doc": "Extended media preview",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "w": {
        "type": "flags.0?int",
        "doc": "Width"
      },
      "h": {
        "type": "flags.0?int",
        "doc": "Height"
      },
      "thumb": {
        "type": "flags.1?PhotoSize",
        "doc": "Thumbnail"
      },
      "video_duration": {
        "type": "flags.2?int",
        "doc": "Video duration"
      }
    }
  },
  "messageExtendedMedia": {
    "doc": "Extended media",
    "parameters": {
      "media": {
        "type": "MessageMedia",
        "doc": "Media"
      }
    }
  },
  "stickerKeyword": {
    "doc": "Keywords for a certain sticker",
    "parameters": {
      "document_id": {
        "type": "long",
        "doc": "Sticker ID"
      },
      "keyword": {
        "type": "Vector<string>",
        "doc": "Keywords"
      }
    }
  },
  "username": {
    "doc": "Contains information about a username.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "editable": {
        "type": "flags.0?true",
        "doc": "Whether the username is editable, meaning it wasn't bought on [fragment](https://fragment.com)."
      },
      "active": {
        "type": "flags.1?true",
        "doc": "Whether the username is active."
      },
      "username": {
        "type": "string",
        "doc": "The username."
      }
    }
  },
  "forumTopicDeleted": {
    "doc": "Represents a deleted forum topic.",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "The ID of the deleted forum topic."
      }
    }
  },
  "forumTopic": {
    "doc": "Represents a [forum topic](https://core.telegram.org/api/forum#forum-topics).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "my": {
        "type": "flags.1?true",
        "doc": "Whether the topic was created by the current user"
      },
      "closed": {
        "type": "flags.2?true",
        "doc": "Whether the topic is closed (no messages can be sent to it)"
      },
      "pinned": {
        "type": "flags.3?true",
        "doc": "Whether the topic is pinned"
      },
      "short": {
        "type": "flags.5?true",
        "doc": "Whether this constructor is a reduced version of the full topic information.  \nIf set, only the `my`, `closed`, `id`, `date`, `title`, `icon_color`, `icon_emoji_id` and `from_id` parameters will contain valid information.  \nReduced info is usually only returned in topic-related [admin log events »](https://core.telegram.org/api/recent-actions) and in the [messages.channelMessages](https://core.telegram.org/constructor/messages.channelMessages) constructor: if needed, full information can be fetched using [channels.getForumTopicsByID](https://core.telegram.org/method/channels.getForumTopicsByID)."
      },
      "hidden": {
        "type": "flags.6?true",
        "doc": "Whether the topic is hidden (only valid for the \"General\" topic, `id=1`)"
      },
      "id": {
        "type": "int",
        "doc": "[Topic ID](https://core.telegram.org/api/forum#forum-topics)"
      },
      "date": {
        "type": "int",
        "doc": "Topic creation date"
      },
      "title": {
        "type": "string",
        "doc": "Topic title"
      },
      "icon_color": {
        "type": "int",
        "doc": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`."
      },
      "icon_emoji_id": {
        "type": "flags.0?long",
        "doc": "ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon."
      },
      "top_message": {
        "type": "int",
        "doc": "ID of the last message that was sent to this topic"
      },
      "read_inbox_max_id": {
        "type": "int",
        "doc": "Position up to which all incoming messages are read."
      },
      "read_outbox_max_id": {
        "type": "int",
        "doc": "Position up to which all outgoing messages are read."
      },
      "unread_count": {
        "type": "int",
        "doc": "Number of unread messages"
      },
      "unread_mentions_count": {
        "type": "int",
        "doc": "Number of [unread mentions](https://core.telegram.org/api/mentions)"
      },
      "unread_reactions_count": {
        "type": "int",
        "doc": "Number of unread reactions to messages you sent"
      },
      "from_id": {
        "type": "Peer",
        "doc": "ID of the peer that created the topic"
      },
      "notify_settings": {
        "type": "PeerNotifySettings",
        "doc": "Notification settings"
      },
      "draft": {
        "type": "flags.4?DraftMessage",
        "doc": "Message [draft](https://core.telegram.org/api/drafts)"
      }
    }
  },
  "messages.forumTopics": {
    "doc": "Contains information about multiple [forum topics](https://core.telegram.org/api/forum#forum-topics)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "order_by_create_date": {
        "type": "flags.0?true",
        "doc": "Whether the returned topics are ordered by creation date; if set, pagination by `offset_date` should use [forumTopic](https://core.telegram.org/constructor/forumTopic).`date`; otherwise topics are ordered by the last message date, so paginate by the `date` of the [message](https://core.telegram.org/type/Message) referenced by [forumTopic](https://core.telegram.org/constructor/forumTopic).`top_message`."
      },
      "count": {
        "type": "int",
        "doc": "Total number of topics matching query; may be more than the topics contained in `topics`, in which case [pagination](https://core.telegram.org/api/offsets) is required."
      },
      "topics": {
        "type": "Vector<ForumTopic>",
        "doc": "Forum topics"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "Related messages (contains the messages mentioned by [forumTopic](https://core.telegram.org/constructor/forumTopic).`top_message`)."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Related chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Related users"
      },
      "pts": {
        "type": "int",
        "doc": "[Event count after generation](https://core.telegram.org/api/updates)"
      }
    }
  },
  "defaultHistoryTTL": {
    "doc": "Contains info about the default value of the Time-To-Live setting, applied to all new chats.",
    "parameters": {
      "period": {
        "type": "int",
        "doc": "Time-To-Live setting applied to all new chats."
      }
    }
  },
  "exportedContactToken": {
    "doc": "Describes a [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links).",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "The [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links)."
      },
      "expires": {
        "type": "int",
        "doc": "Its expiration date"
      }
    }
  },
  "requestPeerTypeUser": {
    "doc": "Choose a user.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "bot": {
        "type": "flags.0?Bool",
        "doc": "Whether to allow choosing only bots."
      },
      "premium": {
        "type": "flags.1?Bool",
        "doc": "Whether to allow choosing only [Premium](https://core.telegram.org/api/premium) users."
      }
    }
  },
  "requestPeerTypeChat": {
    "doc": "Choose a chat or supergroup",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "creator": {
        "type": "flags.0?true",
        "doc": "Whether to allow only choosing chats or supergroups that were created by the current user."
      },
      "bot_participant": {
        "type": "flags.5?true",
        "doc": "Whether to allow only choosing chats or supergroups where the bot is a participant."
      },
      "has_username": {
        "type": "flags.3?Bool",
        "doc": "If specified, allows only choosing channels with or without a username, according to the value of [Bool](https://core.telegram.org/type/Bool)."
      },
      "forum": {
        "type": "flags.4?Bool",
        "doc": "If specified, allows only choosing chats or supergroups that are or aren't [forums](https://core.telegram.org/api/forum), according to the value of [Bool](https://core.telegram.org/type/Bool)."
      },
      "user_admin_rights": {
        "type": "flags.1?ChatAdminRights",
        "doc": "If specified, allows only choosing chats or supergroups where the current user is an admin with at least the specified admin rights."
      },
      "bot_admin_rights": {
        "type": "flags.2?ChatAdminRights",
        "doc": "If specified, allows only choosing chats or supergroups where the bot is an admin with at least the specified admin rights."
      }
    }
  },
  "requestPeerTypeBroadcast": {
    "doc": "Choose a channel",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "creator": {
        "type": "flags.0?true",
        "doc": "Whether to allow only choosing channels that were created by the current user."
      },
      "has_username": {
        "type": "flags.3?Bool",
        "doc": "If specified, allows only choosing channels with or without a username, according to the value of [Bool](https://core.telegram.org/type/Bool)."
      },
      "user_admin_rights": {
        "type": "flags.1?ChatAdminRights",
        "doc": "If specified, allows only choosing channels where the current user is an admin with at least the specified admin rights."
      },
      "bot_admin_rights": {
        "type": "flags.2?ChatAdminRights",
        "doc": "If specified, allows only choosing channels where the bot is an admin with at least the specified admin rights."
      }
    }
  },
  "emojiListNotModified": {
    "doc": "The list of [custom emojis](https://core.telegram.org/api/custom-emoji) hasn't changed.",
    "parameters": {}
  },
  "emojiList": {
    "doc": "Represents a list of [custom emojis](https://core.telegram.org/api/custom-emoji).",
    "parameters": {
      "hash": {
        "type": "long",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "document_id": {
        "type": "Vector<long>",
        "doc": "Custom emoji IDs"
      }
    }
  },
  "emojiGroup": {
    "doc": "Represents an [emoji category](https://core.telegram.org/api/custom-emoji#emoji-categories).",
    "parameters": {
      "title": {
        "type": "string",
        "doc": "Category name, i.e. \"Animals\", \"Flags\", \"Faces\" and so on..."
      },
      "icon_emoji_id": {
        "type": "long",
        "doc": "A single custom emoji used as preview for the category."
      },
      "emoticons": {
        "type": "Vector<string>",
        "doc": "A list of UTF-8 emojis, matching the category."
      }
    }
  },
  "messages.emojiGroupsNotModified": {
    "doc": "The list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories) hasn't changed.",
    "parameters": {}
  },
  "messages.emojiGroups": {
    "doc": "Represents a list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories).",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "groups": {
        "type": "Vector<EmojiGroup>",
        "doc": "A list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories)."
      }
    }
  },
  "textWithEntities": {
    "doc": "Styled text with [message entities](https://core.telegram.org/api/entities)",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Text"
      },
      "entities": {
        "type": "Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      }
    }
  },
  "messages.translateResult": {
    "doc": "Translated text with [entities](https://core.telegram.org/api/entities)",
    "parameters": {
      "result": {
        "type": "Vector<TextWithEntities>",
        "doc": "Text+[entities](https://core.telegram.org/api/entities), for each input message."
      }
    }
  },
  "autoSaveSettings": {
    "doc": "Media autosave settings",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "photos": {
        "type": "flags.0?true",
        "doc": "Whether photos should be autosaved to the gallery."
      },
      "videos": {
        "type": "flags.1?true",
        "doc": "Whether videos should be autosaved to the gallery."
      },
      "video_max_size": {
        "type": "flags.2?long",
        "doc": "If set, specifies a size limit for autosavable videos"
      }
    }
  },
  "autoSaveException": {
    "doc": "Peer-specific media autosave settings",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer"
      },
      "settings": {
        "type": "AutoSaveSettings",
        "doc": "Media autosave settings"
      }
    }
  },
  "account.autoSaveSettings": {
    "doc": "Contains media autosave settings",
    "parameters": {
      "users_settings": {
        "type": "AutoSaveSettings",
        "doc": "Default media autosave settings for private chats"
      },
      "chats_settings": {
        "type": "AutoSaveSettings",
        "doc": "Default media autosave settings for [groups and supergroups](https://core.telegram.org/api/channel)"
      },
      "broadcasts_settings": {
        "type": "AutoSaveSettings",
        "doc": "Default media autosave settings for [channels](https://core.telegram.org/api/channel)"
      },
      "exceptions": {
        "type": "Vector<AutoSaveException>",
        "doc": "Peer-specific granular autosave settings"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in the peer-specific granular autosave settings"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the peer-specific granular autosave settings"
      }
    }
  },
  "help.appConfigNotModified": {
    "doc": "The client configuration parameters haven't changed",
    "parameters": {}
  },
  "help.appConfig": {
    "doc": "Contains various [client configuration parameters](https://core.telegram.org/api/config#client-configuration)",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "config": {
        "type": "JSONValue",
        "doc": "[Client configuration parameters](https://core.telegram.org/api/config#client-configuration)"
      }
    }
  },
  "inputBotAppID": {
    "doc": "Used to fetch information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) by its ID",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "[direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) ID."
      },
      "access_hash": {
        "type": "long",
        "doc": "Access hash, obtained from the [botApp](https://core.telegram.org/constructor/botApp) constructor."
      }
    }
  },
  "inputBotAppShortName": {
    "doc": "Used to fetch information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) by its short name",
    "parameters": {
      "bot_id": {
        "type": "InputUser",
        "doc": "ID of the bot that owns the bot mini app"
      },
      "short_name": {
        "type": "string",
        "doc": "Short name, obtained from a [Direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links)"
      }
    }
  },
  "botAppNotModified": {
    "doc": "Bot app info hasn't changed.",
    "parameters": {}
  },
  "botApp": {
    "doc": "Contains information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "id": {
        "type": "long",
        "doc": "bot mini app ID"
      },
      "access_hash": {
        "type": "long",
        "doc": "bot mini app access hash"
      },
      "short_name": {
        "type": "string",
        "doc": "bot mini app short name, used to generate [Direct Mini App deep links](https://core.telegram.org/api/links#direct-mini-app-links)."
      },
      "title": {
        "type": "string",
        "doc": "bot mini app title."
      },
      "description": {
        "type": "string",
        "doc": "bot mini app description."
      },
      "photo": {
        "type": "Photo",
        "doc": "bot mini app photo."
      },
      "document": {
        "type": "flags.0?Document",
        "doc": "bot mini app animation."
      },
      "hash": {
        "type": "long",
        "doc": "Hash to pass to [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp), to avoid refetching bot app info if it hasn't changed."
      }
    }
  },
  "messages.botApp": {
    "doc": "Contains information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "inactive": {
        "type": "flags.0?true",
        "doc": "Whether the web app was never used by the user, and confirmation must be asked from the user before opening it."
      },
      "request_write_access": {
        "type": "flags.1?true",
        "doc": "The bot is asking permission to send messages to the user: if the user agrees, set the `write_allowed` flag when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView)."
      },
      "has_settings": {
        "type": "flags.2?true",
        "doc": "Deprecated flag, can be ignored."
      },
      "app": {
        "type": "BotApp",
        "doc": "Bot app information"
      }
    }
  },
  "appWebViewResultUrl": {
    "doc": "Contains the link that must be used to open a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps).",
    "parameters": {
      "url": {
        "type": "string",
        "doc": "The URL to open"
      }
    }
  },
  "inlineBotWebView": {
    "doc": "Specifies an [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps) button, shown on top of the inline query results list.",
    "parameters": {
      "text": {
        "type": "string",
        "doc": "Text of the button"
      },
      "url": {
        "type": "string",
        "doc": "Webapp URL"
      }
    }
  },
  "readParticipantDate": {
    "doc": "Contains info about when a certain participant has read a message",
    "parameters": {
      "user_id": {
        "type": "long",
        "doc": "User ID"
      },
      "date": {
        "type": "int",
        "doc": "When the user read the message"
      }
    }
  },
  "inputChatlistDialogFilter": {
    "doc": "Folder ID",
    "parameters": {
      "filter_id": {
        "type": "int",
        "doc": "[Folder](https://core.telegram.org/api/folders) ID"
      }
    }
  },
  "exportedChatlistInvite": {
    "doc": "Exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "title": {
        "type": "string",
        "doc": "Name of the link"
      },
      "url": {
        "type": "string",
        "doc": "The [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "peers": {
        "type": "Vector<Peer>",
        "doc": "Peers to import"
      }
    }
  },
  "chatlists.exportedChatlistInvite": {
    "doc": "Info about an exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "filter": {
        "type": "DialogFilter",
        "doc": "Folder ID"
      },
      "invite": {
        "type": "ExportedChatlistInvite",
        "doc": "The exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links)."
      }
    }
  },
  "chatlists.exportedInvites": {
    "doc": "Info about multiple [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "invites": {
        "type": "Vector<ExportedChatlistInvite>",
        "doc": "The [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links)."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Related chat information"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Related user information"
      }
    }
  },
  "chatlists.chatlistInviteAlready": {
    "doc": "Updated info about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links) we already imported.",
    "parameters": {
      "filter_id": {
        "type": "int",
        "doc": "ID of the imported folder"
      },
      "missing_peers": {
        "type": "Vector<Peer>",
        "doc": "New peers to be imported"
      },
      "already_peers": {
        "type": "Vector<Peer>",
        "doc": "Peers that were already imported"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Related chat information"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Related user information"
      }
    }
  },
  "chatlists.chatlistInvite": {
    "doc": "Info about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "title": {
        "type": "string",
        "doc": "Name of the link"
      },
      "emoticon": {
        "type": "flags.0?string",
        "doc": "Emoji to use as icon for the folder."
      },
      "peers": {
        "type": "Vector<Peer>",
        "doc": "Supergroups and channels to join"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Related chat information"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Related user information"
      }
    }
  },
  "chatlists.chatlistUpdates": {
    "doc": "Updated information about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links).",
    "parameters": {
      "missing_peers": {
        "type": "Vector<Peer>",
        "doc": "New peers to join"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Related chat information"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Related user information"
      }
    }
  },
  "bots.botInfo": {
    "doc": "Localized information about a bot.",
    "parameters": {
      "name": {
        "type": "string",
        "doc": "Bot name"
      },
      "about": {
        "type": "string",
        "doc": "Bot about text"
      },
      "description": {
        "type": "string",
        "doc": "Bot description"
      }
    }
  },
  "messagePeerVote": {
    "doc": "How a peer voted in a poll",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer ID"
      },
      "option": {
        "type": "bytes",
        "doc": "The option chosen by the peer"
      },
      "date": {
        "type": "int",
        "doc": "When did the peer cast the vote"
      }
    }
  },
  "messagePeerVoteInputOption": {
    "doc": "How a peer voted in a poll (reduced constructor, returned if an `option` was provided to [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes))",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The peer that voted for the queried `option`"
      },
      "date": {
        "type": "int",
        "doc": "When did the peer cast the vote"
      }
    }
  },
  "messagePeerVoteMultiple": {
    "doc": "How a peer voted in a multiple-choice poll",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "Peer ID"
      },
      "options": {
        "type": "Vector<bytes>",
        "doc": "Options chosen by the peer"
      },
      "date": {
        "type": "int",
        "doc": "When did the peer cast their votes"
      }
    }
  },
  "sponsoredWebPage": {
    "doc": "Represents a sponsored website.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "url": {
        "type": "string",
        "doc": "Web page URL."
      },
      "site_name": {
        "type": "string",
        "doc": "Website name."
      },
      "photo": {
        "type": "flags.0?Photo",
        "doc": "Optional image preview."
      }
    }
  },
  "storyViews": {
    "doc": "Aggregated view and reaction information of a [story](https://core.telegram.org/api/stories).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_viewers": {
        "type": "flags.1?true",
        "doc": "If set, indicates that the viewers list is currently viewable, and was not yet deleted because the story has expired while the user didn't have a [Premium](https://core.telegram.org/api/premium) account."
      },
      "views_count": {
        "type": "int",
        "doc": "View counter of the story"
      },
      "forwards_count": {
        "type": "flags.2?int",
        "doc": "Forward counter of the story"
      },
      "reactions": {
        "type": "flags.3?Vector<ReactionCount>",
        "doc": "All reactions sent to this story"
      },
      "reactions_count": {
        "type": "flags.4?int",
        "doc": "Number of reactions added to the story"
      },
      "recent_viewers": {
        "type": "flags.0?Vector<long>",
        "doc": "User IDs of some recent viewers of the story"
      }
    }
  },
  "storyItemDeleted": {
    "doc": "Represents a previously active story, that was deleted",
    "parameters": {
      "id": {
        "type": "int",
        "doc": "Story ID"
      }
    }
  },
  "storyItemSkipped": {
    "doc": "Represents an active story, whose full information was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about the skipped story when and if needed.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "close_friends": {
        "type": "flags.8?true",
        "doc": "Whether this story can only be viewed by [our close friends, see here »](https://core.telegram.org/api/privacy) for more info"
      },
      "id": {
        "type": "int",
        "doc": "Story ID"
      },
      "date": {
        "type": "int",
        "doc": "When was the story posted."
      },
      "expire_date": {
        "type": "int",
        "doc": "When does the story expire."
      }
    }
  },
  "storyItem": {
    "doc": "Represents a [story](https://core.telegram.org/api/stories).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.5?true",
        "doc": "Whether this story is pinned on the user's profile"
      },
      "public": {
        "type": "flags.7?true",
        "doc": "Whether this story is public and can be viewed by everyone"
      },
      "close_friends": {
        "type": "flags.8?true",
        "doc": "Whether this story can only be viewed by [our close friends, see here »](https://core.telegram.org/api/privacy) for more info"
      },
      "min": {
        "type": "flags.9?true",
        "doc": "Full information about this story was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about this story when and if needed."
      },
      "noforwards": {
        "type": "flags.10?true",
        "doc": "Whether this story is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more) and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera)."
      },
      "edited": {
        "type": "flags.11?true",
        "doc": "Indicates whether the story was edited."
      },
      "contacts": {
        "type": "flags.12?true",
        "doc": "Whether this story can only be viewed by our contacts"
      },
      "selected_contacts": {
        "type": "flags.13?true",
        "doc": "Whether this story can only be viewed by a select list of our contacts"
      },
      "out": {
        "type": "flags.16?true",
        "doc": "indicates whether we sent this story."
      },
      "id": {
        "type": "int",
        "doc": "ID of the story."
      },
      "date": {
        "type": "int",
        "doc": "When was the story posted."
      },
      "fwd_from": {
        "type": "flags.17?StoryFwdHeader",
        "doc": "For [reposted stories »](https://core.telegram.org/api/stories#reposting-stories), contains info about the original story."
      },
      "expire_date": {
        "type": "int",
        "doc": "When does the story expire."
      },
      "caption": {
        "type": "flags.0?string",
        "doc": "Story caption."
      },
      "entities": {
        "type": "flags.1?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities)"
      },
      "media": {
        "type": "MessageMedia",
        "doc": "Story media."
      },
      "media_areas": {
        "type": "flags.14?Vector<MediaArea>",
        "doc": "List of media areas, see [here »](https://core.telegram.org/api/stories#media-areas) for more info on media areas."
      },
      "privacy": {
        "type": "flags.2?Vector<PrivacyRule>",
        "doc": "[Privacy rules](https://core.telegram.org/api/privacy) indicating who can and can't view this story"
      },
      "views": {
        "type": "flags.3?StoryViews",
        "doc": "View date and reaction information"
      },
      "sent_reaction": {
        "type": "flags.15?Reaction",
        "doc": "The reaction we sent."
      }
    }
  },
  "stories.allStoriesNotModified": {
    "doc": "The list of active (or active and hidden) [stories](https://core.telegram.org/api/stories#watching-stories) has not changed.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "state": {
        "type": "string",
        "doc": "State to use to ask for updates"
      },
      "stealth_mode": {
        "type": "StoriesStealthMode",
        "doc": "Current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) information"
      }
    }
  },
  "stories.allStories": {
    "doc": "Full list of active (or active and hidden) [stories](https://core.telegram.org/api/stories#watching-stories).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "has_more": {
        "type": "flags.0?true",
        "doc": "Whether more results can be fetched as [described here »](https://core.telegram.org/api/stories#watching-stories)."
      },
      "count": {
        "type": "int",
        "doc": "Total number of active (or active and hidden) stories"
      },
      "state": {
        "type": "string",
        "doc": "State to use for pagination"
      },
      "peer_stories": {
        "type": "Vector<PeerStories>",
        "doc": "Stories"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      },
      "stealth_mode": {
        "type": "StoriesStealthMode",
        "doc": "Current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) information"
      }
    }
  },
  "stories.stories": {
    "doc": "List of [stories](https://core.telegram.org/api/stories#pinned-or-archived-stories)",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of stories that can be fetched"
      },
      "stories": {
        "type": "Vector<StoryItem>",
        "doc": "Stories"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "storyView": {
    "doc": "[Story](https://core.telegram.org/api/stories) view date and reaction information",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "blocked": {
        "type": "flags.0?true",
        "doc": "Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories."
      },
      "blocked_my_stories_from": {
        "type": "flags.1?true",
        "doc": "Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories."
      },
      "user_id": {
        "type": "long",
        "doc": "The user that viewed the story"
      },
      "date": {
        "type": "int",
        "doc": "When did the user view the story"
      },
      "reaction": {
        "type": "flags.2?Reaction",
        "doc": "If present, contains the reaction that the user left on the story"
      }
    }
  },
  "storyViewPublicForward": {
    "doc": "A certain peer has forwarded the story as a message to a public chat or channel.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "blocked": {
        "type": "flags.0?true",
        "doc": "Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories."
      },
      "blocked_my_stories_from": {
        "type": "flags.1?true",
        "doc": "Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories."
      },
      "message": {
        "type": "Message",
        "doc": "The message with the forwarded story."
      }
    }
  },
  "storyViewPublicRepost": {
    "doc": "A certain peer has reposted the story.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "blocked": {
        "type": "flags.0?true",
        "doc": "Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories."
      },
      "blocked_my_stories_from": {
        "type": "flags.1?true",
        "doc": "Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories."
      },
      "peer_id": {
        "type": "Peer",
        "doc": "The peer that reposted the story."
      },
      "story": {
        "type": "StoryItem",
        "doc": "The reposted story."
      }
    }
  },
  "stories.storyViewsList": {
    "doc": "Reaction and view counters for a [story](https://core.telegram.org/api/stories)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of results that can be fetched"
      },
      "views_count": {
        "type": "int",
        "doc": "Total number of story views"
      },
      "forwards_count": {
        "type": "int",
        "doc": "Total number of story forwards/reposts"
      },
      "reactions_count": {
        "type": "int",
        "doc": "Number of reactions that were added to the story"
      },
      "views": {
        "type": "Vector<StoryView>",
        "doc": "Story view date and reaction information"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      },
      "next_offset": {
        "type": "flags.0?string",
        "doc": "Offset for pagination"
      }
    }
  },
  "stories.storyViews": {
    "doc": "Reaction and view counters for a list of [stories](https://core.telegram.org/api/stories)",
    "parameters": {
      "views": {
        "type": "Vector<StoryViews>",
        "doc": "View date and reaction information of multiple stories"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "inputReplyToMessage": {
    "doc": "Reply to a message.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "reply_to_msg_id": {
        "type": "int",
        "doc": "The message ID to reply to."
      },
      "top_msg_id": {
        "type": "flags.0?int",
        "doc": "This field must contain the topic ID **only** when replying to messages in forum topics different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`).  \nIf the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic."
      },
      "reply_to_peer_id": {
        "type": "flags.1?InputPeer",
        "doc": "Used to reply to messages sent to another chat (specified here), can only be used for non-`protected` chats and messages."
      },
      "quote_text": {
        "type": "flags.2?string",
        "doc": "Used to quote-reply to only a certain section (specified here) of the original message. The maximum UTF-8 length for quotes is specified in the [quote\\_length\\_max](https://core.telegram.org/api/config#quote-length-max) config key."
      },
      "quote_entities": {
        "type": "flags.3?Vector<MessageEntity>",
        "doc": "[Message entities for styled text](https://core.telegram.org/api/entities) from the `quote_text` field."
      },
      "quote_offset": {
        "type": "flags.4?int",
        "doc": "Offset of the message `quote_text` within the original message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length))."
      }
    }
  },
  "inputReplyToStory": {
    "doc": "Reply to a story.",
    "parameters": {
      "user_id": {
        "type": "InputUser",
        "doc": "ID of the user that posted the story."
      },
      "story_id": {
        "type": "int",
        "doc": "ID of the story to reply to."
      }
    }
  },
  "exportedStoryLink": {
    "doc": "Represents a [story deep link](https://core.telegram.org/api/stories#story-links).",
    "parameters": {
      "link": {
        "type": "string",
        "doc": "The [story deep link](https://core.telegram.org/api/stories#story-links)."
      }
    }
  },
  "storiesStealthMode": {
    "doc": "Information about the current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) session.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "active_until_date": {
        "type": "flags.0?int",
        "doc": "The date up to which stealth mode will be active."
      },
      "cooldown_until_date": {
        "type": "flags.1?int",
        "doc": "The date starting from which the user will be allowed to re-enable stealth mode again."
      }
    }
  },
  "mediaAreaCoordinates": {
    "doc": "Coordinates and size of a clicable rectangular area on top of a story.",
    "parameters": {
      "x": {
        "type": "double",
        "doc": "The abscissa of the rectangle's center, as a percentage of the media width (0-100)."
      },
      "y": {
        "type": "double",
        "doc": "The ordinate of the rectangle's center, as a percentage of the media height (0-100)."
      },
      "w": {
        "type": "double",
        "doc": "The width of the rectangle, as a percentage of the media width (0-100)."
      },
      "h": {
        "type": "double",
        "doc": "The height of the rectangle, as a percentage of the media height (0-100)."
      },
      "rotation": {
        "type": "double",
        "doc": "Clockwise rotation angle of the rectangle, in degrees (0-360)."
      }
    }
  },
  "mediaAreaVenue": {
    "doc": "Represents a location tag attached to a [story](https://core.telegram.org/api/stories), with additional venue information.",
    "parameters": {
      "coordinates": {
        "type": "MediaAreaCoordinates",
        "doc": "The size and location of the media area corresponding to the location sticker on top of the story media."
      },
      "geo": {
        "type": "GeoPoint",
        "doc": "Coordinates of the venue"
      },
      "title": {
        "type": "string",
        "doc": "Venue name"
      },
      "address": {
        "type": "string",
        "doc": "Address"
      },
      "provider": {
        "type": "string",
        "doc": "Venue provider: currently only \"foursquare\" needs to be supported."
      },
      "venue_id": {
        "type": "string",
        "doc": "Venue ID in the provider's database"
      },
      "venue_type": {
        "type": "string",
        "doc": "Venue type in the provider's database"
      }
    }
  },
  "inputMediaAreaVenue": {
    "doc": "Represents a [location tag](https://core.telegram.org/api/stories#media-areas) attached to a [story](https://core.telegram.org/api/stories), with additional venue information.",
    "parameters": {
      "coordinates": {
        "type": "MediaAreaCoordinates",
        "doc": "The size and location of the media area corresponding to the location sticker on top of the story media."
      },
      "query_id": {
        "type": "long",
        "doc": "The `query_id` from [messages.botResults](https://core.telegram.org/constructor/messages.botResults), see [here »](https://core.telegram.org/api/stories#media-areas) for more info."
      },
      "result_id": {
        "type": "string",
        "doc": "The `id` of the chosen result, see [here »](https://core.telegram.org/api/stories#media-areas) for more info."
      }
    }
  },
  "mediaAreaGeoPoint": {
    "doc": "Represents a geolocation tag attached to a [story](https://core.telegram.org/api/stories).",
    "parameters": {
      "coordinates": {
        "type": "MediaAreaCoordinates",
        "doc": "The size and position of the media area corresponding to the location sticker on top of the story media."
      },
      "geo": {
        "type": "GeoPoint",
        "doc": "Coordinates of the geolocation tag."
      }
    }
  },
  "mediaAreaSuggestedReaction": {
    "doc": "Represents a reaction bubble.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "dark": {
        "type": "flags.0?true",
        "doc": "Whether the reaction bubble has a dark background."
      },
      "flipped": {
        "type": "flags.1?true",
        "doc": "Whether the reaction bubble is mirrored (see [here »](https://core.telegram.org/api/stories#reactions) for more info)."
      },
      "coordinates": {
        "type": "MediaAreaCoordinates",
        "doc": "The coordinates of the media area corresponding to the reaction button."
      },
      "reaction": {
        "type": "Reaction",
        "doc": "The reaction that should be sent when this area is clicked."
      }
    }
  },
  "mediaAreaChannelPost": {
    "doc": "Represents a channel post.",
    "parameters": {
      "coordinates": {
        "type": "MediaAreaCoordinates",
        "doc": "The size and location of the media area corresponding to the location sticker on top of the story media."
      },
      "channel_id": {
        "type": "long",
        "doc": "The channel that posted the message"
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the channel message"
      }
    }
  },
  "inputMediaAreaChannelPost": {
    "doc": "Represents a channel post",
    "parameters": {
      "coordinates": {
        "type": "MediaAreaCoordinates",
        "doc": "The size and location of the media area corresponding to the location sticker on top of the story media."
      },
      "channel": {
        "type": "InputChannel",
        "doc": "The channel that posted the message"
      },
      "msg_id": {
        "type": "int",
        "doc": "ID of the channel message"
      }
    }
  },
  "peerStories": {
    "doc": "[Stories](https://core.telegram.org/api/stories) associated to a peer",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "peer": {
        "type": "Peer",
        "doc": "The peer"
      },
      "max_read_id": {
        "type": "flags.0?int",
        "doc": "If set, contains the ID of the maximum read story"
      },
      "stories": {
        "type": "Vector<StoryItem>",
        "doc": "Stories"
      }
    }
  },
  "stories.peerStories": {
    "doc": "[Active story list](https://core.telegram.org/api/stories#watching-stories) of a specific peer.",
    "parameters": {
      "stories": {
        "type": "PeerStories",
        "doc": "Stories"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.webPage": {
    "doc": "Represents an Instant View webpage.",
    "parameters": {
      "webpage": {
        "type": "WebPage",
        "doc": "The instant view webpage."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Chats mentioned in the webpage."
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Users mentioned in the webpage."
      }
    }
  },
  "premiumGiftCodeOption": {
    "doc": "Contains info about a [giveaway/gift](https://core.telegram.org/api/giveaways) option.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "users": {
        "type": "int",
        "doc": "Number of users which will be able to activate the gift codes."
      },
      "months": {
        "type": "int",
        "doc": "Duration in months of each gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription."
      },
      "store_product": {
        "type": "flags.0?string",
        "doc": "Identifier of the store product associated with the option, official apps only."
      },
      "store_quantity": {
        "type": "flags.1?int",
        "doc": "Number of times the store product must be paid"
      },
      "currency": {
        "type": "string",
        "doc": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code"
      },
      "amount": {
        "type": "long",
        "doc": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
      }
    }
  },
  "payments.checkedGiftCode": {
    "doc": "Contains info about a [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "via_giveaway": {
        "type": "flags.2?true",
        "doc": "Whether this giftcode was created by a [giveaway](https://core.telegram.org/api/giveaways)."
      },
      "from_id": {
        "type": "flags.4?Peer",
        "doc": "The peer that created the gift code."
      },
      "giveaway_msg_id": {
        "type": "flags.3?int",
        "doc": "Message ID of the giveaway in the channel specified in `from_id`."
      },
      "to_id": {
        "type": "flags.0?long",
        "doc": "The destination user of the gift."
      },
      "date": {
        "type": "int",
        "doc": "Creation date of the gift code."
      },
      "months": {
        "type": "int",
        "doc": "Duration in months of the gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription."
      },
      "used_date": {
        "type": "flags.1?int",
        "doc": "When was the giftcode imported, if it was imported."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "payments.giveawayInfo": {
    "doc": "Contains info about an ongoing [giveaway](https://core.telegram.org/api/giveaways).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "participating": {
        "type": "flags.0?true",
        "doc": "The current user is participating in the giveaway."
      },
      "preparing_results": {
        "type": "flags.3?true",
        "doc": "If set, the giveaway has ended and the results are being prepared."
      },
      "start_date": {
        "type": "int",
        "doc": "When was the giveaway started"
      },
      "joined_too_early_date": {
        "type": "flags.1?int",
        "doc": "The current user can't participate in the giveaway, because they were already a member of the channel when the giveaway started, and the `only_new_subscribers` was set when starting the giveaway."
      },
      "admin_disallowed_chat_id": {
        "type": "flags.2?long",
        "doc": "If set, the current user can't participate in the giveaway, because they are an administrator in one of the channels (ID specified in this flag) that created the giveaway."
      },
      "disallowed_country": {
        "type": "flags.4?string",
        "doc": "If set, the current user can't participate in this giveaway, because their phone number is from the specified disallowed country (specified as a two-letter ISO 3166-1 alpha-2 country code)."
      }
    }
  },
  "payments.giveawayInfoResults": {
    "doc": "A [giveaway](https://core.telegram.org/api/giveaways) has ended.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "winner": {
        "type": "flags.0?true",
        "doc": "Whether we're one of the winners of this giveaway."
      },
      "refunded": {
        "type": "flags.1?true",
        "doc": "Whether the giveaway was canceled and was fully refunded."
      },
      "start_date": {
        "type": "int",
        "doc": "Start date of the giveaway"
      },
      "gift_code_slug": {
        "type": "flags.0?string",
        "doc": "If we're one of the winners of this giveaway, contains the [Premium gift code](https://core.telegram.org/api/links#premium-giftcode-links), see [here »](https://core.telegram.org/api/giveaways) for more info on the full giveaway flow."
      },
      "finish_date": {
        "type": "int",
        "doc": "End date of the giveaway. May be bigger than the end date specified in parameters of the giveaway."
      },
      "winners_count": {
        "type": "int",
        "doc": "Number of winners in the giveaway"
      },
      "activated_count": {
        "type": "int",
        "doc": "Number of winners, which activated their [gift codes](https://core.telegram.org/api/links#premium-giftcode-links)."
      }
    }
  },
  "prepaidGiveaway": {
    "doc": "Contains info about a [prepaid giveaway »](https://core.telegram.org/api/giveaways).",
    "parameters": {
      "id": {
        "type": "long",
        "doc": "Prepaid giveaway ID."
      },
      "months": {
        "type": "int",
        "doc": "Duration in months of each gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription."
      },
      "quantity": {
        "type": "int",
        "doc": "Number of given away [Telegram Premium](https://core.telegram.org/api/premium) subscriptions."
      },
      "date": {
        "type": "int",
        "doc": "Payment date."
      }
    }
  },
  "boost": {
    "doc": "Info about one or more [boosts](https://core.telegram.org/api/boost) applied by a specific user.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "gift": {
        "type": "flags.1?true",
        "doc": "Whether this boost was applied because the channel [directly gifted a subscription to the user](https://core.telegram.org/api/giveaways)."
      },
      "giveaway": {
        "type": "flags.2?true",
        "doc": "Whether this boost was applied because the user was chosen in a [giveaway started by the channel](https://core.telegram.org/api/giveaways)."
      },
      "unclaimed": {
        "type": "flags.3?true",
        "doc": "If set, the user hasn't yet invoked [payments.applyGiftCode](https://core.telegram.org/method/payments.applyGiftCode) to claim a subscription gifted [directly or in a giveaway by the channel](https://core.telegram.org/api/giveaways)."
      },
      "id": {
        "type": "string",
        "doc": "Unique ID for this set of boosts."
      },
      "user_id": {
        "type": "flags.0?long",
        "doc": "ID of the user that applied the boost."
      },
      "giveaway_msg_id": {
        "type": "flags.2?int",
        "doc": "The message ID of the [giveaway](https://core.telegram.org/api/giveaways)"
      },
      "date": {
        "type": "int",
        "doc": "When was the boost applied"
      },
      "expires": {
        "type": "int",
        "doc": "When does the boost expire"
      },
      "used_gift_slug": {
        "type": "flags.4?string",
        "doc": "The created Telegram Premium gift code, only set if either `gift` or `giveaway` are set AND it is either a gift code for the currently logged in user or if it was already claimed."
      },
      "multiplier": {
        "type": "flags.5?int",
        "doc": "If set, this boost counts as `multiplier` boosts, otherwise it counts as a single boost."
      }
    }
  },
  "premium.boostsList": {
    "doc": "List of [boosts](https://core.telegram.org/api/boost) that were applied to a peer by multiple users.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of results"
      },
      "boosts": {
        "type": "Vector<Boost>",
        "doc": "[Boosts](https://core.telegram.org/api/boost)"
      },
      "next_offset": {
        "type": "flags.0?string",
        "doc": "Offset that can be used for [pagination](https://core.telegram.org/api/offsets)."
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "myBoost": {
    "doc": "Contains information about a single [boost slot »](https://core.telegram.org/api/boost).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "slot": {
        "type": "int",
        "doc": "[Boost slot ID »](https://core.telegram.org/api/boost)"
      },
      "peer": {
        "type": "flags.0?Peer",
        "doc": "If set, indicates this slot is currently occupied, i.e. we are [boosting](https://core.telegram.org/api/boost) this peer.  \nNote that we can assign multiple boost slots to the same peer."
      },
      "date": {
        "type": "int",
        "doc": "When (unixtime) we started boosting the `peer`, `0` otherwise."
      },
      "expires": {
        "type": "int",
        "doc": "Indicates the (unixtime) expiration date of the boost in `peer` (`0` if `peer` is not set)."
      },
      "cooldown_until_date": {
        "type": "flags.1?int",
        "doc": "If `peer` is set, indicates the (unixtime) date after which this boost can be reassigned to another channel."
      }
    }
  },
  "premium.myBoosts": {
    "doc": "A list of peers we are currently [boosting](https://core.telegram.org/api/boost), and how many [boost slots](https://core.telegram.org/api/boost) we have left.",
    "parameters": {
      "my_boosts": {
        "type": "Vector<MyBoost>",
        "doc": "Info about boosted peers and remaining boost slots."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Referenced chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Referenced users"
      }
    }
  },
  "premium.boostsStatus": {
    "doc": "Contains info about the current [boost status](https://core.telegram.org/api/boost) of a peer.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "my_boost": {
        "type": "flags.2?true",
        "doc": "Whether we're currently boosting this channel, `my_boost_slots` will also be set."
      },
      "level": {
        "type": "int",
        "doc": "The current boost level of the channel."
      },
      "current_level_boosts": {
        "type": "int",
        "doc": "The number of boosts acquired so far in the current level."
      },
      "boosts": {
        "type": "int",
        "doc": "Total number of boosts acquired so far."
      },
      "gift_boosts": {
        "type": "flags.4?int",
        "doc": "The number of boosts acquired from created Telegram Premium [gift codes](https://core.telegram.org/api/giveaways) and [giveaways](https://core.telegram.org/api/giveaways); only returned to channel admins."
      },
      "next_level_boosts": {
        "type": "flags.0?int",
        "doc": "Total number of boosts needed to reach the next level; if absent, the next level isn't available."
      },
      "premium_audience": {
        "type": "flags.1?StatsPercentValue",
        "doc": "Only returned to channel admins: contains the approximated number of Premium users subscribed to the channel, related to the total number of subscribers."
      },
      "boost_url": {
        "type": "string",
        "doc": "[Boost deep link »](https://core.telegram.org/api/links#boost-links) that can be used to boost the chat."
      },
      "prepaid_giveaways": {
        "type": "flags.3?Vector<PrepaidGiveaway>",
        "doc": "A list of prepaid [giveaways](https://core.telegram.org/api/giveaways) available for the chat; only returned to channel admins."
      },
      "my_boost_slots": {
        "type": "flags.2?Vector<int>",
        "doc": "Indicates which of our [boost slots](https://core.telegram.org/api/boost) we've assigned to this peer (populated if `my_boost` is set)."
      }
    }
  },
  "storyFwdHeader": {
    "doc": "Contains info about the original poster of a reposted story.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "modified": {
        "type": "flags.3?true",
        "doc": "Whether the story media was modified before reposting it (for example by overlaying a round video with a reaction)."
      },
      "from": {
        "type": "flags.0?Peer",
        "doc": "Peer that originally posted the story; will be empty for stories forwarded from a user with forwards privacy enabled, in which case `from_name` will be set, instead."
      },
      "from_name": {
        "type": "flags.1?string",
        "doc": "Will be set for stories forwarded from a user with forwards privacy enabled, in which case `from` will also be empty."
      },
      "story_id": {
        "type": "flags.2?int",
        "doc": ", contains the story ID"
      }
    }
  },
  "postInteractionCountersMessage": {
    "doc": "Interaction counters for a message.",
    "parameters": {
      "msg_id": {
        "type": "int",
        "doc": "Message ID"
      },
      "views": {
        "type": "int",
        "doc": "Number of views"
      },
      "forwards": {
        "type": "int",
        "doc": "Number of forwards to public channels"
      },
      "reactions": {
        "type": "int",
        "doc": "Number of reactions"
      }
    }
  },
  "postInteractionCountersStory": {
    "doc": "Interaction counters for a story.",
    "parameters": {
      "story_id": {
        "type": "int",
        "doc": "Story ID"
      },
      "views": {
        "type": "int",
        "doc": "Number of views"
      },
      "forwards": {
        "type": "int",
        "doc": "Number of forwards and reposts to public chats and channels"
      },
      "reactions": {
        "type": "int",
        "doc": "Number of reactions"
      }
    }
  },
  "stats.storyStats": {
    "doc": "Contains [statistics](https://core.telegram.org/api/stats) about a [story](https://core.telegram.org/api/stories).",
    "parameters": {
      "views_graph": {
        "type": "StatsGraph",
        "doc": "A graph containing the number of story views and shares"
      },
      "reactions_by_emotion_graph": {
        "type": "StatsGraph",
        "doc": "A bar graph containing the number of story reactions categorized by \"emotion\" (i.e. Positive, Negative, Other, etc...)"
      }
    }
  },
  "publicForwardMessage": {
    "doc": "Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a message.",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "Info about the message with the reposted story."
      }
    }
  },
  "publicForwardStory": {
    "doc": "Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a repost by a public channel.",
    "parameters": {
      "peer": {
        "type": "Peer",
        "doc": "The channel that reposted the story."
      },
      "story": {
        "type": "StoryItem",
        "doc": "The reposted story (may be different from the original story)."
      }
    }
  },
  "stats.publicForwards": {
    "doc": "Contains info about the forwards of a [story](https://core.telegram.org/api/stories) as a message to public chats and reposts by public channels.",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of results"
      },
      "forwards": {
        "type": "Vector<PublicForward>",
        "doc": "Info about the forwards of a story."
      },
      "next_offset": {
        "type": "flags.0?string",
        "doc": "Offset used for [pagination](https://core.telegram.org/api/offsets)."
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "peerColor": {
    "doc": "Represents a [color palette »](https://core.telegram.org/api/colors).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "color": {
        "type": "flags.0?int",
        "doc": "[Color palette ID, see here »](https://core.telegram.org/api/colors) for more info; if not set, the default palette should be used."
      },
      "background_emoji_id": {
        "type": "flags.1?long",
        "doc": "Optional [custom emoji ID](https://core.telegram.org/api/custom-emoji) used to generate the pattern."
      }
    }
  },
  "help.peerColorSet": {
    "doc": "Represents a [color palette that can be used in message accents »](https://core.telegram.org/api/colors).",
    "parameters": {
      "colors": {
        "type": "Vector<int>",
        "doc": "A list of 1-3 colors in RGB format, describing the accent color."
      }
    }
  },
  "help.peerColorProfileSet": {
    "doc": "Represents a [color palette that can be used in profile pages »](https://core.telegram.org/api/colors).",
    "parameters": {
      "palette_colors": {
        "type": "Vector<int>",
        "doc": "A list of 1-2 colors in RGB format, shown in the color palette settings to describe the current palette."
      },
      "bg_colors": {
        "type": "Vector<int>",
        "doc": "A list of 1-2 colors in RGB format describing the colors used to generate the actual background used in the profile page."
      },
      "story_colors": {
        "type": "Vector<int>",
        "doc": "A list of 2 colors in RGB format describing the colors of the gradient used for the unread active story indicator around the profile photo."
      }
    }
  },
  "help.peerColorOption": {
    "doc": "Contains info about a [color palette »](https://core.telegram.org/api/colors).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "hidden": {
        "type": "flags.0?true",
        "doc": "Whether this palette should not be displayed as an option to the user when choosing a palette to apply to profile pages or message accents."
      },
      "color_id": {
        "type": "int",
        "doc": "Palette ID."
      },
      "colors": {
        "type": "flags.1?help.PeerColorSet",
        "doc": "Light mode palette.  \nWill be empty for IDs `0` to `6` inclusive, in which case a palette containing a single color from the following colors should be used: red, orange, violet, green, cyan, blue, pink for indexes 0 to 6."
      },
      "dark_colors": {
        "type": "flags.2?help.PeerColorSet",
        "doc": "Dark mode palette. Optional, defaults to the palette in `colors` (or the autogenerated palette for IDs `0` to `6`) if absent."
      },
      "channel_min_level": {
        "type": "flags.3?int",
        "doc": "Channels can use this palette only after reaching at least the [boost level](https://core.telegram.org/api/boost) specified in this field."
      }
    }
  },
  "help.peerColorsNotModified": {
    "doc": "The list of color palettes has not changed.",
    "parameters": {}
  },
  "help.peerColors": {
    "doc": "Contains info about multiple [color palettes »](https://core.telegram.org/api/colors).",
    "parameters": {
      "hash": {
        "type": "int",
        "doc": "[Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)"
      },
      "colors": {
        "type": "Vector<help.PeerColorOption>",
        "doc": "Usable [color palettes](https://core.telegram.org/api/colors)."
      }
    }
  },
  "storyReaction": {
    "doc": "How a certain peer reacted to a story",
    "parameters": {
      "peer_id": {
        "type": "Peer",
        "doc": "The peer"
      },
      "date": {
        "type": "int",
        "doc": "Reaction date"
      },
      "reaction": {
        "type": "Reaction",
        "doc": "The reaction"
      }
    }
  },
  "storyReactionPublicForward": {
    "doc": "A certain peer has forwarded the story as a message to a public chat or channel.",
    "parameters": {
      "message": {
        "type": "Message",
        "doc": "The message with the forwarded story."
      }
    }
  },
  "storyReactionPublicRepost": {
    "doc": "A certain peer has reposted the story.",
    "parameters": {
      "peer_id": {
        "type": "Peer",
        "doc": "The peer that reposted the story."
      },
      "story": {
        "type": "StoryItem",
        "doc": "The reposted story."
      }
    }
  },
  "stories.storyReactionsList": {
    "doc": "List of peers that reacted to or intercated with a specific [story](https://core.telegram.org/api/stories)",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "count": {
        "type": "int",
        "doc": "Total number of reactions matching query"
      },
      "reactions": {
        "type": "Vector<StoryReaction>",
        "doc": "List of peers that reacted to or interacted with a specific story"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      },
      "next_offset": {
        "type": "flags.0?string",
        "doc": "If set, indicates the next offset to use to load more results by invoking [stories.getStoryReactionsList](https://core.telegram.org/method/stories.getStoryReactionsList)."
      }
    }
  },
  "savedDialog": {
    "doc": "Represents a [saved dialog »](https://core.telegram.org/api/saved-messages).",
    "parameters": {
      "flags": {
        "type": "#",
        "doc": "Flags, see [TL conditional fields](https://core.telegram.org/mtproto/TL-combinators#conditional-fields)"
      },
      "pinned": {
        "type": "flags.2?true",
        "doc": "Is the dialog pinned"
      },
      "peer": {
        "type": "Peer",
        "doc": "The dialog"
      },
      "top_message": {
        "type": "int",
        "doc": "The latest message ID"
      }
    }
  },
  "messages.savedDialogs": {
    "doc": "Represents some [saved message dialogs »](https://core.telegram.org/api/saved-messages).",
    "parameters": {
      "dialogs": {
        "type": "Vector<SavedDialog>",
        "doc": "[Saved message dialogs »](https://core.telegram.org/api/saved-messages)."
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "List of last messages from each saved dialog"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.savedDialogsSlice": {
    "doc": "Incomplete list of [saved message dialogs »](https://core.telegram.org/api/saved-messages) with messages and auxiliary data.",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Total number of saved message dialogs"
      },
      "dialogs": {
        "type": "Vector<SavedDialog>",
        "doc": "List of saved message dialogs"
      },
      "messages": {
        "type": "Vector<Message>",
        "doc": "List of last messages from dialogs"
      },
      "chats": {
        "type": "Vector<Chat>",
        "doc": "Mentioned chats"
      },
      "users": {
        "type": "Vector<User>",
        "doc": "Mentioned users"
      }
    }
  },
  "messages.savedDialogsNotModified": {
    "doc": "The saved dialogs haven't changed",
    "parameters": {
      "count": {
        "type": "int",
        "doc": "Number of [saved dialogs](https://core.telegram.org/api/saved-messages) found server-side by the query"
      }
    }
  }
}
